{
  
  "0": {
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. . NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. . License and Sublicense Grant. . (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) &quot;Licensee Products&quot; means Licensee products that use or incorporate Microchip Products. (ii) &quot;Microchip Product&quot; means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) &quot;Object Code&quot; means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) &quot;Source Code&quot; means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) &quot;Third Party&quot; means Licensee&#39;s agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) &quot;Third Party Products&quot; means Third Party products that use or incorporate Microchip Products. . (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. . Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. . (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. . (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party&#39;s authorized use of the Software in conformance with this Section 2(d). . (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. . (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. . | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. . | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. . | Licensee’s Obligations. . (a) Licensee will ensure Third Party compliance with the terms of this Agreement. . (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. . (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. . (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. . | Confidentiality. . (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. . (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. . | Ownership of Proprietary Rights. . (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. . (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. . | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. . | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. . | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. . | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. . | General. . (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. . (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. . (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. . (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. . (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. . (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. . (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. . (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. . (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. . | If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. . Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. . License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. . Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. . THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. .",
    "url": "http://localhost:4000/reference_apps/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  }
  ,"1": {
    "title": "PIC32MK General Purpose (GP) Development Board",
    "content": "PIC32MK General Purpose (GP) Development Board . This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32MK General Purpose (GP) Development Board. . Getting Started | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/readme.html",
    "relUrl": "/apps/pic32mk_gp_db/readme.html"
  }
  ,"2": {
    "title": "Getting Started",
    "content": ". Getting Started Application on Curiosity PIC32MX470 Development Board . . Description . The application reads the current room temperature from the temperature sensor on the MikroElectronika Weather click board. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch S1 on the Curiosity PIC32MX470 Development Board. Also, LED1 is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules I2C | Timer | Core Timer | GPIO | UART | DMA | . | . Hardware Used: . Curiosity PIC32MX470 Development Board | MikroElectronika Weather click board | MikroElectronika USB UART click board | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the Type-A male to mini-B USB cable to mini-B DEBUG USB port to power and debug the PIC32MX470 Curiosity Development Board. | Connect the MikroElectronika Weather click board on the mikroBUS interface 1 | Connect the MikroElectronika USB UART click board on the mikroBUS interface 2 | Connect USB Type-A male to mini-B male cable to USB-UART serial port through mikroBUS interface 2 | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MX470F512H” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (pic32mx470_getting_started firmware pic32mx470_curiosity.X) in MPLAB X IDE | Ensure “PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice LED1 blinking at a 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the S1 switch on the Curiosity PIC32MX470 Development Board to change the default sampling rate to one second | Every subsequent press of switch S1 on the Curiosity PIC32MX470 Development Board changes the default sampling rate to two seconds, four seconds, 500 milliseconds and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch S1 press, notice LED1 toggling at the same sampling rate | . Comments: . Reference Training Module: Getting Started With Harmony v3 Peripheral Libraries on PIC32MX 470 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html"
  }
  ,"3": {
    "title": "Curiosity PIC32MX470 Development Board",
    "content": "Curiosity PIC32MX470 Development Board . This folder contains the MPLAB® Harmony 3 reference applications developed on Curiosity PIC32MX470 Development Board. . Getting Started | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/readme.html",
    "relUrl": "/apps/pic32mx470_curiosity/readme.html"
  }
  ,"4": {
    "title": "Getting Started",
    "content": ". Getting Started Application with Curiosity PIC32MZ DA Development Board . . Description . This application demonstrates an LED (LED1[RGB-RED]) toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW1 on the Curiosity PIC32MZ DA Development Board. . The demo application has additional functionality to print the current room temperature periodically using on board temperature sensor. . Modules/Technology Used: . Peripheral Modules I2C | Timer | GPIO | UART | DMA | . | . Hardware Used: . Curiosity PIC32MZ DA Development Board | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Hardware Setup: . Connect the Curiosity PIC32MZ DA Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. . . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2064DAR176” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (pic32mzda_getting_started firmware pic32mz_da_curiosity.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Reset or power cycle the device. | An LED (LED1[RGB-RED]) on the Curiosity PIC32MZ DA Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And the LED toggling rate is displayed on the serial terminal. | Press the switch SW1 on the Curiosity PIC32MZ DA Development Board to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW1 on the Curiosity PIC32MZ DA Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW2 on the Curiosity PIC32MZ DA Development Board to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW1 on the Curiosity PIC32MZ DA Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds on every time user press the switch SW1 on the Curiosity PIC32MZ DA Development Board. | . Comments: . This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html"
  }
  ,"5": {
    "title": "Curiosity PIC32MZ DA Development Board",
    "content": "Curiosity PIC32MZ DA Development Board . This folder contains the MPLAB® Harmony 3 reference applications developed on Curiosity PIC32MZ DA Development Board. . Getting Started | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/readme.html",
    "relUrl": "/apps/pic32mz_da_curiosity/readme.html"
  }
  ,"6": {
    "title": "Getting Started Extended",
    "content": ". Getting Started Extended Application on Curiosity PIC32MZ EF 2.0 Development Board . . Description . This application demonstrates an LED (LED1) toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board. . The demo application has extended functionality to print the current room temperature periodically when the XPRO connector is plugged with I/O1 Xplained Pro Extension Kit. . Modules/Technology Used: . Peripheral Modules I2C | Timer | GPIO | UART | DMA | . | . Hardware Used: . Curiosity PIC32MZ EF 2.0 Development Board | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup 1: . Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . Setup 2: . Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | To test the extended functionality, connect the I/O1 Xplained Pro Extension Kit (Temperature Sensor) to J501 (Extension Header 1 (EXT1)) on the Curiosity PIC32MZ EF 2.0 Development Board | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started_ext firmware pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Reset or power cycle the device | An LED (LED1) on the Curiosity PIC32MZ EF 2.0 Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds | And also, the LED toggling rate is displayed on the serial terminal | Press the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board to change the periodicity of the timeout to one second | Every subsequent pressing of the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order | Testing Extended functionality: Press the switch SW2 on the Curiosity PIC32MZ EF 2.0 Development Board to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis | Press the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds on every time user press the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board. | . | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on PIC32MZ EF MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html"
  }
  ,"7": {
    "title": "Getting Started Middleware",
    "content": ". Getting Started Application using Harmony v3 Drivers, System Services, Middleware and FreeRTOS on Curiosity PIC32MZ EF 2.0 Development Board . . Description . The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM and to a file in a USB thumb drive whenever the USB thumb drive is connected. Also, an LED LED1 is toggled every time the temperature is displayed on the serial console and an LED (LED2) is in ON state when a USB thumb drive is connected. . Modules/Technology Used: . Peripheral Modules I2C | Timer | GPIO | UART | DMA | . | Drivers USB High-Speed Driver | USART Synchronous Drive | I²C Synchronous Driver | . | System Services File System Services | . | Middleware USB Host | . | Third Party Libraries FreeRTOS | . | . Hardware Used: . Curiosity PIC32MZ EF 2.0 Development Board | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “usb” repo v3.5.0 | MPLAB Harmony v3 “bsp” repo v3.7.0 | MPLAB Harmony Configurator Plugin v3.5.0 | CMSIS-FreeRTOS v10.3.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Connect the I/O1 Xplained Pro Extension Kit (Temperature Sensor) to J501 (Extension Header 1 (EXT1)) on the Curiosity PIC32MZ EF 2.0 Development Board | Connect USB OTG Thumb Drive (Pendrive having mirco USB connector) or connect any pen drive using Type-A female to micro-B USB converter cable to Target USB (J201) on the Curiosity PIC32MZ EF 2.0 Development Board | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started_middleware firmware middleware_drivers_freertos_pic32mz_ef_curiosity2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED1 blinking at a one second rate | Press any character on the terminal to display the last five values written to the EEPROM | You should see the LED2 is in “ON” state whenever you connect a USB thumb drive and the application creates a text file “Temperature_Sensor_Data.txt” if it is not already present in the USB thumb drive. The latest room temperature samples are written to the text file at a one-second rate. To view the data in the text file, connect the USB Thumb drive to a PC USB port and open the Temperature_Sensor_Data.txt file | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | . Comments: . Reference Training Module: Getting Started with Harmony v3 Drivers and Middleware on PIC32MZ EF MCUs using FreeRTOS | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html"
  }
  ,"8": {
    "title": "USB MSD with Multiple Drives",
    "content": ". USB MSD with Multiple Drives Application on Curiosity PIC32MZ EF 2.0 Development Board . . Description . This application demonstrates the creation of a USB device with multiple drives or logical units (LUN). The storage media - SD Card, acts as one drive, and the internal flash memory (NVM) acts as the second drive. Data transfer between a computer and the logical units (SD Card / NVM) takes place through USB MSD class.When connected to a USB Host (PC) both the SD Card and the NVM appear as two separate drives on the Host PC. . Modules/Technology Used: . Peripheral Modules Core Timer | . | Driver Modules NVM driver | SDSPI driver | Memory Driver | . | System Service Libraries File System | . | Middleware Libraries USB Device stack | . | . Hardware Used: . Curiosity PIC32MZ EF 2.0 Development Board | MICROSD CLICK from MikroElektronika | Micro SD Card | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “usb” repository v3.5.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Mount the microSD click board on the mikro bus 2 interface (J306) on Curiosity PIC32MZ EF 2.0 Development Board | Insert a micro SD card into the microSD click board card slot | Power the Curiosity PIC32MZ EF 2.0 Development Board from a Host PC through a Type-A male to micro-B USB cable connected to Micro-B port (J700) | Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a second Type-A male to micro-B USB cable connected to Micro-B port (J201) | . . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (msd_multiple_luns firmware pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Reset or power cycle the devcie | Wait for the host computer to read the contents of the two media (SD Card and NVM) | The device should appear as two new drives on the your personal computer | The NVM media should appear as “Drive Name” and should have a sample “FILE.txt” file | The drive name for the SD card media depends on the micro SD card vendor. The drives can then be used to read or write files | LED3 illuminates once Curiosity 2.0 board is enumerated as a Mass Storage Device by the USB host and LED2 will be illuminated when USB is not plugged. | . Note: Reprogramming the development board will cause any stored files in the NVM media to be erased . Comments: . While formatting the SD card, change allocation unit size to 32K. This helps in reading the contents of the SD card faster. (To change allocation unit size, Right click on Drive &gt; Select Format &gt; change Allocation unit size) | This application is developed by applying a patch (available in folder “msd_multiple_luns firmware usb_repo_patch”) to MPLAB Harmony v3 “usb” repository. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “msd_multiple_luns firmware usb_repo_patch” folder | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/msd_multiple_luns/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/msd_multiple_luns/readme.html"
  }
  ,"9": {
    "title": "Getting Started",
    "content": ". Getting Started Application on Curiosity PIC32MZ EF 2.0 Development Board . . Description . The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board. Also, LED1 is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules I2C | Timer | GPIO | UART | DMA | . | . Hardware Used: . Curiosity PIC32MZ EF 2.0 Development Board | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Connect the I/O1 Xplained Pro Extension Kit (Temperature Sensor) to J501 (Extension Header 1 (EXT1)) on the Curiosity PIC32MZ EF 2.0 Development Board | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started firmware pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice LED1 blinking at a 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the SW1 switch on the Curiosity PIC32MZ EF 2.0 Development Board to change the default sampling rate to one second | Every subsequent press of switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board changes the default sampling rate to two seconds, four seconds, 500 milliseconds and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW1 press, notice LED1 toggling at the same sampling rate | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on PIC32MZ EF MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html"
  }
  ,"10": {
    "title": "SD Card Audio Player",
    "content": ". SD Card Audio Player Application on Curiosity PIC32MZ EF 2.0 Development Board . . Description: . The demonstration application creates an audio player that reads audio files (.WAV format only) from an SD card mounted on the click interface. The audio is played through the CODEC placed on the X32 header interface. It also provides feature to switch to the next track on the media. . The sdcard_player application plays .wav files from the SD Card. The SD Card driver uses the SPI driver to interact with the SD Card. The application uses the File System Service to read/write data on the SD Card. The audio data read from the SD card is decoded by passing it to the WAV decoder. The decoded output is saved in the output buffers 1 and 2 which are used in ping pong manner. The output buffers 1 and 2 are submitted to the Codec driver for playing. The Codec is configured for 16-bit data and 48 kHz sampling frequency. The Codec driver sends the audio data to the AK4954 Codec using the I2S driver, which in turn uses DMA to transfer the audio data. The Codec driver uses the I2C driver to send commands to the AK4954 Codec. . Modules/Technology Used: . Peripheral Modules Core Timer | DMA | . | Driver Modules I2S driver | SDSPI driver | AK4954 Codec driver | . | System Service Libraries File System | . | WAV Audio decoder | . Hardware Used: . Curiosity PIC32MZ EF 2.0 Development Board | MICROSD CLICK from MikroElektronika | PIC32 Audio Codec Daughter Card - AK4954 | Micro SD Card | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “audio” repository v3.5.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Mount the microSD click board on the mikro bus 1 interface (J301, J302) on Curiosity PIC32MZ EF 2.0 Development Board | Insert a micro SD card into the microSD click board card slot. Ensure that the SD card contains WAV audio files | Mount the PIC32 Audio Codec Daughter Card - AK4954 on X32 HEADER 2 on Curiosity PIC32MZ EF 2.0 Development Board | Connect speaker or headphone to the headphone out (HP OUT) connector (Yellow colour) on top of the PIC32 Audio Codec Daughter Card - AK4954 | Power the Curiosity PIC32MZ EF 2.0 Development Board from a Host PC through a Type-A male to micro-B USB cable connected to Micro-B port (J700) | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (sdcard_player firmware pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Reset or power cycle the device. | After the board powers up, the first WAV audio track on the media is played, indicated by the glowing of LED1 on the Curiosity PIC32MZ EF 2.0 Development Board. (If no audio is heard, power cycle the board by pressing the “RESET” switch) | Put on the headphone. You should be able to hear the audio track being played from the SD card. | Switch to the next track on the media by pressing button SW1. The changing of the track is indicated by the toggling of LED3 on the Curiosity PIC32MZ EF 2.0 Development Board | . Comments: . This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html"
  }
  ,"11": {
    "title": "Snake Game",
    "content": ". Snake Game Application on Curiosity PIC32MZ EF 2.0 Development Board + High-Performance WVGA LCD Display Module with maXTouch Technology using Legato Graphics . . Description: . This demonstration represents the classic snake game wherein the player maneuvers the snake and tries to eat the mice (food), which eventually grows the length of the snake. The player needs to protect the snake from hitting the boundary. The application uses the Legato Graphics libray to implement the user interface. The template of each screen is made using the Legato Graphics Composer, while the snake was created using a rectangle widgets used inside a double chained list. The control for the thumbstick was implemented using the SPI driver library from Harmony 3. . Modules/Technology Used: . Legato Graphics Library | SSD1936 driver | SPI Driver Library | Time System Service Library | Core Timer | . Hardware Used: . Curiosity PIC32MZ EF 2.0 Development Board | Thumbstick click from MikroElektronika | SSD1963 LCD Controller Graphics Card | High-Performance WVGA LCD Display Module with maXTouch ® Technology | . Software/Tools Used: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “gfx” repository v3.6.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Setup: . Mount SSD1963 LCD Controller Graphics Card on the Graphics connector(J601) of Curiosity PIC32MZ EF 2.0 Development Board | Mount Thumbstick click board on mikro bus click 1 connector of Curiosity PIC32MZ EF 2.0 Development Board | Connect the WVGA LCD Display Module ribbon to the connector(J2) of the SSD1963 LCD Controller Graphics Card | Plug the 5.5-14V power cable to the power connecter(J200) of the Curiosity PIC32MZ EF 2.0 Development Board | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (snake_game firmware pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Perform a reset by pressing RESET button on the Curiosity PIC32MZ EF 2.0 Development Board | After the board powers up, a splash screen should appear followed by the Menu screen. | By using the Thumbstick, select the desired level to play and press the thumbstick to enter the level. | Use the thumbstick to change the snake direction in order to reach the food. | By pressing the Thumbstick button the user can go back to the Menu. | . Your browser does not support the video tag. Comments: . The game should end when the snake hit an obstacle when it doesn’t have any remaining lives or when it eats food 10 times | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 Released application demo | . History . None | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html"
  }
  ,"12": {
    "title": "Curiosity PIC32MZ EF 2.0 Development Board",
    "content": "Curiosity PIC32MZ EF 2.0 Development Board . This folder contains the MPLAB® Harmony 3 reference applications developed on Curiosity PIC32MZ EF 2.0 Development Board. . Getting Started | Getting Started Extended | Getting Started Middleware - EEPROM/Thumb drive temperature logger | USB MSD with Multiple Drives | SD Card Audio Player | Snake Game | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/readme.html"
  }
  ,"13": {
    "title": "Live update on PIC32MZ",
    "content": ". Live update on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . . Description: . The Live update application uses the dual bank flash feature available on the PIC32MZ Microcontrollers (MCUs). The banks on PIC32MZ MCU are named as BANK1 and BANK2. At any point of time, the application considers the bank on which it is currently executing from as active bank while the other bank is marked as inactive bank. The dual bank flash enables programming the inactive bank with a new version of the firmware while running the current version of the firmware from the active bank. . The application updates the new version of the firmware to the inactive bank while the current version of the firmware runs from the active bank. . The application identifies the flash bank which has the latest version of the firmware (active bank) and toggles a specific LED at a periodic rate. For example, it starts with toggling LED1 and when there is bank swap (active bank changed following successful upgrade), it toggles LED2. Similarly, the process repeats for every successful application firmware update. . Modules/Technology Used: . Peripheral Modules NVM | CORE TIMER | UART | Harmony Core | . | . Hardware Used: . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “bsp” repo v3.7.0 | MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “bootloader” repo v3.2.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Windows command prompt | Python 2.7 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Running the Bootloader application: . For the first time, the Live update application is programmed by using either Harmony basic bootloader or Harmony fail-safe bootloader. . Download the MPLAB Harmony Bootloader package. | Connect a mini USB cable to the DEBUG port of the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit. | Build and program the UART fail safe bootloader (Dual bank bootloader) which is in (path: &lt;Your Harmony Framework download folder&gt;/bootloader/apps/uart_fail_safe_bootloader/bootloader/firmware/pic32mz_ef_sk.X) using the MPLAB X IDE. | Build the Live update application (path: &lt;Live Update application folder&gt;/firmware/pic32mz_ef_sk.X) using the MPLAB X IDE but do not program. | From the command prompt, run the bootloader host script “btl_host.py” available at &lt;Your Harmony Framework download folder&gt;/bootloader/tools_archive to program the application binary. python &lt;Your Harmony Framework download folder&gt;/bootloader/tools_archive/btl_host.py -v -s -i &lt;COM PORT&gt; -d pic32mz -a 0x9D100000 -f &lt;Live Update application folder&gt;/firmware/pic32mz_ef_sk.X/dist/pic32mz_ef_sk/production/pic32mz_ef_sk.X.production.bin | Note: If you need to know more information on the bootloader host script, refer Help for setting up the host script available at &lt;Your Harmony Framework download folder&gt;/bootloader/doc/help_bootloader.chm | . | Following screenshot shows successful programming of the application binary. | The messages “Swapping Bank And Rebooting and Reboot Done” in below screenshot signifies that bootloading is successful. | . | Running the Live update application: . Perform “Running the Bootloader application” steps mentioned above, if not done already. | If the above step is successful, then LED1 or LED2 on the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit should start blinking which indicates the application is running from BANK 1 or BANK 2 based on from where the program is running. | Reset or Power cycle the device. | Run the host script “live_update.py” for live update application from command prompt available at &lt;Live Update application folder&gt;/scripts to program the new version of the firmware to an inactive panel while the current version of the application is being run from the active panel. python &lt;Live Update application folder&gt;/scripts/live_update.py -v -s -i &lt;COM PORT&gt; -d pic32mz -a 0x9D100000 -f &lt;Live Update application folder&gt;/firmware/pic32mz_ef_sk.X/dist/pic32mz_ef_sk/production/pic32mz_ef_sk.X.production.bin | The following screenshot shows the Live update script help. | | . | The following screenshot shows the example for output of successful firmware programming. | . | If the Live update is success then LED3 should turn ON. This indicates that the Live update is successful | . | In case of any error during the Live update i.e. in Step 4, the LED3 turns OFF. Follow the below steps recover from the error: Press and hold the Switch SW1 to reset the system then repeat the step 4 to program the Live update application. | or | Reset or Power cycle the device and repeat from the step 4 to program the Live update application. | . | If the Live update is success then LED1 or LED2 should start blinking which indicates the application is running from BANK 1 or BANK 2 based on from where the program is running. LED1 for BANK 1 | LED2 for BANK 2 | . | Reset or Power Cycle the device for the newly programmed application to run. Observe the change in LED toggling compared to the LED which was toggling in the previous step. This indicates that the newly updated image is running properly. | . | Comments: . Reference Application Note: Live Update application on PIC32MZ MCUs using MPLAB Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html"
  }
  ,"14": {
    "title": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit. . Live Update | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk/readme.html"
  }
  ,"15": {
    "title": "Audio-Tone using a Lookup Table",
    "content": ". Audio-Tone using a Lookup Table Application on PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II . . Description . The application streams an audio tone (stored in the form of a lookup table in memory) over the I²S interface which gets played on the audio codec. . Modules/Technology Used: . Peripheral Modules I2C | I2S | Timer | Core Timer | . | Drivers I2S Driver | I2C Driver | AK4953 Driver | . | BSP Library PIC32MZ EF Starter Kit BSP | . | . Hardware Used: . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | PIC32 Multimedia Expansion Board II | . Note: This application is a reference only to the existing users of Multimedia Expansion Board II (MEB II) to port/develop their application(s) using MPLAB Harmony v3 as the Multimedia Expansion Board II (MEB II) is now a matured product and the same is not available for purchase from Microchip Direct. . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “audio” repository v3.5.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. | Connect the wired stereo headphone to the audio jack | . Note: It is not necessary to have an MPLAB Real ICE™ to program/debug the code. The PIC32MZ EF Starter Kit includes a PICkit™ on-board (PKOB) debugger. The PKOB debugger can be connected to a host PC through the USB Mini-B connector on the PIC32MZ EF Starter Kit for programming/debugging (see the red cable in the hardware setup). . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFH144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (audio_player_lab1 firmware audio_player_lab1.X) in MPLAB X IDE | Ensure “PKOB” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Connect a headphone to the HP Out connector on the Multimedia Expansion Board II | Wear the headphone and you should hear a tone. | . Comments: . Reference Training Module: Lab 1: Audio-Tone Generation Using a Lookup Table with Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab1/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab1/readme.html"
  }
  ,"16": {
    "title": "Audio-Tone Application by reading the tone from a text file stored in an SD card",
    "content": ". Audio-Tone Application by reading the tone from a text file stored in an SD card on PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II . . Description . The application reads an audio text file from the PIC32 Multimedia Expansion Board II (MEB II) SD card and streams it over the PIC32 I²S interface to the audio CODEC. The audio file is saved as a .txt file with comma-separated left and right channel audio data . Modules/Technology Used: . Peripheral Modules I2C | I2S | Timer | Core Timer | . | Drivers I2S Driver | I2C Driver | AK4953 Driver | SDCARD (SPI) Driver | . | BSP Library PIC32MZ EF Starter Kit BSP | . | System Services File System | . | . Hardware Used: . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | PIC32 Multimedia Expansion Board II | . Note: This application is a reference only to the existing users of Multimedia Expansion Board II (MEB II) to port/develop their application(s) using MPLAB Harmony v3 as the Multimedia Expansion Board II (MEB II) is now a matured product and the same is not available for purchase from Microchip Direct. . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “audio” repository v3.5.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. | Connect the wired stereo headphone to the audio jack | . Note: It is not necessary to have an MPLAB Real ICE™ to program/debug the code. The PIC32MZ EF Starter Kit includes a PICkit™ on-board (PKOB) debugger. The PKOB debugger can be connected to a host PC through the USB Mini-B connector on the PIC32MZ EF Starter Kit for programming/debugging (see the red cable in the hardware setup). . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFH144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (audio_player_lab1 firmware audio_player_lab1.X) in MPLAB X IDE | Ensure “PKOB” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Program the micro SD card with the audio text file (tone.txt) by copying it from folder audio_player_lab2 firmware and paste into the micro SD card | Insert the micro SD card into the micro SD card slot (J8) on the MEB II Board. | Connect a headphone to the HP Out connector on the Multimedia Expansion Board II | Wear the headphone and you should hear a tone. | . Comments: . Reference Training Module: Lab 2: Audio-Tone Generation from a Text File Stored in an SD Card with Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab2/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab2/readme.html"
  }
  ,"17": {
    "title": "SD Card Reader and Audio-Tone Application by reading the tone from a text file stored in an SD card",
    "content": ". SD Card Reader and Audio-Tone Application by reading the tone from a text file stored in an SD card on PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II . . Description . The application shows how to edit the contents of an SD card. The PIC32 Multimedia Expansion Board II (MEB II) is connected to a USB host, (typically a PC) and after a successful enumeration, the SD card is presented as a mass storage drive on the PC allowing you to add or delete contents. . The application reads an audio text file from the PIC32 Multimedia Expansion Board II (MEB II) SD card and streams it over the PIC32 I²S interface to the audio CODEC. The audio file is saved as a .txt file with comma-separated left and right channel audio data. . Modules/Technology Used: . Peripheral Modules I2C | I2S | Timer | Core Timer | . | Drivers I2S Driver | I2C Driver | AK4953 Driver | SDCARD (SPI) Driver | USB High Speed Driver | MSD Function Driver | . | BSP Library PIC32MZ EF Starter Kit BSP | . | System Services File System | . | Middleware USB device layer | . | . Hardware Used: . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | PIC32 Multimedia Expansion Board II | . Note: This application is a reference only to the existing users of Multimedia Expansion Board II (MEB II) to port/develop their application(s) using MPLAB Harmony v3 as the Multimedia Expansion Board II (MEB II) is now a matured product and the same is not available for purchase from Microchip Direct. . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “audio” repository v3.5.0 | MPLAB Harmony v3 “usb” repository v3.5.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. | Connect the wired stereo headphone to the audio jack | . Note: It is not necessary to have an MPLAB Real ICE™ to program/debug the code. The PIC32MZ EF Starter Kit includes a PICkit™ on-board (PKOB) debugger. The PKOB debugger can be connected to a host PC through the USB Mini-B connector on the PIC32MZ EF Starter Kit for programming/debugging (see the red cable in the hardware setup). . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFH144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (audio_player_lab3 firmware audio_player_lab3.X) in MPLAB X IDE | Ensure “PKOB” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Delete any tone.txt file on the micro SD card. You will load the tone.txt file using the newly added SD card reader functionality | Ensure micro SD card is inserted into the micro SD card slot (J8) on the MEB II | Connect a USB cable from the micro USB connector (J4) on the PIC32MZEF Starter Kit board to the PC | Connect a headphone to the HP Out connector on the Multimedia Expansion Board II | The application boots in the SD Card Player mode. You will not be able to hear the tone as the tone.txt file was already deleted from the micro SD card | To Load the tone.txt file to the SD card from the PC, Press the switch S1 on the MEB II | Wait for the PC to enumerate the USB MSD. Verify that the device appears as a Removable Storage Device. On a Windows machine, do this by clicking on the My Computer (or Computer) icon. Click on the drive and copy the tone.txt file | Once the tone.txt file is copied in SD card, press the S1 button to go back to the Player mode | Plug your earphones in and you should be able to listen to the tone! | . Comments: . Reference Training Module: Lab3: SD Card Reader Support to Load Audio Files with Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab3/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab3/readme.html"
  }
  ,"18": {
    "title": "SD Card Reader .wav Audio player",
    "content": ". SD Card Reader “.wav” Audio player on PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II . . Description . This application reads a WAV audio file from the SD card on the PIC32 Multimedia Expansion Board (MEB) II and streams it over the PIC32 I²S interface through the audio CODEC. The application implements the functionality of an audio player (for WAV files only). The application switches to the next track when the current track playing is completed (assuming that there is more than one track on the SD card). . Modules/Technology Used: . Peripheral Modules I2C | I2S | Timer | Core Timer | . | Drivers I2S Driver | I2C Driver | AK4953 Driver | SDCARD (SPI) Driver | USB High Speed Driver | MSD Function Driver | . | BSP Library PIC32MZ EF Starter Kit BSP | . | Audio Decoder Libraries WAV Decoder Library | . | System Services File System | . | Middleware USB device layer | . | . Hardware Used: . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | PIC32 Multimedia Expansion Board II | . Note: This application is a reference only to the existing users of Multimedia Expansion Board II (MEB II) to port/develop their application(s) using MPLAB Harmony v3 as the Multimedia Expansion Board II (MEB II) is now a matured product and the same is not available for purchase from Microchip Direct. . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “audio” repository v3.5.0 | MPLAB Harmony v3 “usb” repository v3.5.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. | Connect the wired stereo headphone to the audio jack | . Note: It is not necessary to have an MPLAB Real ICE™ to program/debug the code. The PIC32MZ EF Starter Kit includes a PICkit™ on-board (PKOB) debugger. The PKOB debugger can be connected to a host PC through the USB Mini-B connector on the PIC32MZ EF Starter Kit for programming/debugging (see the red cable in the hardware setup). . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFH144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (audio_player_lab4 firmware audio_player_lab4.X) in MPLAB X IDE | Ensure “PKOB” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Go to the folder “audio_player_lab4 firmware sample_audio” and copy a few sample WAV files to the micro SD card | Insert the micro SD card into the micro SD card slot (J8) on the MEB II | Connect a USB cable from the micro USB connector (J4) on the PIC32MZEF Starter Kit board to the PC | Connect a headphone to the HP Out connector on the MEB II and you should hear the audio track being played | You may load more WAV audio files by switching to the USB SD card reader mode (by pressing the switch S1 on the MEB II). After loading, switch back to the player mode and you should hear the newly added audio tracks to the SD card | . Comments: . Reference Training Module: Lab 4: Play a WAV Audio File from an SD Card with Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab4/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab4/readme.html"
  }
  ,"19": {
    "title": "SD Card Audio Player/Reader with Aria Graphics",
    "content": ". SD Card Audio Player/Reader with Aria Graphics on PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II . . Description . This application reads a WAV audio file from the SD card on the PIC32 Multimedia Expansion Board (MEB) II and streams it over the PIC32 I²S interface through the audio CODEC. The application implements the functionality of an audio player (for WAV files only). The application displays audio tracks from the SD card in a list box. It allows to navigate the list to select and play a track. It also provides a volume increase/decrease scroll bar and a mute on/off button. . Modules/Technology Used: . Peripheral Modules I2C | I2S | Timer | Core Timer | . | Drivers I2S Driver | I2C Driver | AK4953 Driver | SDCARD (SPI) Driver | USB High Speed Driver | MSD Function Driver | Aria Graphis Display driver w/ PDA TM4301B | Max Touch Controller Driver | . | BSP Library PIC32MZ EF Starter Kit BSP | . | Audio Decoder Libraries WAV Decoder Library | . | System Services File System | Input System | . | Middleware USB device layer | Aria Graphics | . | . Hardware Used: . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | PIC32 Multimedia Expansion Board II | . Note: This application is a reference only to the existing users of Multimedia Expansion Board II (MEB II) to port/develop their application(s) using MPLAB Harmony v3 as the Multimedia Expansion Board II (MEB II) is now a matured product and the same is not available for purchase from Microchip Direct. . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “audio” repository v3.5.0 | MPLAB Harmony v3 “usb” repository v3.5.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “gfx” repository v3.6.0 | MPLAB Harmony v3 “touch” repository v3.6.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. | On the MEB II, the EBIWE and LCD_PCLK (J9) must be jumpered to use the internal SRAM for graphics frame buffer. The J9 jumper is located on the bottom of the MEB II board, beneath where the starter kit is plugged into the board. Refer to the following figure for the exact location. | . | Connect the wired stereo headphone to the audio jack | . | . Note: It is not necessary to have an MPLAB Real ICE™ to program/debug the code. The PIC32MZ EF Starter Kit includes a PICkit™ on-board (PKOB) debugger. The PKOB debugger can be connected to a host PC through the USB Mini-B connector on the PIC32MZ EF Starter Kit for programming/debugging (see the red cable in the hardware setup). . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFH144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (audio_player_lab5 firmware audio_player_lab5.X) in MPLAB X IDE | Ensure “PKOB” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Make sure that the micro SD card has at least one audio file saved on it. | You can copy audio files: Go to the folder “audio_player_lab5 firmware sample_audio” and copy a few sample WAV files to the micro SD card | Insert the micro SD card into the micro SD card slot (J8) on the MEB II | You should see a display as shown below | . | Connect a headphone to the HP Out connector on the MEB II and listen to your favorite music. Notice the track list will scroll as the tracks get played out one after the other. | If everything worked well, you should see a graphical user interface on the MEB II display, populated with a list of tracks read from the SD card along with volume and mute control. | The user interface should respond to touch events and you should be able to select random tracks for playing, increase or decrease volume level, and mute the audio output. | You should be able to put the application either into audio player mode or SD card reader mode by selecting the appropriate radio button on the UI. | You may load more WAV audio files from PC by switching to the USB SD card reader mode (by touching Reader mode radio button on the UI). | Load new WAV audio files to SD Card | After loading, switch back to the player mode (by touching Player mode radio button on the UI) and you should hear the newly added audio tracks to the SD card | . Comments: . This application is developed by applying a patch (available in folder “audio_player_lab5 firmware gfx_repo_patch”) to the MPLAB Harmony v3 “gfx” repository. If you need to reconfigure or regenerate this demo using the MHC, please refer the “Notes.txt” file under “audio_player_lab5 firmware gfx_repo_patch” folder. | Reference Training Module: Lab 5: Display Graphics Support to Select and Play Audio File | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab5/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk_meb2/audio_player/audio_player_lab5/readme.html"
  }
  ,"20": {
    "title": "SD Card Player/Reader series",
    "content": ". SD Card Audio Player/Reader Application on PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II . . Description . This folder contains a series of applications which uses MPLAB Harmony v3 framework for Quick Audio Prototyping, and in the process creates an SD card Audio Player/Reader. . The Application audio_player_lab1 is the basic audio application that generates an audio tone using a lookup table | The Application audio_player_lab2 is an extension of application audio_player_lab1, it generates an audio tone using a text file stored in an SD Card | The Application audio_player_lab3 is an extension of application audio_player_lab2, it also generates an audio tone using a text file stored in an SD Card. Additionally, it adds the SD card reader support to load audio files | The Application audio_player_lab4 is an extension of application audio_player_lab3, implements an audio player by reading “.wav” audio files from the SD card | The Application audio_player_lab5 is an extension of application audio_player_lab4, implements graphical user interface to the audio reader (storing audio files in the SD card) and player (playing “.wav” audio files from the SD card) | . Modules/Technology Used: . Refer the documentation in individual application folder | . Hardware Used: . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | PIC32 Multimedia Expansion Board II | . Note: This application is a reference only to the existing users of Multimedia Expansion Board II (MEB II) to port/develop their application(s) using MPLAB Harmony v3 as the Multimedia Expansion Board II (MEB II) is now a matured product and the same is not available for purchase from Microchip Direct. . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “audio” repository v3.5.0 | MPLAB Harmony v3 “gfx” repository v3.6.0 | MPLAB Harmony v3 “touch” repository v3.6.0 | MPLAB Harmony v3 “usb” repository v3.5.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. | Connect the USB Type-A male to Micro-B male cable for SD card reader functionality | Insert Micro SD card containing audio files in waveform audio format (WAV) | Connect the wired stereo headphone to the audio jack | . Note: It is not necessary to have an MPLAB Real ICE™ to program/debug the code. The PIC32MZ EF Starter Kit includes a PICkit™ on-board (PKOB) debugger. The PKOB debugger can be connected to a host PC through the USB Mini-B connector on the PIC32MZ EF Starter Kit for programming/debugging (see the red cable in the hardware setup). . Programming binary/hex file: . Refer the documentation in individual application folder | . Programming/Debugging Application Project: . Refer the documentation in individual application folder | . Running the Demo: . Refer the documentation in individual application folder | . Comments: . Reference Training Module: MPLAB® Harmony v3 SD Card Audio Player/Reader Tutorial | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk_meb2/audio_player/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk_meb2/audio_player/readme.html"
  }
  ,"21": {
    "title": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit + MEB-II",
    "content": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit + MEB-II . This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit + MEB-II. . SD Card Player/Reader series | Audio-Tone using a Lookup Table | Audio-Tone Application by reading the tone from a text file stored in an SD card | SD Card Reader and Audio-Tone Application by reading the tone from a text file stored in an SD card | SD Card Reader “.wav” Audio player | SD Card Audio Player/Reader with Aria Graphics | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk_meb2/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk_meb2/readme.html"
  }
  ,"22": {
    "title": "Getting Started",
    "content": ". Getting Started Application on SAMC21N Xplained Pro Evaluation Kit . . Description: . This application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to 1 second, 2 seconds, 4 seconds and back to 500 milliseconds every time you press the switch SW0 on the SAMC21N Xplained Pro Evaluation Kit. Also, an LED LED0 is toggled every time temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules RTC | PORTS | SERCOM(I2C) | SERCOM(USART) | . | . Hardware Used: . SAMC21N Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAMC21N Xplained Pro Evaluation Kit | The SAMC21N Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG ) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAMC21N Xplained Pro Evaluation Kit. | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21N18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started firmware sam_c21n_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAMC21N Xplained Pro Evaluation Kit to change the default sampling rate to 1 second | Every subsequent pressing of switch SW0 on SAMC21N Xplained Pro Evaluation Kit changes the default sampling rate to 2 seconds, 4 seconds and 500 ms and back to 1 second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html"
  }
  ,"23": {
    "title": "SDADC Conversion Interrupt Mode",
    "content": ". SDADC Conversion Interrupt Mode Application on SAMC21N Xplained Pro Evaluation Kit . . Description: . This application demonstrates SDADC Conversion in interrupt mode. The application uses internal bandgap reference as the input voltage source. . Modules/Technology Used: . Peripheral Modules SDADC | SUPC | EVSYS | SERCOM(USART) | . | . Hardware Used: . SAMC21N Xplained Pro Evaluation Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | Stable Voltage Source to INN[1] and INP[1] pins, or PB08 and PB09 pins respectively | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Ensure that both the positive (INP) and negative (INN) pins on SAMC21N Xplained Pro Evaluation Kit are connected to a voltage source | The SAMC21N Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG ) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAMC21N Xplained Pro Evaluation Kit. . . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21N18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (sdadc_conversion_interrupt firmware sam_c21n_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | SDADC is configured to use the internal VREF and the range is set to 4.096 V full scale and the default setting of OSR is 64 | Pressing the ‘r’ key will read the result and display it, in a form scaled to mV | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html"
  }
  ,"24": {
    "title": "SDADC Conversion Polling Mode",
    "content": ". SDADC Conversion Polling Mode Application on SAMC21N Xplained Pro Evaluation Kit . . Description: . This application demonstrates SDADC Conversion in Polling mode. The application uses internal bandgap reference as the input voltage source. . Modules/Technology Used: . Peripheral Modules SDADC | SUPC | EVSYS | SERCOM(USART) | . | . Hardware Used: . SAMC21N Xplained Pro Evaluation Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | Stable Voltage Source to INN[1] and INP[1] pins, or PB08 and PB09 pins respectively | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Ensure that both the positive (INP) and negative (INN) pins on SAMC21N Xplained Pro Evaluation Kit are connected to a voltage source | The SAMC21N Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG ) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAMC21N Xplained Pro Evaluation Kit. . . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21N18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (sdadc_conversion_interrupt firmware sam_c21n_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | SDADC is configured to use the internal VREF and the range is set to 4.096 V full scale and the default setting of OSR is 64 | Pressing the ‘r’ key will read the result and display it, in a form scaled to mV | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html"
  }
  ,"25": {
    "title": "SAM C21N Xplained Pro Evaluation Kit",
    "content": "SAM C21N Xplained Pro Evaluation Kit . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM C21N Xplained Pro Evaluation Kit. . Getting Started | SDADC Conversion Polling Mode | SDADC Conversion Interrupt Mode | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/readme.html"
  }
  ,"26": {
    "title": "Low Power",
    "content": ". Low Power Application on SAM C21 Xplained Pro evaluation kit . . Description . The application demonstrates low power application on SAM C21 Xplained Pro evaluation kit. On power-up, the application is in sleep (standby) mode. The application wakes up from the sleep mode and enters active mode when you cover the light sensor (by placing a hand over it) on the I/O1 Xplained Pro extension kit. The application periodically prints room temperature on a serial terminal while the light sensor is covered. The application goes back to sleep (standby) mode when you uncover the light sensor. LED0 in the SAM C21 evaluation kit is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules I2C | RTC | USART | DMAC | ADC | PM | SUPC | EIC | EVSYS | . | . Hardware Used: . SAM C21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | Power Debugger | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommend to double-check and use the same versions that the project was tested with. . Setup: . Connect the I/O1 Xplained Pro extension kit to Extension Header 2 (EXT2) of the SAMC21 Xplained Pro evaluation kit | Remove the current measurement jumper on the SAMC21 (highlighted in hardware setup with letter A) and connect to channel A of power debugger using burg connectors (highlighted in hardware setup with letter B) as shown in the Hardware Setup figure | Probe Pin #9 (PA28 - Switch pin) and Pin #10 (PA27 - wake-up test pin) on Extension Header 3 (EXT3) as highlighted in the Hardware Setup figure to measure wake-up time | Connect a USB cable to the DEBUG USB port for programming. | Connect a USB cable to the power debugger DEBUG USB port for current measurement. | . Note : . Make sure common ground is connected with the board while using logic analyzer/CRO. | SAMC21 supports both 3.3 V and 5 V. The SAMC21 Xplained Pro kit operates at 3.3 V since the VCC-SEL jumper on board is set to 3.3 V | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21J18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (low_power firmware sam_c21_xpro.X) in MPLAB X IDE. | Ensure “SAMC21 Xplained Pro (EDBG)” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar. | Follow the steps in “Running the Demo” section below. | . Running the Demo: . Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | Perform a reset by pressing the “RESET” switch | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to print the temperature and message on the terminal. You should see the following messages (containing the temperature value in °F) on the terminal every 500 milliseconds for the duration the light sensor is covered | You should see the temperature values (in °F) getting printed on the terminal every 500 milliseconds for the duration the light sensor is covered | Observe Current Consumption on Data Visualizer Note:The Data Visualizer is a program to process and visualize data. The Data Visualizer can receive data from various sources such as the Embedded Debugger Data Gateway Interface (EDBG DGI) and COM ports. It is possible to track an application in run-time using a terminal graph or oscilloscope. It analyzes the power consumption of an application through correlation of code execution and power consumption when used together with a supported probe or board. Open Data Visualizer application from your PC and select Power Debugger Data Gateway on DGI Control Panel | Click on the Connect button to have the Data Visualizer ready to receive information from the Power Debugger Data Gateway | After the Data Visualizer is connected to the Power Debugger Data Gateway, select the Power interface and click on the Start button | On the right-hand side of the Power Analysis window, click on the Control Panel tab and Disable Channel B Below image shows the device in Standby mode, smaller peaks are the 500ms timer expiry peaks | Cover the light sensor on the IO Xplained Pro board (by placing your hand over it) to print the temperature on the terminal. The following image shows the power consumption values in Standby mode and CPU Active mode | Press Switch SW0 to switch from Standby mode to Idle mode. The following image shows the transition power consumption values from Standby to Idle mode. Idle mode consumes more power compared to Standby mode | Place your hand over the light sensor. The device will wake up on the next ADC window monitor interrupt, read and print data on serial and then re-enter Standby mode. The following image shows the transition of the power consumption by switching from Idle mode to Standby mode Note that the above results highlight the power consumption is lower in Standby mode than in Idle mode. | . | Wake-up Time Measurement Using Logic Analyzer/ Cathode-Ray Oscilloscope (CRO) To demonstrate the CPU wake up time, switch SW0 is configured to generate an interrupt. A General Purpose Input/Output (GPIO) is toggled in the Interrupt Service Routine (ISR) of the switch press event. The MCU comes out of Sleep mode when an interrupt occurs (in this case, the switch press interrupt). The time between the switch press and the GPIO toggle in the ISR is the wake up time. Press the SW0 switch and capture the signals to measure the wake-up time in Standby and Idle mode. The following image shows the wake-up time from Standby mode | The following image shows the wake-up time from Idle mode By observing the outputs, you can conclude that the wake-up time is greater in Standby mode than in Idle mode | . | . Comments: . Reference Training Module: Low Power Application on SAMC2x (Cortex M0+) MCUs Using MPLAB Harmony v3 Peripheral Libraries | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released new demo application. | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html"
  }
  ,"27": {
    "title": "SAM C21 Xplained Pro evaluation kit",
    "content": "SAM C21 Xplained Pro evaluation kit . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM C21 Xplained Pro evaluation kit. . Low Power | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/readme.html",
    "relUrl": "/apps/sam_c21_xpro/readme.html"
  }
  ,"28": {
    "title": "BLE based Weather Station and Motion Sensor Application",
    "content": ". BLE based Weather Station and Motion Sensor Application on SAM D21 Curiosity Nano and Nano Base for Click boards . . Description: . The application demonstrates a solution based on Microchip products for environmental or weather industry products. The application demonstrates posting of weather and motion sensor data collected from the various sensors to android mobile application via BLE (Bluetooth Low Energy). The PTH (Pressure, Temperature and Humidity) collected from the Mikro elektronika weather click board and motion sensor data collected from the Mikro elektronika 10DOF Click are posted to the android application via BM71 Bluetooth module. . The host microcntroller (SAM D21) is interfaced to the weather click and 10DOF click over the I2C interface and BM71 XPRO over UART. . Modules/Technology Used: . Peripheral Modules Timer | SERCOM | . | Driver Modules BM71 Driver | . | STDIO Library | . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | Curiosity Nano Base for click boards | WEATHER CLICK | 10DOF Click | BM71-XPRO | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “bt” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Microchip Bluetooth Data | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Adding private characteristics to BM71: . Hardware Setup . In BM71-XPRO, Change jumper J2 to select USB | In BM71-XPRO, Configure DIP switch SW2 with below configurations | All DIP switch ON | Power the BM71-XPRO from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J1) | Perform reset by pressing switch SW1 on BM71-XPRO and check blue LD1 is ON | . Programming private characteristics . Download the manual configuration tool from BM70/71 Firmware &amp; Software Tools v1.11 | Extract and locate configuration tool from below location - Your_downloaded_folder Firmware &amp; Software Tools v1.11 ConfigurationTool IS187x_102_BLEDK3v1.11_UI1.00 | Double click on IS187x_102_BLEDK3v1.11_UI1.00.exe | Click on “Load” button and select “Load Text File” | Select “bm71_environmental_private_service.txt” from bm71_configuration folder present in firmware folder | Click on “EDIT” option . | Select “0x01: BM71” in BLEDK and click ok . . | Click on “Finish” . | Click on “Write” . | Select respective COM Port and set baud rate to 115200 then click on Write . | Click on Yes to successfully update the private characteristics on to BM71 module. . | After successful update, click ok and remove the power from BM71-XPRO and change jumper J2 to select EXT . | Turn OFF DIP 1 switch | . Setup: . Mount SAM D21 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount Weather click board on mikro bus click 1 connector of Curiosity Nano Base board | Mount the 10DOF Click on the mikro bus 2 connector of Curiosity Nano Base board | Connect the BM71-XPRO on to EXT 1 connector of Curiosity Nano Base board | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Before proceeding with this step complete “Adding private characteristics to BM71” step. . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Before proceeding with this step complete “Adding private characteristics to BM71” step. . Open the project (ble_weather_station firmware sam_d21_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Before proceeding install Microchip Bluetooth Data android app in an Android Smartphone. . Enable Bluetooth and location from Smatphone settings | Perform reset by unplugging and re-plugging the power cable of SAM D21 Curiosity Nano | After power up, open “Microchip Bluetooth Data (MBD)” android app from your smartphone and tap on “BLE Sensor Node” icon on the dashboard. If prompted, allow the application to turn on Bluetooth. . | Scan for Bluetooth devices by tapping START SCAN option. The BM71 device should appear as MCHP in the list of Bluetooth devices. . | Stop the scan and connect using the MCHP BLE device. This will establish a connection between the MBD BLE application and the BM71 BLE device. . | Once connected, the application shows the proximity screen and displays the Status of the Bluetooth link and using RSSI, the approximate range between the Android device and the SAM D21 Curiosity Nano Evaluation Kit . | Navigate to the Environment Sensor screen by swiping left on the proximity screen as shown in above figure . | Tap on the Graph button next to the Temperature, Humidity and Pressure to see the PTH values plotted on graphs . | Navigate to the Accelerometer Sensor screen by swiping twice on to left from Environment screen . | Click on start button to see the Accelerometer values plotted on graph . | Navigate to the Gyroscope Sensor screen by swiping left on the Accelerometer screen . | Click on start button to see the Gyroscope values plotted on graph . | Navigate to the 3D Plot screen by swiping left on the Gyroscope screen . | Keep finger on weather click board to see PTH values changing and move the 10DOF click board to see accelerometer and gyroscope values changing. | . Comments: . Other features on the application like the Step Count and Light are not supported by this demo. Navigating to these screens may lead to an undefined behavior. | Code related for custom private services are added manually, harmony v3 framework doesn’t generate code related to it. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html"
  }
  ,"29": {
    "title": "Fitness Tracker",
    "content": ". Fitness Tracker Application on SAM D21 Curiosity Nano and Nano Base for Click boards . . Description: . The application demonstrates a solution based on Microchip products for health care industry and wearable products. The application displays heart rate readings (in beats per minute - bpm) on a very low power consuming display. The Mikroelektronika Heart Rate 3 click board is used to read the heart pulse. Mikroelektronika eINK click bundle is used for displaying heart rate. The eINK click bundle contains the eINK click adapter board and the eINK display. . The Heart Rate 3 click contains two integrated LEDs, a photosensitive element and advanced low noise analog front end to provide clean and accurate heart rate readings. It is enough to place an index finger on a top of the sensor to get the heart rate via I2C interface. The eINK display is a very low power consumption and the ability to retain the information, even after disconnecting from the power source. The host MCU SAM D21 is interfaced with the Heart Rate 3 click over the I2C interface and eINK click over SPI Interface. . Modules/Technology Used: . Peripheral Modules Timer | EIC | . | Driver Modules SPI Driver | I2C Driver | . | STDIO Library | . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | Curiosity Nano Base for click boards | Heart Rate 3 click | EINK CLICK BUNDLE | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Mount SAM D21 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount Heart Rate 3 click board on mikro bus click 2 connector of Curiosity Nano Base board | Mount the eINK click bundle (eINK click + eINK dispaly) on the mikro bus 3 connector of Curiosity Nano Base board | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (fitness_tracker firmware sam_d21_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Perform a reset by unplugging and re-plugging the power cable of SAM D21 Curiosity Nano | After power up, the application displays the “microchip logo” on the eINK display displays and initializes the heart rate sensor | After successful initialization of heart rate sensor, two integrated LEDs on the heart rate 3 click lights up | Then press switch “SW0” on SAM D21 Curiosity Nano board, LED “LED0” on SAM D21 Curiosity Nano board glows on | Place your index finger gently on the heart rate 3 click sensor as shown in the figure below | Wait till the LED “LED0” on SAM D21 Curiosity Nano board goes off and then lift your finger | The heart rate value (in bpm - beats per minute) gets displayed on the eINK display | . Comments: . Place your index finger gently on the heart rate 3 click sensor, don’t push or put pressure on the sensor (the heart rate values may not be accurate) | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html"
  }
  ,"30": {
    "title": "Location Tagged SOS",
    "content": ". Location Tagged SOS Application on SAM D21 Curiosity Nano and Nano Base for Click boards . . Description: . The application demonstrates the solution based on Microchip products in a personal emergency or in a situation to communicates a distress signal by sending out a location-tagged SOS SMS. The Mikroelektronika GSM-GPS click board, used in this application, contains a hardware module that combines the GSM/GPRS and GPS functionality used for tracking the device and sending out the emergency or distress signal. The MCU is interfaced with the GPS module over the UART interface to perform the acquisition and tracking of GPS coordinates. It registers the event callbacks for location tracking of the GPS receiver. . The application arranges the GSM/GPRS module for sending SMS to a configured mobile phone number. Once the GPS position is available, the application sends the following location tagged SOS SMS to the configured mobile phone number when emergency switch is pressed. . SAM D21 Curiosity Nano Location tagged SOS. Please attend emergency at: Latitude : xx.xxxxxx Longitude : xx.xxxxxx Altitude : xx.xxxxxx . Modules/Technology Used: . Peripheral Modules Timer | EIC | NVM | . | Driver Modules USART Driver | . | STDIO Library | . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | Curiosity Nano Base for click boards | GSM-GPS click | Li-ion or Lipo Battery (optional) | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.5.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.30 | MPLAB XC32 Compiler v2.30 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup 1: Uses Separate power supplies for SAMD21 Curiosity Nano and GSM-GPS Click . Mount SAM D21 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount GSM-GPS click board on mikro bus click 1 connector of Curiosity Nano Base and connect the GPS and GSM antennas on GSM-GPS click board connectors | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Wait for about 60 seconds | Power the GSM-GPS click board from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port of GSM-GPS click | . Setup 2: Uses Li-ion battery . Mount SAM D21 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board. | Mount GSM-GPS click board on mikro bus click 1 connector of Curiosity Nano Base and connect the GPS and GSM antennas on GSM-GPS click board connectors. | Connect Li-ion or Lipo Battery on J1 connector and make sure SW1 slider switch is moved to Battery on position in Curiosity Nano Base board. | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105). | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (location_sos firmware sam_d21_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port and reconnect it back | Change the baud rate to 115200 | Perform a reset by unplugging the power cable of SAM D21 Curiosity Nano | After power up, The LEDs on GSM-GPS click boards gives the following indications: LED marked STA is on; this indicates the GSM module is switching on | LED marked TXA is blinking, this indicates the GPS acquisition and position data is exchanged by the receiver | LED marked PPS is off. The PPS LED indicates pulse-per-second signal for precise timing. It glows on, after successful positioning | . | After one minute, the GPS achieves successful position as indicated by the blinking of LED PPS. Note: . | The GPS on the GSM-GPS click has a one second Time-To-First-Fix (TTFF) from a hot start and 30 seconds from cold start | If the position is not achieved after 1 minute, then: It could be because of non-availability of GPS signals. Make sure that you have placed the GPS antenna such that it can receive the signals from the GPS satellites. Try placing it under the open sky to be able to receive signals | After using the option above, if the device is still not receiving the position indication, try resetting the board by unplugging the power cable of SAM D21 Curiosity Nano board and turn off and turn on the battery supply by sliding SW1 switch on Curiosity Nano Base or unplug the power cable of GSM-GPS Click board | . | Once the GPS position is achieved, user can press switch SW0 on SAM D21 Curiosity Nano board to send SMS to configured mobile number with GPS location. | GSM module sends below message to configured mobile number SAM D21 Curiosity Nano Location tagged SOS Please attend emergency at: Latitude : xx.xxxxxx Longitude : xx.xxxxxx Altitude : xx.xxxxxx http://maps.google.com/maps?q=loc:xx.xxxxxx(Latitude),xx.xxxxxx(Longitude) | User can change the mobile number by long pressing (more than 4 seconds) switch SW0 on SAM D21 Curiosity Nano board. An option will be displayed on serial terminal to update the cell phone number | Updated cell phone number is stored in NVM memory, updated number will be used further to send SMS, even after power reset | If GPS position is not achieved, short pressing SW0 on SAM D21 Curiosity Nano board sends a blank SMS without GPS location. | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html"
  }
  ,"31": {
    "title": "Getting Started",
    "content": ". Getting Started Application on SAM D21 Curiosity Nano . . Description: . This application demonstrates an LED (LED0) toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW0 on the SAM D21G17D Curiosity Nano Development Board. . Modules/Technology Used: . Peripheral Modules EIC | RTC | GPIO | SERCOM(USART) | . | . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the SAM D21 Curiosity Nano Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started firmware sam_d21_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . An LED (LED0) on the SAM D21 Curiosity Nano Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds | And also, the LED toggling rate is displayed on the serial terminal | Press the switch SW0 on the SAM D21G17D Curiosity Nano Development Board to change the default periodicity of the timeout to one second | Every subsequent pressing of the switch SW0 on the SAM D21G17D Curiosity Nano Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html"
  }
  ,"32": {
    "title": "ACK Dash Replenishment Application",
    "content": ". Amazon Alexa Connect Kit (ACK) Dash Replenishment Application on SAM D21 Curiosity Nano . . Description: . The application demonstrates an integration of Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21 and presenting dashboard replenishment on SAM D21 Curiosity Nano. . This following bullet points provides links to the detailed topics: . Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging Dash Replenishment Application Project | Register your device | Running the demo | Comments | . . Modules/Technology Used: . Peripheral Modules SERCOM | Systick | Port | NVMCTRL | . | . . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | USI MT7697H Development Kit for Alexa Connect Kit - ACK Module | Connection wires | . . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . . Hardware Setup: . Hardware connections with ACK Module . Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) . . | . Note: Please contact Amazon for details on the other hardware/equipment required for this demo application. . . Setting up the build platform . Download and extract ACK Device SDK 3.1 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 user platform | . . Project file structure . ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 | SAM D21 ACK port file/directory is as follows user/platform/samd21_amazon_ack/ applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . . Programming/Debugging Dash Replenishment Application Project: . Before proceeding with this step complete “Setting up the build platform” step. . Open the project (samd21_amazon_ack applications DashReplenishment firmware sam_d21_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | . . Register your device . Register ACK Module with Amazon by following the procedure | If you successfully registered your device. you should see the status LED on your ACK development board change from white to green. | . . Running the Demo: . Note: This demo does not have functional running/test steps as the other required hardware/equipment needs to be procured. Please contact Amazon for help on running this demo application. . Comments: . Dash Replenishment application is built as a standalone project, if you wish to implement OTA firmware upgrade feature to this application, follow the instructions in the bootloader application’s readme file. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  }
  ,"33": {
    "title": "ACK Hello World Application",
    "content": ". Amazon Alexa Connect Kit (ACK) Hello World Application on SAM D21 Curiosity Nano . . Description: . The application demonstrates an integration of Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21 and controlling ON/OFF development kit(LED0) on SAM D21 Curiosity Nano Evaluation Kit. . This following bullet points provides links to the detailed topics: . Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging HelloWorld Application Project | Register your device | Running the demo | Comments | . . Modules/Technology Used: . Peripheral Modules SERCOM | Systick | Port | NVMCTRL | . | . . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | USI MT7697H Development Kit for Alexa Connect Kit - ACK Module | Connection wires | . . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . . Hardware Setup: . Hardware connections with ACK Module . Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) | . . Setting up the build platform . Download and extract ACK Device SDK 3.1 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 user platform | . . Project file structure . ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 | SAM D21 ACK port file/directory is as follows user/platform/samd21_amazon_ack/ applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . . Programming/Debugging Hello World Application Project: . Before proceeding with this step complete “Setting up the build platform” step. . Open the project (samd21_amazon_ack applications Helloworld firmware sam_d21_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | . . Register your device . Register ACK Module with Amazon by following the procedure | If you successfully registered your device. you should see the status LED on your ACK development board change from white to green. | . . Running the Demo: . Open Amazon Alexa App from smart phone. | Reset/power cycle the SAM D21 Curiosity Nano Evaluation Kit device and wait till status LED on ACK Module to green. | When you say “Alexa, turn on development device” or tap the power button in the Alexa app GUI. A LED0 on the SAM D21 Curiosity Nano Evaluation Kit board turns ON. | When you say “Alexa, turn off development device” or tap the power button in the Alexa app GUI. A LED0 on the SAM D21 Curiosity Nano Evaluation Kit turns Off. | . Note - To open Alexa app GUI for development device, In Amazon Alexa app navigate to Devices &gt; All devices and select Development device. it will provide the options to control the LED . Comments: . HelloWorld application is built as standalone project, if you wish to use OTA feature, follow instructions in bootloader application’s readme file | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  }
  ,"34": {
    "title": "ACK Microwave Application",
    "content": ". Amazon Alexa Connect Kit (ACK) Microwave Application on SAM D21 Curiosity Nano . . Description: . The application demonstrates an integration of Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21 and controlling microwave on SAM D21 Curiosity Nano. . This following bullet points provides links to the detailed topics: . Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging Microwave Application Project | Register your device | Running the demo | Comments | . . Modules/Technology Used: . Peripheral Modules SERCOM | Systick | Port | NVMCTRL | . | . . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | USI MT7697H Development Kit for Alexa Connect Kit - ACK Module | Connection wires | . . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . . Hardware Setup: . Hardware connections with ACK Module . Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) . . | . Note: Please contact Amazon for details on the other hardware/equipment required for this demo application. . . Setting up the build platform . Download and extract ACK Device SDK 3.1 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 user platform | . . Project file structure . ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 | SAM D21 ACK port file/directory is as follows user/platform/samd21_amazon_ack/ applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . . Programming/Debugging Microwave Application Project: . Before proceeding with this step complete “Setting up the build platform” step. . Open the project (samd21_amazon_ack applications Microwave firmware sam_d21_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | . . Register your device . Register ACK Module with Amazon by following the procedure | If you successfully registered your device. you should see the status LED on your ACK development board change from white to green. | . . Running the Demo: . Note: This demo does not have functional running/test steps as the other required hardware/equipment needs to be procured. Please contact Amazon for help on running this demo application. . Comments: . Microwave application cannot support OTA feature because of limitation of code size. You can migrate to higher memory part in SAMD 21 MCU family. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  }
  ,"35": {
    "title": "ACK Smart Light Application",
    "content": ". Amazon Alexa Connect Kit (ACK) Smart Light Application on SAM D21 Curiosity Nano . . Description: . The application demonstrates an integration of Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21 and controlling of smart light (LED0) on SAM D21 Curiosity Nano. . This following bullet points provides links to the detailed topics: . Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging Smart Light Application Project | Register your device | Running the demo | Comments | . . Modules/Technology Used: . Peripheral Modules SERCOM | Systick | Port | NVMCTRL | . | . . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | USI MT7697H Development Kit for Alexa Connect Kit - ACK Module | Connection wires | . . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Python 3.8 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . . Hardware Setup: . Hardware connections with ACK Module . Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) . . | . . Setting up the build platform . Download and extract ACK Device SDK 3.1 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 user platform | . . Project file structure . ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 | SAM D21 ACK port file/directory is as follows user/platform/samd21_amazon_ack/ applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . . Programming/Debugging Smart Light Application Project: . Before proceeding with this step complete “Setting up the build platform” step. . Open the project (samd21_amazon_ack applications SmartLight firmware sam_d21_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | . . Register your device . Register ACK Module with Amazon by following the procedure | If you successfully registered your device. you should see the status LED on your ACK development board change from white to green. | . . Running the Demo: . Open Amazon Alexa App from your phone if you closed it. | Reset/power cycle the SAM D21 Curiosity Nano Evaluation Kit and wait till the status LED on ACK development board turns to green. | When you say “Alexa, turn on development device” or tap the power button in the Alexa app GUI. A LED0 on the SAM D21 Curiosity Nano Evaluation Kit turns ON. | When you say “Alexa, turn off development device” or tap the power button in the Alexa app GUI. A LED0 on the SAM D21 Curiosity Nano Evaluation Kit turns Off. | To turn off the LED after a specific timeout, use option “Turnoff timer” in Alexa app GUI and select the required timeout. | To Toggle the LED and change the toggling speed, use option “Speed” in Alexa app GUI and select the required speed. | . Note . To open Alexa app GUI for development device, In Amazon Alexa app navigate to Devices &gt; All devices and select Development device. it will provide the options to control the smart lights | . Comments: . Brightness option using PWM is not implemented, trying to control brightness will result in OFF if value is less than 128. | Smart Light application is built as a standalone project, if you wish to implement OTA firmware upgrade feature to this application, follow the instructions in the bootloader application’s readme file. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  }
  ,"36": {
    "title": "ACK OTA Bootloader",
    "content": ". Amazon Alexa Connect Kit (ACK) OTA Bootloader Application on SAM D21 Curiosity Nano . . Description: . The Application demonstrates the usage OTA upgrade feature on SAMD21 Curiosity Nano evaluation kit using Amazon Alexa connect kit(ACK) SDK. The communication between SAM D21 Curiosity Nano and ACK Module is through UART interface. . This following bullet points provides links to the detailed topics: . Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | OTA Architecture | Setting up environment for OTA update | Building and upgrading the latest application firmware | Comments | . . Modules/Technology Used: . Peripheral Modules SERCOM | Systick | Port | NVMCTRL | . | . . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | Connecting wires | USB to TTL cable | . . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Python 3.8 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . . Hardware Setup: . Hardware connections for Validation . Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RTS” pin of TTL Cable | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “CTS” pin of TTL Cable | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “RX” pin of TTL Cable | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “TX” pin of TTL Cable | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and TTL Cable | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Connect USB end of TTL cable to the Host PC | . . Setting up the build platform . Download and extract ACK Device SDK 3.1 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 user platform | . . Project file structure . ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 | SAM D21 ACK port file/directory is as follows user/platform/samd21_amazon_ack/ applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . . OTA architecture . The SAM D21 Curiosity Nano Evaluation Kit has SAMD21G17D microcontroller mounted on it. | The SAMD21G17D has 128 KB of flash memory. For the implementation of OTA, the flash memory is divided into 4 sections/regions namely Bootloader, Status , Primary and Staging partition Bootloader : This section starts from the top of the flash and has a size of 3KB. It is used to store the bootloader application. The bootloader checks whether a new version of the application firmware is present or not in the staging region. if present, the bootloader upgrades the application firmware from the staging region to primary memory region and runs the latest application firmware from the primary memory region; if not present, the bootloader runs the existing application firmware in the primary memory region. | Status : This section starts from end of the bootloader region and has a size of 1KB. It stores known pattern to indicate that a new version of application firmware is present in staging region. | Primary : It starts from end of the status region and has a size of 62KB. The primary region holds the application firmware. | Staging: It starts from end of the primary partition and has a size of 62KB. The staging region holds a new version of the application firmware which needs to be upgraded. | . . | . . Setting up environment for OTA update . Open the project (samd21_amazon_ack bootloader firmware sam_d21_cnano.X) in MPLAB X IDE | Build the code by clicking on the “Clean and Build project” button in MPLAB X IDE tool bar, but do not program | Open the project (samd21_amazon_ack applications HelloWorld firmware sam_d21_cnano.X) in MPLAB X IDE | Open the MPLAB Harmony 3 Configurator (MHC) from Tools &gt; MPLAB Harmony 3 Configurator for HelloWorld project | After successful opening of MHC, in Project Graph select System and disable Generate Fuse Settings as shown below | Change the memory configuration in project properties (Right click on HelloWorld_sam_d21_cnano project &gt; select properties &gt; select xc32-ld &gt; Symbols &amp; Macros) | Change the Preprocessor macro definitions as below to place the code in primary region ROM_ORIGIN=0x1000; ROM_LENGTH=0xF800 | Define “ACK_VALIDATION” macro and “ACK_HOST_FIRMWARE_UPDATE” in HelloWorld application file “ack_user_config.h” | Increase Memory pool size macro “ACK_MEMORY_POOL_SIZE” value to 684 in ack_user_configh.h | Build the code by clicking on the “Clean and Build project” button in MPLAB X IDE tool bar, but do not program. | Navigate to ota &gt; utility folder inside ‘Your ACK SDK Downloaded folder’ and run “hexmerge.py” script to merge bootloader and HelloWorld project’s hex file . python hexmerge.py -o bootloader_helloworld_combined.hex -f your_sdk_folder user platform samd21_amazon_ack bootloader firmware sam_d21_cnano.X dist default production sam_d21_cnano.X.production.hex your_sdk_folder user platform samd21_amazon_ack applications HelloWorld firmware sam_d21_cnano.X dist default production sam_d21_cnano.X.production.hex . | . Note . Output file “bootloader_helloworld_combined.hex” will be present in utility folder if specific path is not specified while running script. | Program “bootloader_helloworld_combined.hex” to SAM D21 Curiosity Nano Evaluation Kit by following steps in Steps to program the hex file section. | The fuse settings are not programmable through firmware and enabling the fuse settings increases the size of the binary when generated through the Hex file, So disabling it. | . . Building and upgrading the latest application firmware . Open the project (samd21_amazon_ack applications HelloWorld firmware sam_d21_cnano.X) in MPLAB X IDE | Change the firmware version from 1 to 2 in “ACKUser_GetFirmwareVersion” function in file ‘ack_user_device.c’ | Build the code by clicking on the “Clean and Build project” button in MPLAB X IDE tool bar, but do not program | Navigate to ota &gt; utility folder inside ‘Your ACK SDK Downloaded folder’ and run “hex2ota.py” script to create a file suitable for uploading as latest application image from a hex file that was created by building the HelloWorld application. | In validate-ota.py, HMCU_OTA_COMPLETE(line no 79) timer should be increased to 120 seconds from 30 seconds for receiving the complete ota firmware . python hex2ota.py --device-type ACKTESTDEVICE &lt;Your ACK SDK Downloaded folder&gt; user platform samd21_amazon_ack applications HelloWorld firmware sam_d21_cnano.X dist default production sam_d21_cnano.X.production.hex SecondOtaFirmware.ota . | Navigate to test &gt; validation folder inside ACK SDK and run “validate-ota.py” script to upgrade the new firmware . python validate-ota.py -pd &lt;HMCU_DEBUG_PORT&gt; -pm &lt;HMCU_PORT&gt; -t ACKTESTDEVICE -n 2 SecondOtaFirmware.ota . | Click on Switch SW0 on SAMD21 Curiosity Nano to reset the device. | Successful OTA completes with PASS message indicating successful upgradation of new firmware. | . Note . The above procedure is to demonstrate the OTA feature. If you wish to use in production scenario, remove “ACK_VALIDATION” Macro in “ack_user_config.h” | The Switch SW0 is implemented to reset the device on press. | . Comments: . If you wish to remove the firmware update feature from your application undefine “ACK_HOST_FIRMWARE_UPDATE” Macro in “ack_user_config.h” and change Preprocessor macro definitions settings to default. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  }
  ,"37": {
    "title": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "content": ". Amazon Alexa Connect Kit (ACK) SDK port, Smart Applications and Over the Air (OTA) firmware upgrade on SAM D21 Curiosity Nano . . Description: . This folder contains the SAM D21 microcontroller port for Amazon’s Alexa Connect Kit (ACK) Software Development Kit (SDK) and smart applications demonstrating the port. The folder also contains Over the Air (OTA) firmware upgrade feature for the smart Applications. . SAM D21 is an low-power, high-performance Microchip’s ARM® Cortex®-M0+ based flash microcontroller, it is ideal for a wide range of home automation, consumer, metering, and industrial applications. Microchip offers a low cost SAM D21 Curiosity Nano evaluation kit to evaluate SAMD21G17D microcontroller. . Alexa Connect Kit (ACK) is Amazon’s managed service that makes it easy to integrate Alexa into your product With ACK, you don’t need to write an Alexa skill, manage a cloud service, or develop complex network and security firmware to connect your product to Alexa. Instead, you integrate the ACK module into your product. ACK provides the managed services, software, and tools you can use to develop and manage your Alexa-connected products on an ongoing basis. Users can benefit from Alexa device control and other features, such as Amazon’s Wi-fi Simple Setup (WSS). . The communication interface between SAM D21 and ACK module is through UART. . This folder contains a set of applications (under folder “applications) which uses Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21. The Application “HelloWorld” demonstrates turning ON/OFF of the development device (SAM D21 Curiosity Nano evaluation kit) | The Application “SmartLight” demonstrates controlling of smart light (LED0) on development device (SAM D21 Curiosity Nano evaluation kit) | The Application “Microwave” demonstrates controlling of a Microwave oven | The Application “DashReplenishment” demonstrates dashboard replenishment | . | The folder contains a folder “bootloader”. The bootloader helps demonstrate OTA firmware upgrade feature. | . This following bullet points provides links to the detailed topics: . Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging Application Projects | Register your device | Running the demo | OTA Architecture | Setting up environment for OTA update | Building and upgrading the OTA application | Comments | . . Modules/Technology Used: . Refer the documentation in individual application folder . . Hardware Used: . SAM D21 Curiosity Nano Evaluation Kit | USI MT7697H Development Kit for Alexa Connect Kit - ACK Module | Connection wires | . . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . . Hardware Setup: . Refer the documentation in individual application folder . . Setting up the build platform . Download and extract ACK Device SDK 3.1 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 user platform | . Note . Make sure you create amazon.com account for downloading the SDK. You would use your Amazon credentials to register your development device (amazon.com account provides an option to register your development device.) | . . Project file structure . ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt; ACK_Device_SDK_3.1.202002192328 | SAM D21 ACK port file/directory is as follows user/platform/samd21_amazon_ack/ applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . . Programming hex file: . Refer the documentation in individual application folder . . Programming/Debugging Application Projects: . Refer the documentation in individual application folder . . Register your device . Refer the documentation in individual application folder . . Running the Demo: . Refer the documentation in individual application folder . . OTA architecture . Refer the documentation in individual application folder . . Setting up environment for OTA update . Refer the documentation in individual application folder . . Building and upgrading the OTA application . Refer the documentation in individual application folder . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  }
  ,"38": {
    "title": "SAM D21 Curiosity Nano Evaluation Kit",
    "content": "SAM D21 Curiosity Nano Evaluation Kit . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM D21 Curiosity Nano Evaluation Kit. . Getting Started | Fitness Tracker | Location Tagged SOS | BLE Weather Station and Motion Sensor | Amazon Alexa Connect (ACK) kit port, OTA and Applications ACK based smart applications Hello World | Microwave | Smart Light | Dash Replenishment | . | OTA Bootloader Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc . | . | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/readme.html",
    "relUrl": "/apps/sam_d21_cnano/readme.html"
  }
  ,"39": {
    "title": "Google Cloud IoT Core Application",
    "content": ". Google Cloud IoT Core Application on SAM D21 IoT WG Development Board . . Important: . There could be updates and bug fixes to the Google IoT sensor node application. Therefore, it is recommended to program SAM D21 IoT WG Development Board with the latest version of hex file from the hex folder. . Description: . The SAM-IoT WG Development board based on SAM D21 microcontroller is a small and easily expandable demonstration and development platform for Wi-Fi based IoT Node applications. This specific development board comes pre-provisioned for Google IoT core and hence the name “WG”. The application that comes pre-programmed with factory shipped boards demonstrates MQTT data transfer of on-board light and temperature sensor data to Google IoT core. . Key Highlights of SAM-IoT WG Development Board: . On-board Light and Temperature Sensors. | Additional sensors can be interfaced using “click boards” through on-board mikroBUS connector. | On-board nEDBG debugger. Hence, no external debugger needed. | Virtual COM and USB Mass Storage for Drag &amp; Drop programming. | Dual power supply options. USB or Battery. | On-board Li-Po battery charging circuitry. | ATECC608A based secure cloud connectivity | . Features of SAM-IoT WG Development Board: . Drag &amp; Drop of application hex files. Hence, no need for IDE to program SAM D21 microcontroller. | Drag &amp; Drop of Wi-Fi credentials to connect to the internet. | Microcontroller peripheral libraries and Middleware are based on MPLAB Harmony 3 Software framework. | MPLABX IDE based project. | Command Line Interface (CLI) support for Wi-Fi credentials configuration. | 4 LED indicators to indicate the operating status. | . Components Used: . ATSAMD21G18A microcontroller | ATWINC1510 Wi-FI module | ATECC608A secure element | MCP9808 digital temperature sensor | MCP73871 Battery Charger | MIC33050 Voltage Regulator | TEMT6000 ambient light sensor | . Software Development Tools Used: . MPLAB X IDE v5.40 | MPLAB Harmony Configurator Plugin v3.5.0 (installed through MPLABX &gt; plugins) | MPLAB XC32 Compiler v2.41 | . Harmony 3 Packages Used: . This project has been verified to work with the following versions of Harmony 3 packages: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Application Demonstration: . The below sections describes the steps to run the application. . 1. How to setup the SAM-IoT WG Development Board . The SAM-IoT WG Development board comes with pre-loaded application for out-of-box experience for the end user. Connect the board to the host PC’s USB port to power-up the board. | Alternatively, the board can be powered using a Li-Po battery. In order to perform Firmware upgrade or WiFi configuration, the board must be connected through USB port. | Once connected to PC, a mass storage drive icon by the name CURIOSITY will appear. | . 2. Running the Demo . Open the drive and click open the CLICK-ME.HTM file to launch the Google IoT cloud landing page. | In the landing page, enter Wi-Fi credentials (SSID, Password, security type) and download WIFI.CFG file. | Drag &amp; Drop the downloaded WIFI.CFG onto the CURIOSITY drive to set the Wi-Fi credentials. | If the Wi-Fi network is active, then the SAM-IoT WG Development board establishes connectivity with the Wi-Fi network and securely connects to the Google IoT cloud. | After successful connection, the SAM-IoT WG Development board pushes the real time light and temperature sensors data to the landing page. | . 3. Firmware upgrade and WiFi configuration process . Firmware upgrade through Drag &amp; Drop . | Download the latest version of hex file from the hex folder. Drag &amp; Drop the downloaded .hex file onto the CURIOSITY drive. | This will automatically program the microcontroller with the supplied .hex file. There is no need to open the MPLABX IDE to program the .hex file through Drag &amp; Drop method. Firmware upgrade through MPLABX IDE . | . | This method is usually followed by most of the developers to program the .hex file from MPLABX IDE environment. WiFi configuration through Drag &amp; Drop . | . | This is nothing but the WIFI.CFG Drag &amp; Drop method discussed in the previous section. WiFi configuration through CLI . | . | Open a terminal application on the host PC for the virtual COM port of connected SAM-IoT WG Development board, with 9600-8-None-1 settings | Just enter the below command to set the Wi-Fi credentials. wifi &lt;SSID&gt;,&lt;PASSWORD&gt;,&lt;SECURITY TYPE&gt; | . Reference: . For more details on the application usage, functionality and other details, refer to the SAM-IoT WG Development Board User Guide | . Comments: . This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot/google_cloud_iot_core/readme.html",
    "relUrl": "/apps/sam_d21_iot/google_cloud_iot_core/readme.html"
  }
  ,"40": {
    "title": "SAM D21 IoT Development Board",
    "content": "SAM D21 IoT Development Board . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM D21 IoT Development Boards. . Google Cloud IoT Core Developed on SAM D21 IoT WG Development Board. | Pre-provisioned to send data to the Google Cloud IoT Core. | . | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot/readme.html",
    "relUrl": "/apps/sam_d21_iot/readme.html"
  }
  ,"41": {
    "title": "Getting Started",
    "content": ". Getting Started Application on SAM D21 Xplained Pro Evaluation Kit . . Description: . The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to 1 second, 2 seconds, 4 seconds and back to 500 milliseconds every time you press the switch SW0 on the SAM D21 Xplained Pro Evaluation Kit. Also, an LED0 is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules PORTS | RTC | DMAC | SERCOM(I2C) | SERCOM(USART) | . | . Hardware Used: . SAM D21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM D21 Xplained Pro Evaluation Kit | The SAM D21 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM D21 Xplained Pro Evaluation Kit | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21J18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (samd21_getting_started firmware sam_d21_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM D21 Xplained Pro Evaluation Kit to change the default sampling rate to one second | Every subsequent pressing of switch SW0 on SAM D21 Xplained Pro Evaluation Kit changes the default sampling rate to two seconds, four seconds and 500 ms and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html"
  }
  ,"42": {
    "title": "SAM D21 Xplained Pro Evaluation Kit",
    "content": "SAM D21 Xplained Pro Evaluation Kit Reference Application Examples . This repository contains the MPLAB® Harmony 3 reference applications developed on SAM D21 Xplained Pro Evaluation Kit. . Getting Started | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/readme.html",
    "relUrl": "/apps/sam_d21_xpro/readme.html"
  }
  ,"43": {
    "title": "BLE Fitness Tracker",
    "content": ". BLE Fitness Tracker Application on SAM E51 Curiosity Nano and Nano Base for Click boards . . Description: . The application demonstrates a solution based on Microchip products for health care industry and wearable products. The application displays heart rate readings (in beats per minute - bpm) on a very low power consuming display and posts this Heart Rate data to Microchip Bluetooth Data (MBD) android mobile application via BLE (Bluetooth Low Energy). . The Mikro Elektronika Heart Rate 3 click board is used to read the heart pulse. Mikroelektronika eINK click bundle is used for displaying heart rate. The eINK click bundle contains the eINK click adapter board and the eINK display. BM71 Bluetooth module is used to send the heart rate data over BLE. . The Heart Rate 3 click contains two integrated LEDs, a photosensitive element and advanced low noise analog front end to provide clean and accurate heart rate readings. It is enough to place an index finger on top of the sensor to get the heart rate via I2C interface. . The eINK display is a very low power consumption display and it has the ability to retain the information, even after disconnecting from the power source. The host MCU SAM E51 is interfaced with the Heart Rate 3 click over the I2C interface and eINK click over SPI Interface. . Modules/Technology Used: . Peripheral Modules Timer | EIC | . | Driver Modules SPI Driver | I2C Driver | BM71 Driver | . | STDIO Library | . Hardware Used: . SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | Heart Rate 3 click | EINK CLICK BUNDLE | BM71-XPRO | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “bt” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Adding private characteristics to BM71: . Hardware Setup . In BM71-XPRO, Change jumper J2 to select USB | In BM71-XPRO, Configure DIP switch SW2 with below configurations All DIP switch ON | . | Power the BM71-XPRO from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J1) | Perform reset by pressing switch SW1 on BM71-XPRO and check blue LD1 is ON | . Programming private characteristics . Download the manual configuration tool from BM70/71 Firmware &amp; Software Tools v1.11 | Extract and locate configuration tool from below location - Your_downloaded_folder Firmware &amp; Software Tools v1.11 ConfigurationTool IS187x_102_BLEDK3v1.11_UI1.00 | Double click on IS187x_102_BLEDK3v1.11_UI1.00.exe | Click on “Load” button and select “Load Text File” | Select “bm71_heart_rate_service_chars_config.txt” from bm71_configuration folder present in firmware folder | Click on “EDIT” option . | Select “0x01: BM71” in BLEDK and click ok . . | Click on “Finish” . | Click on “Write” . | Select respective COM Port and set baud rate to 115200 then click on Write . | Click on Yes to successfully update the private characteristics on to BM71 module . | After successful update, click OK and remove the power from BM71-XPRO and change jumper J2 to select EXT . | Turn OFF DIP 1 switch | . Setup: . Mount SAM E51 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount Heart Rate 3 click board on mikro bus click 2 connector of Curiosity Nano Base board | Mount the eINK click bundle (eINK click + eINK dispaly) on the mikro bus 1 connector of Curiosity Nano Base board | Connect the BM71-XPRO on to EXT 1 connector of Curiosity Nano Base board | Power the SAM E51 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) . . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (ble_fitness_tracker firmware sam_e51_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Before proceeding, install the Microchip Bluetooth Data android app in an Android Smartphone. . Enable Bluetooth and location from Smartphone settings | Perform reset by unplugging and re-plugging the power cable of SAM E51 Curiosity Nano | Parallelly, open the “Microchip Bluetooth Data (MBD)” android app from your smartphone and tap on “Bluetooth Smart” icon on the dashboard. If prompted, allow the application to turn on Bluetooth. . | After power up, the application displays the Microchip logo on the eINK display and initializes the heart rate sensor | After successful initialization of heart rate sensor, two integrated LEDs on the heart rate 3 click lights up . | Now, scan for Bluetooth devices by tapping START SCAN option on the MBD APP. The BM71 device should appear as MCHP_SAM_E51_HR in the list of Bluetooth devices. . | Stop the scan and connect the MCHP BLE device by clicking on MCHP_SAM_E51_HR. This will establish a connection between the MBD BLE application and the BM71 BLE device. . | Once BLE device is connected, the application shows the different services screen page. Scrolll down and tap on the Heart Rate Service, it will redirect to Sensor Location page. . | Place your index finger gently on the heart rate 3 click sensor as shown in the figure below. . | In the bottom right corner of the Sensor Location page, disable and enable the Notify Button. . | Wait till the LED “LED0” on SAM E51 Curiosity Nano board goes off. Once the LED is off, lift your finger. Note: Make sure smartphone screen is not turned off and also don’t switch to any other App(s) on your smartphone. | The heart rate value (in bpm - beats per minute) gets displayed on the Sensor Loaction page as shown in the figure below. Also, the same heart rate value gets displayed on the eINK display. | . Running the Demo with out BLE: . Note: To test in this procedure, the hardware setup doesn’t requires BM71 XPRO. So, user can wish to disconnect the BM71-XPRO from EXT 1 connector of Curiosity Nano Base board. . Perform reset by unplugging and re-plugging the power cable of SAM E51 Curiosity Nano | After power up, the application displays the Microchip logo on the eINK display and initializes the heart rate sensor | After successful initialization of heart rate sensor, two integrated LEDs on the heart rate 3 click lights up | Press the switch “SW0” on SAM E51 Curiosity Nano board, LED “LED0” on SAM E51 Curiosity Nano board glows on | Place your index finger gently on the heart rate 3 click sensor as shown in the figure below | Wait till the LED “LED0” on SAM E51 Curiosity Nano board goes off and then lift your finger | The heart rate value (in bpm - beats per minute) gets displayed on the eINK display | . Comments: . Place your index finger gently on the heart rate 3 click sensor, don’t push or put pressure on the sensor (the heart rate values may not be accurate) | Make sure smartphone screen is not turned off when reading Heart Rate Sensor data using the MBD smartphone APP and also, don’t switch to any other smartphone App(s) | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | Code related for Heart Rate services are added manually, harmony v3 framework doesn’t generate code related to it. Revision: . | v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html"
  }
  ,"44": {
    "title": "Getting Started",
    "content": ". Getting Started Application on SAM E51 Curiosity Nano Evaluation Kit . . Description: . This application demonstrates an LED (LED0) toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit. . Modules/Technology Used: . Peripheral Modules EIC | RTC | GPIO | SERCOM(USART) | . | . Hardware Used: . SAM E51 Curiosity Nano Evaluation Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (same51n_getting_started firmware sam_e51_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . An LED (LED0) on the SAM E51 Curiosity Nano Evaluation Kit toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds | And also, the LED toggling rate is displayed on the serial terminal | Press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to change the default periodicity of the timeout to one second | Every subsequent pressing of the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html"
  }
  ,"45": {
    "title": "SAM E51 Curiosity Nano Evaluation Kit",
    "content": "SAM E51 Curiosity Nano Evaluation Kit . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM E51 Curiosity Nano Evaluation Kit. . Getting Started | BLE Fitness Tracker | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, bt, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/readme.html",
    "relUrl": "/apps/sam_e51_cnano/readme.html"
  }
  ,"46": {
    "title": "SD Card USB Audio Player with Legato Graphics",
    "content": ". SD Card USB Audio Player on SAM E54 Curiosity Ultra Development Board + maXTouch® Curiosity Pro Board using Legato Graphics . Description . This application reads a WAV audio file from the SD card or USB thumb drive on the SAM E54 Curiosity Ultra Development Board and streams it over the I²S interface through the audio CODEC. The application implements the functionality of an audio player (for WAV files only). . The application displays audio tracks from the SD card/USB Thumb in a list wheel box. It allows to navigate the list to select and play a track. It also provides volume increase/decrease scroll bar, Play/Pause button, Next Track button, Rewind button, and a track progress bar. . Modules/Technology Used: . Peripheral Modules SERCOM (I2C) | SERCOM (I2S) | Timer | . | Drivers I2S Driver | I2C Driver | WM8904 Driver | SDCARD (SPI) Driver | USB High Speed Driver | MSD Function Driver | Legato Graphics Display driver w/ MXT Curiosity Pro Display | Max Touch Controller Driver | . | BSP Library SAME54 Curiosity Ultra BSP | . | Audio Decoder Libraries WAV Decoder Library | . | System Services File System | Input System | . | Middleware USB device layer | Legato Graphics | . | . Hardware Used: . SAM E54 Curiosity Ultra Development Board | AC328904 - PIC32 Audio Codec Daughter Card | maXTouch® Curiosity Pro Board | Micro SD Card | USB Thumb Drive | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “audio” repository v3.5.0 | MPLAB Harmony v3 “usb” repository v3.5.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “gfx” repository v3.6.0 | MPLAB Harmony v3 “touch” repository v3.6.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Attach the 24-bit pass through card to the GFX Connector on the SAM E54 Curiosity Ultra board | Connect the ribbon cable from the maXTouch Curiosity Pro Display to the ribbon connector on the 24-bit pass through card. Make sure that the S1 switch on the 24-bit pass through card is set to 2. | On the backside of the maXTouch Curiosity Pro display, set the IM[2:0] switches to ‘011’ for 8-bit MCU mode. | Connect AC328904 - PIC32 Audio Codec Daughter Card to XC32 Header on the SAM E54 Curiosity Ultra board | Connect audio jack to HP OUT of Audio Codec Daughter Card to XC32 Header | Connect a USB cable from the host computer to the DEBUG USB port on the SAM E54 Curiosity Ultra board. This USB connection is used for code download and debugging. | Connect the wired stereo headphone to the audio jack . . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (sdcard_usb_audio_player firmware sam_e54_cult.X) in MPLAB X IDE | Ensure “PKOB” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Make sure that the micro SD card/USB Thumb drive contains WAV audio files | Reset the board by pressing RESET switch | You should see a display as shown below | Wait till initialization completes and display renders as shown below | Select the source (SD CARD/USB) to play audio | The following screen is shown if the audio source is not connected or connected improperly. Make sure insert the SD Card or USB Thumb Drive properly in the sockets. You could unplug and re-plug if you are continuing to see the below screen. Note: SD Card socket is at J704 (Back side of the board) on SAME54 Curiosity Ultra Board | USB Thumb drive connector is at J200 (Target USB) on SAME54 Curiosity Ultra Board | . | Once the Source is mounted, display renders the audio player options as shown below . | Description of the options available are shown in below image . . | Track List : Shows all the tracks in list wheel, available in the selected source(Move the list wheel to change the track) | Progress Indicator : Indicates the current track progress time | Rewind : Re-plays the current track from starting | Play/Pause : Play and Pause the track | Next Track : Plays next track in the list | Song Duration : Duration of the track | Volume Control : Increases/Decreases the volume level | If the source mounted is empty, display renders as shown below . . | Listen to your favorite track. Notice the track list will scroll as the tracks get played out one after the other. | The user interface should respond to touch events and you should be able to select next or rewind tracks for playing, increase or decrease volume level, and select the particular track. | . Comments: . This application is developed by modifying a drv_wm8904.c file. If you need to reconfigure or regenerate this demo using the MHC, make sure you don’t replace this file. This issue is expected to be fixed in the future Harmony “audio” repo release. | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_sdcard_usb_audio_player/readme.html",
    "relUrl": "/apps/sam_e54_cult/same54_sdcard_usb_audio_player/readme.html"
  }
  ,"47": {
    "title": "Live update on SAME54",
    "content": ". Live Update Application on SAM E54 Curiosity Ultra Development Board . . Description: . The Live update application uses the dual bank flash feature available on the SAME54 Microcontrollers (MCUs). The banks on SAME54 MCU are named as BANK-A and BANK-B. At any point in time, the application considers the bank on which it is currently executing as an active bank while the other bank is marked as an inactive bank. The dual bank flash enables programming the inactive bank with a new version of the firmware while running the current version of the firmware from the active bank. . The application updates the new version of the firmware to the inactive bank while the current version of the firmware runs from the active bank. . The Application Task checks the NVM Control status register to identify the flash bank which has the latest version of the firmware (active bank) and toggles a specific LED at a periodic rate. For example, when there is no Live update then the LED1 is toggled for every 500ms if the application running from BANK-A else 1000ms if it is running from BANK-B. When there is a Live update request from the Host PC, after receiving the firmware image, the LED1 stops toggling and LED2 starts toggling with the toggle rate same as LED1. After a successful Live update i.e., by pressing the SW2, the device swaps the banks and resets. Then the LED2 stops toggling and LED1 starts toggling. Here, you can observe the change in the LED1 toggle rate after firmware upgrade. For example, the LED1 is toggled for every 500ms if the application running from BANK-A else 1000ms if it is running from BANK-B. . Modules/Technology Used: . Peripheral Modules NVMCTRL | DSU | SYSTICK | SERCOM | Harmony Core | . | . Hardware Used: . SAM E54 Curiosity Ultra Development Board | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “bsp” repo v3.7.0 | MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “bootloader” repo v3.4.0 | MPLAB Harmony v3 “bootloader_apps_uart” repo v3.0.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Windows command prompt | Python 2.7 or above | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Running the Bootloader application: . For the first time, the Live update application is programmed by using either Harmony basic bootloader or Harmony fail-safe bootloader. . Download the MPLAB Harmony Bootloader package. | Download the MPLAB Harmony UART Bootloader Applications package. | Connect a micro USB cable to the DEBUG port of the SAM E54 Curiosity Ultra Development Board. | Open the UART Fail Safe Bootloader which is in (path: &lt;Your Harmony Framework download folder&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X) using the MPLAB X IDE. | The project needs to be reconfigured to work on SAM E54 Curiosity Ultra Development Board. Launch the MHC and follow below steps to reconfigure for SAM E54 Curiosity Ultra Development Board. Remove SERCOM2 | . | Add SERCOM1 to Project Graph | . | Configure SERCOM1 peripheral | . | Launch Pin Configurations plugin under MHC-&gt;Tools-&gt;Pin Configurations. Remove SERCOM2 Pin configurations. | . | Configure SERCOM1 pins. | . | Note: The SAM E54 Curiosity Ultra Development Board uses SERCOM1 peripheral for EDBG. Hence SERCOM peripheral and its pins need to be reconfigured from SAM E54 Xplained Pro to SAM E54 Curiosity Ultra Development Board. | Do not close the MHC as we have to build the project again. | . | . | Regenerate the project. Build and program the UART Fail Safe Bootloader using the MPLAB X IDE. | The following shows the steps to rebuild the UART Fail Safe Bootloader using the MPLAB X IDE. This step is to create Bootloader binary image which will be merged with Live Update application to create a single binary image as shown in Step 10. Remove the Device Fuse configurations from the custom linker script as they will be updated by the UART Fail Safe Bootloader project | . | Enable Execute this line After Build option in the MPLAB X Project properties-&gt;Building option | . | Regenerate the project | . | Build the UART Fail Safe Bootloader application again using the MPLAB X IDE but do not program. This is required to generate the binary file for Bootloader application | . | Build the Live update application (path: &lt;Live Update application folder&gt;/firmware/sam_e54_cult.X) using the MPLAB X IDE but do not program. | Run the btl_app_merge_bin.py script from command prompt to merge the generated Bootloader binary and Live update application binary. python &lt;Your Harmony Framework download folder&gt;/bootloader/tools_archive/btl_app_merge_bin.py -o 0x2000 -b &lt;Your Harmony Framework download folder&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X/dist/&lt;Config Name&gt;/production/&lt;Project Name&gt;.production.bin -a &lt;Live Update application folder&gt;/firmware/sam_e54_cult.X/dist/&lt;Config Name&gt;/production/&lt;Project Name&gt;.production.bin | Below output should be displayed on command prompt. | . | . | Run the btl_host.py from command prompt to program the merged binary to opposite panel. The merged binary btl_app_merged.bin will be generated in the path from where the btl_app_merge_bin.py was called from. python &lt;Your Harmony Framework download folder&gt;/bootloader/tools_archive/btl_host.py -v -s -i &lt;COM PORT&gt; -d same5x -a &lt;Address&gt; -f btl_app_merged.bin | Note: If you need to know more information on the bootloader host script, refer help for setting up the host script available at &lt;Your Harmony Framework download folder&gt;/bootloader/doc/help_bootloader.chm and &lt;Your Harmony Framework download folder&gt;/bootloader_apps_uart/docs/index.html | . | . | Following screenshot shows successful programming of the application binary. The messages “Swapping Bank And Rebooting and Reboot Done” in below screenshot signifies that bootloading is successful. | . | . | Running the Live update application: . Perform “Running the Bootloader application” steps mentioned above, if not done already. | If the above step is successful, then LED1 should start blinking on the SAM E54 Curiosity Ultra Development Board. | Run the host script “live_update.py” from command prompt available at &lt;Live Update application folder&gt;/scripts to program the new version of the firmware to an inactive panel while the current version of the application is being run from the active panel. python &lt;Live Update application folder&gt;/scripts/live_update.py -v -i &lt;COM PORT&gt; -d same5x -a &lt;Address&gt; -f btl_app_merged.bin. The merged binary btl_app_merged.bin will be generated in the path from where the btl_app_merge_bin.py was called from. | Note: If you need to know more information on the Live Update Script, Open command prompt, goto &lt;Live Update application folder&gt;/scripts then enter python live_update.py --help. The below output shows the Live Update Script help. | . | Below output should be displayed on command prompt. | . | . | LED1 stops blinking and LED2 starts blinking which indicates the application programming is successful. LED1 stops blinking and LED2 toggles for every 500ms then Application is running from BANK A | LED1 stops blinking and LED2 toggles for every 1000ms then Application is running from BANK B | . | Press Switch SW2 to swap the bank and reset the device for the programmed application firmware to run. LED2 stops blinking and LED1 toggles for every 500ms then Application is running from BANK A | LED2 stops blinking and LED1 toggles for every 1000ms then Application is running from BANK B | . | In case of any error during the Live update both LED1 and LED2 will be turned ON. Follow the below steps recover from the error. Press and hold the Switch SW2 to reset the system then repeat the step 4 to program the Live update application. OR | Reset or Power cycle the device and repeat from the step 4 to program the Live update application. | . | Comments: . Reference Application Note: Live Update application on SAME54 MCUs using MPLAB Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html"
  }
  ,"48": {
    "title": "SAM E54 Curiosity Ultra Development Board",
    "content": "SAM E54 Curiosity Ultra Development Board . This repository contains the MPLAB® Harmony 3 reference applications developed on SAM E54 Curiosity Ultra Development Board . SD Card USB Audio Player | Live Update | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/readme.html",
    "relUrl": "/apps/sam_e54_cult/readme.html"
  }
  ,"49": {
    "title": "Getting Started",
    "content": ". Getting Started Application on SAM E54 Xplained Pro Evaluation Kit . . Description: . The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to 1 second, 2 seconds, 4 seconds and back to 500 milliseconds every time you press the switch SW0 on the SAM E54 Xplained Pro Evaluation Kit. Also, LED0 is toggled every time temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules PORTS | RTC | DMAC | SERCOM(I2C) | SERCOM(USART) | . | . Hardware Used: . SAM E54 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E54 Xplained Pro Evaluation Kit | The SAM E54 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM E54 Xplained Pro Evaluation Kit | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (same54_getting_started firmware sam_e54_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM E54 Xplained Pro Evaluation Kit to change the default sampling rate to one second | Every subsequent pressing of switch SW0 on SAM E54 Xplained Pro Evaluation Kit changes the default sampling rate to two seconds, four seconds and 500 ms and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html"
  }
  ,"50": {
    "title": "Vending Machine",
    "content": ". Vending Machine Application on SAM E54 Xplained Pro Evaluation Kit . . Description: . The application implements an embedded network application to update and track drinks status of a Vending Machine (VM). . The SAM E54 Xplained Pro Evaluation Kit will act as a HTTP-Server to keep track of the items in the Vending Machine. | The HTTP-Client (PC web page) talks to the HTTP-server and displays the status of the Vending Machine. | The OLED1 Xplained Pro extension kit will act man machine interface (MMI) to select and confirm drinks with buttons (up/down and select) and an OLED displays VM information. The VM application uses Button 1 (Down) and Button 2 (Up) to scroll through the VM items and Button 3 to select an item from the Vending Machine. | The LEDs above the button indicates a button press with a blink. | The OLED (128 x 32) is used to display the drink name and their corresponding number of the items in a Vending Machine. | When Button 3 (Select) is pressed the HTTP-Server will decrement the count of an item and updates the HTTPClient(Web page) through ethernet interface. | . | When a Bay of a VM is empty it sends out a message to a specific TCP server. | . Modules/Technology Used: . Peripheral Modules TC | NVMCTRL | SERCOM(SPI) | SERCOM(USART) | . | Driver Modules MEMORY | I2C Driver | . | System service TIME | CONSOLE, DEBUG, COMMAND | . | Libraries TCP/IP stack | Microchip File System (together with MPFS utility) | . | Third Party Library FreeRTOS | . | gfx mono libray (from ASF) | . Hardware Used: . SAM E54 Xplained Pro Evaluation Kit | OLED1 Xplained Pro extension kit | Cat 5 Ethernet Cable | USB Male A to USB Male B Micro Cable | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.1 | MPLAB Harmony Configurator Plugin v3.5.1 | MPLAB Harmony v3 “core” repo v3.7.2 | MPLAB Harmony v3 “CMSIS-FreeRTOS” repo v10.3.0 | MPLAB Harmony v3 “net” repo v3.6.1 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.40 | Any Serial Terminal application, such as Tera Term terminal application. | Any TCP/IP debug application, such as Hercules SETUP utility - useful serial port terminal (RS-485 or RS-232 terminal) , UDP/IP terminal and TCP/IP Client Server terminal. Produced by www.HW-group.com. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the OLED1 Xplained Pro extension kit to Extension Header 1 (EXT1) on the SAM E54 Xplained Pro Evaluation Kit | Establish a connection between the router/switch with the SAM E54 Xplained Pro Evaluation Kit through the RJ45 connector. Make sure your PC is connected to the same router/switch. | Connect the micro USB cable from the computer to the DEBUG USB connect on the SAM E54 Xplained Pro Evaluation Kit . . | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (same54_vending_machine firmware sam_e54_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC, select the virtual COM port of SAM E54 Xplained Pro Evaluation Kit, and change the baud rate to 115200 | You should see the text on the OLED screen in series like the screens below: | You should see demo information and IP address (after DHCP success) in Tera Term terminal, as shown below: | Open a web browser and enter the HTTP- Server IP address (e.g. http://192.168.1.101) that you got on the tera term in the previous step. Click on the ‘Vending Machine’ tab to see the page for the Vending Machine Demo. . . | Use the Button 1 and Button 2 on the OLED1 Xplained Pro to scroll through the items of the Vending Machine. Use the Button 3 on the OLED to pick an item from the VM. The count of the corresponding item on the OLED screen will be decremented by 1 and is reflected on the Web page as well as on the OLED screen. . . | Run Hercules SETUP utility, and start TCP Server to listen on Port 80 Note: you need to update source code in app.c to fill your PC’s IP address that running this TCP Server | . | Press the select Button 3 and make one or more item to zero count. After few second, you will see this screen to notice bay empty (e.g. item 1. coca-cola). . . | In ‘Vending Machine’ webpage, you can pick an ITEM and change the COUNT to a new number, then press UPDATE to confirm. | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Create your first tcpip application | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html"
  }
  ,"51": {
    "title": "SleepWalking",
    "content": ". SleepWalking Application Demo on SAM E54 Xplained Pro Evaluation Kit . . Description: . This application demonstrates SleepWalking using the Event System. The application uses an ADC with a Window Monitoring feature in Standby mode for the following use cases: . Standby mode with Interrupts (IRQ) | Standby mode with Event System (SleepWalking) On power up, the application is in STDBY_IRQ_MODE. It is possible to switch from STDBY_IRQ_MODE to STDBY_EVSYS_MODE by pressing the switch button (SW0) embedded on the SAM E54 Xplained Pro board. The application wakes up from Sleep mode and enters into ACTIVE_MODE when the embedded light sensor on the I/O1 Xplained Pro extension kit is covered. | . Modules/Technology Used: . Peripheral Modules ADC | CMCC | DMAC | EVSYS | NVMCTRL | PM | RTC | SERCOM | SUPC | SYSTICK | . | STDIO Library | . Hardware Used: . SAM E54 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Standalone Data Visualizer | Any Serial Terminal application like Tera Term terminal application | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Ensure jumper to measure MCU current is set to MEASURE | Ensure jumper to measure I/O current is set to BYPASS | Connect the I/O1 Xplained Pro Extension Kit to the EXT XPRO connector 2 on the SAM E54 Xplained Pro Evaluation Kit | Connect the micro USB cable from the computer to the DEBUG USB connector on the SAM E54 Xplained Pro Evaluation Kit | | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (sleepwalking firmware sam_e54_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open Tera Term or any equivalent serial communication tool | In the Tera Term: New Connection window, select the Serial Port number allocated to the connected SAM E54 | Configure the Tera Term Serial port interface to 115200 speed | Reset the board by pressing the reset button. The application will start by displaying the following message on the serial terminal. | Open the standalone Data Visualizer tool | In the Data Visualizer window, select SAM E54 Xplained Pro, and then click Connect | Once the protocols are displayed, select the protocol Power and then click Start | The Data Visualizer will display the power consumption details in the Power Analysis window | When the application starts, the device will run on Standby with IRQ mode. The data analyzer shows the power consumption of the device when the CPU is woken up every 10 milliseconds by an RTC Compare ‘0’ interrupt to start an ADC conversion | Using the SW0 push button, it is possible to change the application mode from Standby with IRQ to SleepWalking. In this mode the CPU is woken up only when an ADC window monitoring interrupt occurs. The data analyzer shows the power consumption of the device when running in Standby with the Event System (SleepWalking) | . Comments: . Reference Application Note: SleepWalking with Event System Using the SAM E54 | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html"
  }
  ,"52": {
    "title": "SAM E54 Xplained Pro Evaluation Kit",
    "content": "SAM E54 Xplained Pro Evaluation Kit . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM E54 Xplained Pro Evaluation Kit. . Getting Started | SleepWalking | Vending Machine | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/readme.html",
    "relUrl": "/apps/sam_e54_xpro/readme.html"
  }
  ,"53": {
    "title": "Ethernet bootloader - File Transfer Protocol",
    "content": ". File Transfer Protocol Application on SAM E70 Xplained Ultra Evaluation Kit . . Description: . This application demonstrates creating ethernet bootloader where an FTP client downloads a binary file from the FTP server, which in turn is used to program the microcontroller. The FAT-FS File System with SDCARD as storage media is used in the application and the FTP client will write to and read from this FS. . Modules/Technology Used: . Peripheral Modules USART1 | Timer (TC0) | HSMCI | . | System Services DEBUG | Command | File System | Time | Console | . | Middleware libraries TCP/IP Stack | . | . Hardware Used: . SAM E70 Xplained Ultra Evaluation Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “bsp” repository v3.7.0 | MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “net” repo v3.5.1 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Ensure the ERASE (J400) jumper is Open on SAM E70 Xplained Ultra Evaluation Kit | Open the J805 Jumper which on the ETHERNET PHY MODULE | . | Insert the LAN8740 PHY daughter board on the ETHERNET PHY MODULE header | Connect the micro USB cable from the computer to the DEBUG USB connector on the SAM E70 Xplained Ultra Evaluation Kit | Establish a connection between the router/switch with the SAM E70 Xplained Ultra Evaluation Kit through the RJ45 connector | Insert the microSD card into the microSD card slot on the backside of the hardware board | | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (ftp_bootloader firmware sam_e70_xult.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . FTP Server Setup . Before running the FTP client application, an FTP server should be setup. For this demonstration, the FileZilla Server Interface is used as the FTP server running on the user PC. Refer to https://wiki.filezilla-project.org/Documentation for more information on this | FileZilla Server setup: Open the FileZilla server interface | In the pop-up window, enter a hostname, port and password for admin interface. Click “Connect” | Click on User icon User or go to Edit-&gt;User for adding client | In the User window, click “General”. Add client by clicking “Add” option enable account and password. This will be the username and password for connecting from the FTP client | | In Shared folders, add the path of folder where the binary to be downloaded is located | | . | . FTP Client Connect . From a terminal window application (like Tera Term), connect to the COM port enumerated by SAM E70 Xplained Ultra board | Restart the application (i.e reset the SAM E70 board) | The IP address will be displayed on the terminal once it is ready. Now, user can connect to the FTP server Type “ftpc connect ” . | . | Upon successful connection, enter the login details Type “ftpc login ” . | . | Once logged in, use ftpc get command to download a binary from the server Type “ftpc get -a -a ” | . | After the binary is successfully downloaded it can be flashed to the MCU by using the ‘boot’ command. | MCU is reset automatically after the programming is complete and application code starts executing. Displaying the message: ** Executing Application code ** | . Output . | After MCU reset, the following message gets printed: | | . Comments: . Reference Application Note: File Transfer Protocol using MPLAB Harmony v3 TCP/IP Stack | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM E70 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html"
  }
  ,"54": {
    "title": "Getting Started with Drivers",
    "content": ". Getting Started Application using Harmony v3 Drivers on SAM E70 Xplained Ultra Evaluation Kit . . Description: . The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM. When a character is entered on the console, the last five written temperature values are read from the EEPROM and displayed on the console. Also, an LED (LED3) is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules PORTS | USART | Timer | XDMAC | . | Drivers TWIHS(I2C) | USART | . | System Services Timer | . | . Hardware Used: . SAM E70 Xplained Ultra Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E70 Xplained Ultra Evaluation Kit | The SAM E70 Xplained Ultra Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the SAM E70 Xplained Ultra Evaluation Kit. Hardware Modification: . | IO1 Xplained Pro features Microchip’s AT30TSE758 temperature sensor chip with an 8 kbit serial EEPROM. The temperature sensor has two TWI addresses: one for the temperature sensor and one for the EEPROM. The A2 address line of TWI must be soldered to 0. This is done to modify the address of the EEPROM on the I/O1 Xplained Pro Extension Kit so that it does not conflict with the address of EEPROM on SAM E70 Xplained Evaluation Kit. The modification changes the address of temperature sensor to 0x4B and EEPROM to 0x50. These modified addresses are used in this demo application | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started_drv firmware drivers_sam_e70_xult.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED3 blinking at 1 second rate | Press any character on the terminal to display the last five values written to the EEPROM | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | . Comments: . Reference Training Module: Getting Started with Harmony v3 Drivers and System Services on SAM E70/S70/V70/V71 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html"
  }
  ,"55": {
    "title": "Getting Started with FreeRTOS",
    "content": ". Getting Started Application using Harmony v3 Drivers and FreeRTOS on SAM E70 Xplained Ultra Evaluation Kit . . Description: . The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM. When a character is entered on the console, the last five written temperature values are read from the EEPROM and displayed on the console. Also, an LED (LED3) is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules PORTS | USART | Timer | XDMAC | . | Drivers TWIHS(I2C) | USART | . | System Services Timer | . | Third Party Libraries FreeRTOS | . | . Hardware Used: . SAM E70 Xplained Ultra Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony v3 “core” repo v3.7.1 | MPLAB Harmony Configurator Plugin v3.5.0 | CMSIS-FreeRTOS v10.3.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E70 Xplained Ultra Evaluation Kit | The SAM E70 Xplained Ultra Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the SAM E70 Xplained Ultra Evaluation Kit. Hardware Modification: . | IO1 Xplained Pro features Microchip’s AT30TSE758 temperature sensor chip with an 8 kbit serial EEPROM. The temperature sensor has two TWI addresses: one for the temperature sensor and one for the EEPROM. The A2 address line of TWI must be soldered to 0. This is done to modify the address of the EEPROM on the I/O1 Xplained Pro Extension Kit so that it does not conflict with the address of EEPROM on SAM E70 Xplained Evaluation Kit. The modification changes the address of temperature sensor to 0x4B and EEPROM to 0x50. These modified addresses are used in this demo application | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started_freertos firmware drivers_freertos_sam_e70_xult.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED3 blinking at 1 second rate | Press any character on the terminal to display the last five values written to the EEPROM | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | . Comments: . Reference Training Module: Getting Started with Harmony v3 Drivers on SAM E70/S70/V70/V71 MCUs Using FreeRTOS | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html"
  }
  ,"56": {
    "title": "XDMAC with QSPI",
    "content": ". XDMAC with QSPI Application on SAM E70 Xplained Ultra Evaluation Kit . . Description: . This application demonstrates the usage of Direct Memory Access Controller (XDMAC) with QSPI on Cortex-M7 based MCU (SAM E70). The application writes and reads 80KB data into the External Serial Flash memory using the QSPI, with and without using XDMAC. . Modules/Technology Used: . Peripheral Modules EFC | MPU | QSPI | XDMAC | SYSTICK | . | . Hardware Used: . SAM E70 Xplained Ultra Evaluation Kit | Logic Analyzer or Oscilloscope | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the micro USB to the Host computer | Connect the Saleae Logic Analyzer and establish a connection with the Host PC | Configure the four channels to measure the QSPI throughput as follows Channel 0 is PA19, which is configured to Set and Clear the pin before and after the QSPI Write without DMA | Channel 1 is PB2, which is configured to Set and Clear the pin before and after the QSPI Read without DMA | Channel 2 is PC31, which is configured to Set and Clear the pin before and after the QSPI Write with DMA | Channel 3 is PB3, which is configured to Set and Clear the pin before and after the QSPI Read with DMA | . | | . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (qspi_xdmac_read_write/firmware/sam_e70_xult.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Start capturing samples using the Logic Analyzer Software | Reset the hardware to start the application run from the beginning | Stop capturing the sample in the Logic Analyzer Software | Verify the the above mentioned four GPIO Pin waveforms and timestamps to see the QSPI performance with and without using the XDMAC for the following cases Write 80KB of data to external serial Flash without using the DMA | Read 80KB of data from the external serial Flash without using the DMA | Write 80KB of data to external serial Flash using the DMA | Read 80KB of data from the external serial Flash using the DMA | | . | LED1 toggles on success else turns ON if any error | . Comments: . Reference Application Note: Using XDMAC with QSPI on CORTEX-M7 MCUs Using MPLAB Harmony v3 | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM E70 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html"
  }
  ,"57": {
    "title": "Getting Started",
    "content": ". Getting Started Application on SAM E70 Xplained Ultra Evaluation Kit . . Description: . The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to 1 second, 2 seconds, 4 seconds, and back to 500 milliseconds every time you press the switch SW0 on the SAM E70 Xplained Ultra Evaluation Kit. Also, an LED, LED3, is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules PORTS | USART | Timer | XDMAC | TWIHS(I2C) | . | . Hardware Used: . SAM E70 Xplained Ultra Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E70 Xplained Ultra Evaluation Kit | The SAM E70 Xplained Ultra Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the SAM E70 Xplained Ultra Evaluation Kit. | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started firmware sam_e70_xult.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED3 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM E70 Xplained Ultra Evaluation Kit to change the default sampling rate to 1 second. | Every subsequent pressing of switch SW0 on SAM E70 Xplained Ultra Evaluation Kit changes the default sampling rate to 2 seconds, 4 seconds, and 500 ms and back to 1 second in cyclic order as shown below. | While the temperature sampling rate changes on every switch SW0 press, notice the LED3 toggling at the same sampling rate | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM E70/S70/V70/V71 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html"
  }
  ,"58": {
    "title": "SAM E70 Xplained Ultra Evaluation Kit",
    "content": "SAM E70 Xplained Ultra Evaluation Kit . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM E70 Xplained Ultra Evaluation Kit. . Getting Started | Getting Started with Drivers | Getting Started with FreeRTOS | XDMAC with QSPI | Ethernet bootloader - File Transfer Protocol | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/readme.html",
    "relUrl": "/apps/sam_e70_xult/readme.html"
  }
  ,"59": {
    "title": "Getting Started",
    "content": ". Getting Started Application on SAM L10 Xplained Pro Evaluation Kit . . Description: . The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW0 on the SAM L10 Xplained Pro Evaluation Kit. Also, an LED0 is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules PORTS | RTC | DMAC | SERCOM(I2C) | SERCOM(USART) | . | . Hardware Used: . SAM L10 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM L10 Xplained Pro Evaluation Kit | The SAM L10 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM L10 Xplained Pro Evaluation Kit | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML10E16A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (getting_started firmware sam_l10_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM L10 Xplained Pro Evaluation Kit to change the default sampling rate to one second | Every subsequent pressing of switch SW0 on SAM L10 Xplained Pro Evaluation Kit changes the default sampling rate to two seconds, four seconds and 500 ms and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM L10 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html"
  }
  ,"60": {
    "title": "Low Power",
    "content": ". Low Power Application on SAM L10 Xplained Pro Evaluation Kit . . Description . The application demonstrates, on power-up, the device is set to Standby Sleep mode. The device wakes up from Standby mode and enters Active mode when you cover the light sensor (by placing a hand over it, for example) on the I/O1 Xplained Pro extension kit. The application periodically prints room temperature on a serial terminal while the light sensor is covered. The device goes back to Standby mode when you uncover the light sensor. LED0 in the SAM L10 evaluation kit is toggled every time the temperature is displayed on the serial console. When you press the switch button SW0, the application switches Sleep mode from Standby mode to Idle mode. . Modules/Technology Used: . Peripheral Modules I2C | RTC | USART | DMAC | ADC | PM | SUPC | EIC | EVSYS | . | . Hardware Used: . SAM L10 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit Note: The application is being developed on a SAM L10 XPRO board. Ensure that you use the same revision on the evaluation board before going further, else you could face issues with power consumption values. | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Data Visualizer | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the I/O1 Xplained Pro extension kit to the Extension Header 1 (EXT1) of the SAML10 Xplained Pro evaluation kit | Probe PA27 (SW0 pin) and PA06 (wake-up test pin) on Extension Header 2 (EXT2) as highlighted in the Hardware Setup figure to measure wake-up time | Connect a USB cable to the DEBUG USB port for programming Note : Make sure common ground is connected with the board while using the logic analyzer or CRO. | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML10E16A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (saml10_low_power firmware low_power_app_sam_l10_xpro.X) in MPLAB X IDE. | Ensure “SAML10 Xplained Pro (EDBG)” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar. | Follow the steps in “Running the Demo” section below. | . Running the Demo: . Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | Perform reset by pressing the “RESET” switch | Verify the application title message is displayed | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to print the temperature and message on the terminal. You should see the following messages (containing the temperature value in °F) on the terminal every 500 milliseconds for the duration the light sensor is covered | Observe Current Consumption on Data Visualizer Note:The Data Visualizer is a program to process and visualize data. The Data Visualizer can receive data from various sources such as the Embedded Debugger Data Gateway Interface (EDBG DGI) and COM ports. It is possible to track an application in run-time using a terminal graph or oscilloscope. It analyzes the power consumption of an application through correlation of code execution and power consumption when used together with a supported probe or board. Open the Data Visualizer application from your PC and select the connected SAM L10 Xplained Pro B board on the DGI Control Panel, then click on Connect. The Data Visualizer will then start searching for protocols from the SAM L10 Xplained Pro board through the EDBG | Once the Data Visualizer is connected to the SAM L10 EDBG, different interfaces will appear. Select the Power interface and click on the Start button to start measuring the power consumption of the device | Ensure that the jumpers for Current Measurement on the SAM L10 Xplained Pro are set to MEASURE for the MCU and BYPASS for the I/Os | The Power Analysis window will appear on the Data Visualizer tool interface | The step image shows the device in Standby mode with its measured power consumption. You can observe small peaks that illustrate the 500 milliseconds Real-Time Clock (RTC) timer expiry Note: The average value is considered when measuring the power consumption of the device because the instant value is not stable. Then, the power consumption of the device in Standby mode is 8.66 µA. | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element) to print the temperature on the terminal and observe the power consumption of the device | Press the SW0 button to switch from Standby mode to Idle mode. The following image shows the transition of the power consumption from Standby mode to Idle mode | The following image shows the device in Idle mode with a measured power consumption of 844 µA Note: You can observe that the small peaks coming from RTC timer expiry disappeared because the power consumption in Idle mode is higher than the power required to start ADC conversion. | Place your hand over the light sensor. The device will wake up on the next ADC window monitor interrupt, read and print data on serial and then re-enter Standby mode. The following image shows the transition of the power consumption by switching from Idle mode to Standby mode Note that the above results highlight the power consumption is lower in Standby mode than in Idle mode. | . | Wake-up Time Measurement Using Logic Analyzer/ Cathode-Ray Oscilloscope (CRO) To demonstrate the CPU wake up time, switch SW0 is configured to generate an interrupt. A General Purpose Input/Output (GPIO) is toggled in the Interrupt Service Routine (ISR) of the switch press event. The MCU comes out of Sleep mode when an interrupt occurs (in this case, the switch press interrupt). The time between the switch press and the GPIO toggle in the ISR is the wake up time. Connect your logic analyzer or your CRO to the board according to the step image | Press the SW0 switch and capture the signals to measure the wake-up time in Standby and Idle mode. The following image shows the wake-up time from Standby mode | The following image shows the wake-up time from Idle mode By observing the outputs, you can conclude that the wake-up time is greater in Standby mode than in Idle mode | . | . Comments: . Reference Training Module: Low Power Application on SAM L10 (Cortex M0+) MCUs Using MPLAB Harmony v3 Peripheral Libraries | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released new demo application. | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html"
  }
  ,"61": {
    "title": "SAM L10 Xplained Pro Evaluation Kit",
    "content": "SAM L10 Xplained Pro Evaluation Kit . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM L10 Xplained Pro Evaluation Kit. . Getting Started | Low Power | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/readme.html",
    "relUrl": "/apps/sam_l10_xpro/readme.html"
  }
  ,"62": {
    "title": "Low Power",
    "content": ". Low Power Application on SAM L21 Xplained Pro Evaluation Kit . . Description . The application demonstrates low power application on SAM L21 Xplained Pro Evaluation Kit. on power-up, the device is set to Standby Sleep mode. The device wakes up from Standby mode and enters Active mode when you cover the light sensor (by placing a hand over it, for example) on the I/O1 Xplained Pro extension kit. The application periodically prints room temperature on a serial terminal while the light sensor is covered. The device goes back to Standby mode when you uncover the light sensor. LED0 in the SAM L21 evaluation kit is toggled every time the temperature is displayed on the serial console. When you press the switch button SW0, the application switches Sleep mode from Standby mode to Idle mode. . Modules/Technology Used: . Peripheral Modules I2C | RTC | USART | DMAC | ADC | PM | SUPC | EIC | EVSYS | . | . Hardware Used: . SAM L21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Note: The application is being developed on a SAM L21 XPRO-B board. Ensure that you use the same revision on the evaluation board before going further, else you could face issues with power consumption values. . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the I/O1 Xplained Pro extension kit to the Extension Header 2 (EXT2) of the SAML21 Xplained Pro evaluation kit | Probe PA02 (SW0 pin) and PB05 (wake-up test pin) on Extension Header 1 (EXT1) as highlighted in the Hardware Setup figure to measure wake-up time | Connect a USB cable to the DEBUG USB port for programming | . Note : Make sure common ground is connected with the board while using the logic analyzer or CRO. . Programming hex file: . The pre-built hex file can be programmed by following the below steps. . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML21J18B” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (saml21_low_power firmware sam_l21_xpro.X) in MPLAB X IDE. | Ensure “SAML21 Xplained Pro (EDBG)” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar. | Follow the steps in “Running the Demo” section below. | . Running the Demo: . Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | Perform a reset by pressing the “RESET” switch | Verify the application title message is displayed | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to print the temperature and message on the terminal. You should see the following messages (containing the temperature value in °F) on the terminal every 500 milliseconds for the duration the light sensor is covered | Observe Current Consumption on Data Visualizer Note:The Data Visualizer is a program to process and visualize data. The Data Visualizer can receive data from various sources such as the Embedded Debugger Data Gateway Interface (EDBG DGI) and COM ports. It is possible to track an application in run-time using a terminal graph or oscilloscope. It analyzes the power consumption of an application through correlation of code execution and power consumption when used together with a supported probe or board. | Open the Data Visualizer application from your PC and select the connected SAM L21 Xplained Pro B board on the DGI Control Panel, then click on Connect. The Data Visualizer will then start searching for protocols from the SAM L21 Xplained Pro board through the EDBG | Once the Data Visualizer is connected to the SAM L21 EDBG, different interfaces will appear. Select the Power interface and click on the Start button to start measuring the power consumption of the device | Ensure that the jumpers for Current Measurement on the SAM L21 Xplained Pro are set to MEASURE for the MCU and BYPASS for the I/Os | The Power Analysis window will appear on the Data Visualizer tool interface | The step image shows the device in Standby mode with its measured power consumption. You can observe small peaks that illustrate the 500 milliseconds Real-Time Clock (RTC) timer expiry Note: The average value is considered when measuring the power consumption of the device because the instant value is not stable. Then, the power consumption of the device in Standby mode is 6.99 µA. | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element) to print the temperature on the terminal and observe the power consumption of the device | Press the SW0 button to switch from Standby mode to Idle mode. The following image shows the transition of the power consumption from Standby mode to Idle mode | The following image shows the device in Idle mode with a measured power consumption of 530 µA | . Note: You can observe that the small peaks coming from RTC timer expiry disappeared because the power consumption in Idle mode is higher than the power required to start ADC conversion. . Place your hand over the light sensor. The device will wake up on the next ADC window monitor interrupt, read and print data on serial and then re-enter Standby mode. The following image shows the transition of the power consumption by switching from Idle mode to Standby mode | . Note that the above results highlight the power consumption is lower in Standby mode than in Idle mode. . Wake-up Time Measurement Using Logic Analyzer/ Cathode-Ray Oscilloscope (CRO) To demonstrate the CPU wake up time, switch SW0 is configured to generate an interrupt. A General Purpose Input/Output (GPIO) is toggled in the Interrupt Service Routine (ISR) of the switch press event. The MCU comes out of Sleep mode when an interrupt occurs (in this case, the switch press interrupt). The time between the switch press and the GPIO toggle in the ISR is the wake up time. | Connect your logic analyzer or your CRO to the board according to the step image | Press the SW0 switch and capture the signals to measure the wake-up time in Standby and Idle mode. The following image shows the wake-up time from Standby mode | The following image shows the wake-up time from Idle mode | By observing the outputs, you can conclude that the wake-up time is greater in Standby mode than in Idle mode | . Comments: . Reference Training Module: Low Power Application on SAM L21 (Cortex M0+) MCUs Using MPLAB Harmony v3 Peripheral Libraries | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released new demo application. | .",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html"
  }
  ,"63": {
    "title": "SAM L21 Xplained Pro Evaluation Kit",
    "content": "SAM L21 Xplained Pro Evaluation Kit . This folder contains the MPLAB® Harmony 3 reference applications developed on SAM L21 Xplained Pro Evaluation Kit. . Low Power | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc .",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/readme.html",
    "relUrl": "/apps/sam_l21_xpro/readme.html"
  }
  ,"64": {
    "title": "Reference Applications",
    "content": "Reference Application Repository . This repository contains the MPLAB® Harmony 3 reference applications developed on Microchip 32-bit SAM and PIC development boards/kits. . Reference Applications . The following reference applications are provided to evaluate solutions on 32-bit SAM and PIC MCUs. . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc . SAM D21 IoT Development Board . | SAM E51 Curiosity Nano Evaluation Kit . | Curiosity PIC32MZ DA Development Board . | SAM D21 Curiosity Nano Evaluation Kit . | Curiosity PIC32MZ EF 2.0 Development Board . | SAM L10 Xplained Pro Evaluation Kit . | SAM L21 Xplained Pro Evaluation Kit . | SAM C21 Xplained Pro evaluation kit . | SAM E70 Xplained Ultra Evaluation Kit . | SAM E54 Xplained Pro Evaluation Kit . | SAM D21 Xplained Pro Evaluation Kit . | SAMC21N Xplained Pro Evaluation Kit . | PIC32MK General Purpose (GP) Development Board . | Curiosity PIC32MX470 Development Board . | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit + MEB-II . | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | SAM E54 Curiosity Ultra Development Board . |",
    "url": "http://localhost:4000/reference_apps/apps/readme.html",
    "relUrl": "/apps/readme.html"
  }
  ,"65": {
    "title": "Getting Started",
    "content": ". Getting Started Application on PIC32MK General Purpose (GP) Development Board . . Description . The application reads the current room temperature from the temperature sensor on the MikroElectronika Weather click board. The temperature reading is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch S1 on the PIC32MK GP Development Board. Also, an LED (LED1) is toggled every time the temperature is displayed on the serial console. . Modules/Technology Used: . Peripheral Modules SPI | Timer | Core Timer | GPIO | UART | DMA | . | . Hardware Used: . PIC32MK General Purpose (GP) Development Board | MikroElectronika Weather click board | . Software/Tools Used: . This project has been verified to work with the following versions of software tools: . MPLAB Harmony v3 “csp” repo v3.7.1 | MPLAB Harmony v3 “dev_packs” repo v3.7.0 | MPLAB Harmony v3 “mhc” repo v3.4.0 | MPLAB Harmony Configurator Plugin v3.5.0 | MPLAB X IDE v5.40 | MPLAB XC32 Compiler v2.41 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. . Setup: . Connect the Type-A male to Micro-B USB cable to the Micro-B Serial USB port (J25) on the PIC32MK GP Development Board for logs -Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J12) to power and debug the PIC32MK GP Development Board | Connect the MikroElectronika Weather click board on the mikroBUS interface J29. Ensure the following hardware modification before connecting the Weather click board | . Hardware Modification: . The MikroElectronika Weather click board supports both I²C and SPI protocols to communicate with the BME280 temperature sensor. It provides jumpers (resistors) to choose a communication interface between I²C and SPI. By default, I²C is selected as the communication interface. The PIC32MK1024GPE100 device does not have an I²C peripheral module; therefore, SPI is chosen as the communication interface to communicate with the temperature sensor The hardware modification to be done on the MikroElectronika Weather click board is shown in the figure below | . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MK1024GPE100” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . Programming/Debugging Application Project: . Open the project (pic32mk_getting_started firmware pic32mk_gp_db.X) in MPLAB X IDE | Ensure “PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Running the Demo: . Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice LED1 blinking at a 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the S1 switch on the PIC32MK General Purpose (GP) Development Board to change the default sampling rate to one second | Every subsequent press of switch S1 on the PIC32MK General Purpose (GP) Development Board changes the default sampling rate to two seconds, four seconds, 500 milliseconds and back to one second in cyclic order as shown below . | While the temperature sampling rate changes on every switch S1 press, notice LED1 toggling at the same sampling rate | . Comments: . Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on PIC32MK GP MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | . | . Revision: . v1.0 released demo application | .",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html"
  }
  ,"66": {
    "title": "Release notes",
    "content": "Microchip MPLAB® Harmony 3 Release Notes . Reference Applications Release v1.0.0 (June 2020) . New Applications . The following table provides the list of new applications: . Application Description MCU Developement Board/Kit . samd21n_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . fitness_tracker | Fitness Tracker using Curiosity Nano Base for click boards, Heart Rate 3 click and EINK CLICK BUNDLE | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . location_sos | Location Tagged SOS using Curiosity Nano Base for click boards and GSM-GPS click | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . ble_weather_station | BLE based Weather Station and Motion Sensor Application on SAM D21 Curiosity Nano and Nano Base for Click boards | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . pic32mzef_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . getting_started_ext | Getting Started Extended using Harmony v3 Peripheral Libraries | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . getting_started_middleware | Getting Started Application using Harmony v3 Drivers, System Services, Middleware and FreeRTOS | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . msd_multiple_luns | USB MSD with Multiple Drives | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . sdcard_player | SD Card Audio Player | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . saml10_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM L10 | SAM L10 Xplained Pro Evaluation Kit | . saml10_low_power | Low Power | SAM L10 | SAM L10 Xplained Pro Evaluation Kit | . saml21_low_power | Low Power | SAM L21 | SAM L21 Xplained Pro Evaluation Kit | . samc21_low_power | Low Power | SAM C21 | SAM C21 Xplained Pro Evaluation Kit | . same70_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . getting_started_drv | Getting Started using Harmony v3 Drivers | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . getting_started_freertos | Getting Started using Harmony v3 Drivers and FreeRTOS | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . qspi_xdmac_read_write | XDMAC with QSPI | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . ftp_bootloader | Ethernet bootloader - File Transfer Protocol | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . same54_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM E54 | SAM E54 Xplained Pro Evaluation Kit | . sleepwalking | SleepWalking | SAM E54 | SAM E54 Xplained Pro Evaluation Kit | . samd21_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM D21 | SAM D21 Xplained Pro Evaluation Kit | . samc21n_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM C21N | SAM C21N Xplained Pro Evaluation Kit | . pic32mk_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32MK | PIC32MK General Purpose (GP) Development Board | . pic32mx470_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32MX | Curiosity PIC32MX470 Development Board | . audio_player_lab1 | Audio-Tone using a Lookup Table | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . audio_player_lab2 | Audio-Tone Application by reading the tone from a text file stored in an SD card | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . audio_player_lab3 | SD Card Reader and Audio-Tone Application by reading the tone from a text file stored in an SD card | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . audio_player_lab4 | SD Card Reader “.wav” Audio player | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . audio_player_lab5 | SD Card Audio Player/Reader with Aria Graphics | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . pic32mz_uart_live_update | Live update on PIC32MZ | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit | . Updated Applications . - NA - . Known Issues . The demo “pic32mz_ef_sk_meb2 audio_player audio_player_lab5” is developed by applying a patch (available in folder “audio_player_lab5 firmware gfx_repo_patch”) to the MPLAB Harmony v3 “gfx” repository. If you need to reconfigure or regenerate this demo using the MHC, please refer the “Notes.txt” file under audio_player_lab5 firmware gfx_repo_patch” folder. The patch is applied due to a known issue with MHC v3.5.0 for Aria GAC Code Generation. This issue is expected to be fixed in gfx release v3.7.0. | The application “pic32mz_ef_curiosity_v2 msd_multiple_luns” is developed by by applying a patch (available in folder “msd_multiple_luns firmware usb_repo_patch”) to MPLAB Harmony v3 “usb” repository. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “msd_multiple_luns firmware usb_repo_patch” folder. The patch is applied due to a known issue with MHC v3.5.0 for USB Code Generation for this demo application. This issue is expected to be fixed in a future release of “usb” repository. | Development Tools . Refer demo specfic documentation in folder “docs” to know the tools and Harmony 3 packages used. | .",
    "url": "http://localhost:4000/reference_apps/release_notes.html",
    "relUrl": "/release_notes.html"
  }
  ,"67": {
    "title": "Harmony 3 Reference Applications Package",
    "content": "MPLAB® Harmony 3 Reference Applications . MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. . Microchip 32-bit MCUs | Microchip 32-bit MPUs | Microchip MPLAB X IDE | Microchip MPLAB® Harmony | Microchip MPLAB® Harmony Pages | . This repository contains the MPLAB® Harmony 3 Reference Application Package. . Reference applications are standalone applications which demonstrates specific features or capabilities of Microchip 32-bit SAM and PIC MCUs. These applications are developed on Microchip 32-bit SAM and PIC development boards/kits. . In addition to having the MCU, the 32-bit SAM and PIC MCU development boards/kits also provide support to exercise the features of MCU through additional hardware like displays, communication buses, transceivers, sensors, external memories, etc. The additional hardware features are available on the MCU development boards/kits or is available as plugin through interface headers like mikroBUS Click or Xplained Pro extensions. . Following are the typical application types in this repository . Large feature-rich applications involving integration of several technologies like Audio, USB, TCP/IP, Wireless, Security, Low Power, RTOS, etc | Applications demonstrating certain capabilities of the Microchip 32-bit SAM and PIC MCUs. For example: Low Power application on SAM L21 Xplained Pro Evaluation Kit demonstrating idle and standby modes | Applications demonstrating capabilities of Microchip 32-bit SAM and PIC MCUs development boards/kits (Curiosity, Nano, etc.) which allows extending hardware capability through mikroBUS Click or Xplained Pro extensions | Getting started applications pertaining to the Microchip’s MCU products. These getting started applications demosntrates usage of MPLAB Harmony 3 framework by excercising commonly used peripheral features | . The above application types serve as a reference source to evaluate solutions on 32-bit SAM and PIC MCUs by developing applications using MPLAB Harmony 3 software framework on Microchip 32-bit SAM and PIC development boards/kits. . Repository and demo application support: . The following table lists the fundamental and few technology specific repositories in MPLAB Harmony 3 Software Framework | . Repository # Demo Application . csp | Simple applications that directly control the SAM and PIC peripherals | . core | Applications that use the drivers and system services that have advanced capabilities and a higher level of abstraction that gives better hardware independence | . usb | Applications that demonstrate the capabilities of the MPLAB Harmony USB stack | . net | Applications that demonstrate the capabilities of the MPLAB Harmony TCP/IP stack. These applications use well-known protocols like TCP, UDP, HTTP, SMTP, etc | . gfx | Quick start applications that demonstrates MPLAB Harmony Aria/Legato Graphics Libraries | . gfx_apps | Non quick start applications that demonstrates MPLAB Harmony Aria/Legato Graphics Libraries | . audio | Applications that demonstrates capabilities of the MPLAB Harmony audio offerings, drivers for hardware codecs that can be connected to development boards, audio decoders, etc | . Note: . The above is not an exhaustive list of all MPLAB Harmony 3 packages and corresponding application offerings. Refer the MPLAB Harmony 3 GitHub Launch page to view the complete list of MPLAB Harmony 3 packages. In each of these packages refer the underlying “apps” folder for the applications offering. . Refer to the following links for release notes and reference application information. . Release Notes | MPLAB® Harmony License | MPLAB® Harmony 3 Reference Apps Wiki | MPLAB® Harmony 3 Reference Applications Index | . Contents Summary . Folder Description . apps | Example reference applications | . docs | Reference applications help documentation | . . . . . .",
    "url": "http://localhost:4000/reference_apps/",
    "relUrl": "/"
  }
  
}