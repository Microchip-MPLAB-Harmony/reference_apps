var myVariable = `
{"0": {
    "doc": "License",
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. | License and Sublicense Grant. (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) \\\"Licensee Products\\\" means Licensee products that use or incorporate Microchip Products. (ii) \\\"Microchip Product\\\" means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) \\\"Object Code\\\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) \\\"Source Code\\\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) \\\"Third Party\\\" means Licensee's agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) \\\"Third Party Products\\\" means Third Party products that use or incorporate Microchip Products. (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d). (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. | Licensee’s Obligations. (a) Licensee will ensure Third Party compliance with the terms of this Agreement. (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. | Confidentiality. (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. | Ownership of Proprietary Rights. (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. | General. (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. | . If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ",
    "url": "http://localhost:4000/reference_apps/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "PIC32CM JH01 Curiosity Pro Development Board",
    "title": "PIC32CM JH01 Curiosity Pro Development Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32CM JH01 Curiosity Pro Development Board. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . More Application Demos . For more application demos on PIC32CM JH01 Curiosity Pro Development Board and other Development Boards/Kits having the same part number (PIC32CM5164JH01100) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/readme.html",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/readme.html"
  },"2": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended Application on PIC32CM LE00 Curiosity Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#getting-started-extended-application-on-pic32cm-le00-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#getting-started-extended-application-on-pic32cm-le00-curiosity-pro-evaluation-kit"
  },"3": {
    "doc": "Getting Started Extended",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html"
  },"4": {
    "doc": "Getting Started Extended",
    "title": "Description",
    "content": "This application demonstrates an LED toggle (LED0 toggles when the switch SW0 is pressed) on a timeout basis and prints the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW0 on the PIC32CM LE00 Curiosity Pro Evaluation Kit. The periodicity will not change while switching between SW0 to SW1 or vice versa. The demo application has extended functionality to read and print the current room temperature periodically when the extension header (EXT1) is plugged with the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#description",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#description"
  },"5": {
    "doc": "Getting Started Extended",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | DMAC | EIC | GPIO | RTC | SERCOM (USART) | SERCOM (I2C) | STDIO | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#modulestechnology-used"
  },"6": {
    "doc": "Getting Started Extended",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LE00 Curiosity Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#hardware-used"
  },"7": {
    "doc": "Getting Started Extended",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cm_le00_curiosity_pro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#softwaretools-used"
  },"8": {
    "doc": "Getting Started Extended",
    "title": "Hardware Setup 1: ",
    "content": ". | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CM LE00 Curiosity Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html"
  },"9": {
    "doc": "Getting Started Extended",
    "title": "Hardware Setup 2: ",
    "content": ". | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CM LE00 Curiosity Pro Evaluation Kit | To test the extended functionality, connect the I/O1 Xplained Pro Extension Kit to the extension header EXT1 (J601) on the PIC32CM LE00 Curiosity Pro Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html"
  },"10": {
    "doc": "Getting Started Extended",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM5164LE00100” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#programming-hex-file"
  },"11": {
    "doc": "Getting Started Extended",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cm_le00_cpro_getting_started_ext/firmware/pic32cm_le00_curiosity_pro.X) in MPLAB X IDE | Ensure “PIC32CM LE00 Curiosity Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#programmingdebugging-application-project"
  },"12": {
    "doc": "Getting Started Extended",
    "title": "Running the Demo:",
    "content": ". | Perform Hardware Setup 1 steps mentioned above, if not done already. | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button). | Set the baud rate to 115200. | Reset or power cycle the device. LED0 toggles for every 500 milliseconds during power cycle. | An LED (LED0) on the PIC32CM LE00 Curiosity Pro Evaluation Kit toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And also, the LED toggling rate is displayed on the serial terminal. | Press the switch SW0 on the PIC32CM LE00 Curiosity Pro Evaluation Kit to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW0 on the PIC32CM LE00 Curiosity Pro Evaluation Kit changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | See the following figure for the output. | To Test the Extended functionality using I/O1 Xplained Pro Extension Kit: . | Perform Hardware Setup 2 steps mentioned above, if not done already. | Reset or power cycle the device. LED0 toggles for every 500 milliseconds during power cycle and the LED toggling rate is displayed on the serial terminal. | Press the switch SW1 on the PIC32CM LE00 Curiosity Pro Evaluation Kit to start toggling LED1 and to read and print the Temperature from the I/O1 Xplained Pro Extension Kit). | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW1 (toggles LED1) on the PIC32CM LE00 Curiosity Pro Evaluation Kit to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds, and back to 500 milliseconds every time the user presses the switch SW1 on the PIC32CM LE00 Curiosity Pro Evaluation Kit. | Finally, Press the switch SW0 on the PIC32CM LE00 Curiosity Pro Evaluation Kit to switch back to print the LED toggling rate. | See the following figure for the output. | . | Note: . | The periodicity will not change while switching between SW0 to SW1 or vice versa. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#running-the-demo"
  },"13": {
    "doc": "Getting Started Extended",
    "title": "Comments:",
    "content": ". | Getting Started with the PIC32CM LE00/LS00/LS60 Curiosity Pro Board | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#comments",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#comments"
  },"14": {
    "doc": "Getting Started Extended",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#revision",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html#revision"
  },"15": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/pic32cm_le00_cpro_getting_started_ext/readme.html"
  },"16": {
    "doc": "PIC32CM LE00 Curiosity Pro Evaluation Kit",
    "title": "PIC32CM LE00 Curiosity Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32CM LE00 Curiosity Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started Extended | Click Here | . More Application Demos . For more application demos on PIC32CM LE00 Curiosity Pro Evaluation Kit and other Development Boards/Kits having the same part number (PIC32CM5164LE00100) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_le00_curiosity_pro/readme.html",
    "relUrl": "/apps/pic32cm_le00_curiosity_pro/readme.html"
  },"17": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#trustzone-getting-started-on-pic32cm-ls00-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#trustzone-getting-started-on-pic32cm-ls00-curiosity-pro-evaluation-kit"
  },"18": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html"
  },"19": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Description",
    "content": "This application demonstrates the TrustZone feature on the PIC32CM LS00 microcontroller (MCU). The application has two projects pertaining to Secure and Non-Secure modes of PIC32CM LS00 that work together on the same MCU and offers security isolation between the trusted and the non-trusted resources in the device. | The application includes Basic and Extended functionalites. | Basic application: . | The Secure mode application toggles an LED (LED0 toggles when the switch SW0 is pressed) on a timeout basis and the periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW0 on the PIC32CM LS00 Curiosity Pro Evaluation Kit. | The Non-secure application requests the Secure mode application, reads the LED toggling rate and prints on the serial terminal. The LED toggling rate data is transferred to the Non-secure mode application when it requests to Secure application through Non-Secure Callables (NSC). | . | Extended application: . | The Secure mode application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit every 500 milliseconds. Further, the application writes the temperature readings to EEPROM and reads when a request is received from the Non-secure mode application. Also, a green LED (LED0) is toggled every time the temperature display request is received from the Non-secure mode application. The periodicity of the temperature values reading can be changed to 1 second, 2 seconds, 4 seconds, and back to 500 milliseconds whenever the user presses the switch SW0 on the PIC32CM LS00 Curiosity Pro Evaluation Kit. The temperature readings are transferred to the Non-secure mode application when it requests to Secure application through Non-Secure Callables (NSC). | The Non-secure mode application requests the Secure mode application the temperature values and prints them on a serial console once it receives from the Secure mode application. Further, when it gets a request from the user (in the form of a key press on the serial console), it will request the Secure mode application to retrieve the last five stored temperature values in the EEPROM. The Non-secure application prints the last five stored temperature values on the console. Also, a red LED (LED1) is toggled every time the temperature values are read from EEPROM. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#description",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#description"
  },"20": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Secure PORT Pins (All pins by default are secure) | Secure I2C | Secure RTC | Secure EIC | Non-secure USART | Non-secure DMAC | Non-secure PORT Pins (USART Pins only) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#modulestechnology-used"
  },"21": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LS00 Curiosity Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#hardware-used"
  },"22": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Manifest for Secure and NonSecure projects present in harmony-manifest-success.yml under the project folder firmware/{Secure or NonSecure}/firmware/src/config/pic32cm_ls00_cpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#softwaretools-used"
  },"23": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Hardware Setup 1: ",
    "content": ". | The PIC32CM LS00 Curiosity Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CM LS00 Curiosity Pro Evaluation Kit | The PIC32CM LS00 Curiosity Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the PIC32CM LS00 Curiosity Pro Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html"
  },"24": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Hardware Setup 2: ",
    "content": ". | The PIC32CM LS00 Curiosity Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CM LS00 Curiosity Pro Evaluation Kit | To test the extended functionality, connect the I/O1 Xplained Pro Extension Kit to the extension header EXT1 (J601) on the PIC32CM LS00 Curiosity Pro Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html"
  },"25": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "TrustZone Application Development Use Cases",
    "content": ". | There are two use cases: . | Single Developer (This application demonstrates a single developer use case) | Dual Developer | . | 1. Single Developer . | A single developer develops both Secure and Non-Secure applications. | The following steps are automatically taken care of by the MCC. | MCC generates both Secure and Non-Secure projects and Sets the Secure project as a loadable project to the Non-Secure project | . | Configures the Secure project to generate the veneer library in the Non-Secure project path (NonSecure/firmware/tz_pic32cm_ls00_cpro_NonSecure.X/tz_pic32cm_ls00_cpro_Secure_sg_veneer.lib) | . | Configures the Non-Secure project to link the veneer library. | . | . | 2. Dual Developer . | The dual developer use case involves two developers. | Initially, Developer A is responsible for developing the Secure application; then, Developer B is responsible for developing the Non-Secure application. | Refer Comments for more details on the “Dual Developer Application Development Use Case” | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#trustzone-application-development-use-cases",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#trustzone-application-development-use-cases"
  },"26": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Programming Methods:",
    "content": ". | The device can be programmed in two ways . | Refer Method 1: Programming using the prebuilt hex file. | Refer Method 2: Programming by opening and building the application project. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#programming-methods",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#programming-methods"
  },"27": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Method 1: Steps for Programming prebuilt hex file: ",
    "content": ". | The TrustZone project will have Secure and Non-Secure pre-built hex files | Program Secure hex file first followed by the Non-Secure hex file | The following are the steps to program these hex files | Download and extract the pic32cm_ls00_cpro_tz_getting_started project, if not done already. | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | . Step 1: Program the Secure Project hex file . | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, . | Step 1 - Create Prebuilt Project, . | Click the “Browse” button to select the prebuilt “tz_pic32cm_ls00_cpro_Secure.X.production.hex” file from project path “pic32cm_ls00_cpro_tz_getting_started/hex” | Select Device as “PIC32CM5164LS00100” | Ensure “PIC32CM LS00 Curiosity Pro” is selected under “Hardware Tool” and click “Next” button | . | Step 2 - Select Project Name and Folder, . | Select appropriate project name and folder and click “Finish” button | . | . | Once the project opens, set the “tz_pic32cm_ls00_cpro_Secure.X.prebuilt” project as Main Project by right clicking on the project. | Go to project properties and set Program Options under EDBG categories to erase and program only Secure memory region. | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | . Step 2: Program the Non-Secure Project hex file . | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, . | Step 1 - Create Prebuilt Project, . | Click the “Browse” button to select the prebuilt “tz_pic32cm_ls00_cpro_NonSecure.X.production.hex” file from project path “pic32cm_ls00_cpro_tz_getting_started/hex” | Select Device as “PIC32CM5164LS00100” | Ensure “PIC32CM LS00 Curiosity Pro” is selected under “Hardware Tool” and click “Next” button | . | Step 2 - Select Project Name and Folder, . | Select appropriate project name and folder and click “Finish” button | . | . | Once the project opens, set the “tz_pic32cm_ls00_cpro_NonSecure.X.prebuilt” project as Main Project by right clicking on the project. | In the “tz_pic32cm_ls00_cpro_NonSecure.X.prebuilt” project, right click on Loadables folder and click on “Add Loadable File” to add Secure Gateway veneer library as shown below. | Select “tz_pic32cm_ls00_cpro_Secure_sg_veneer.lib” veneer library. | Expand Loadables folder to confirm that the veneer library is added to the Non-Secure project. | Go to project properties and set Program Options under EDBG categories to erase and program only Non-Secure memory region. | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in Running the Demo section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html"
  },"28": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Method 2: Programming/Debugging Application Project: ",
    "content": ". | The Trustzone project can be opened in two ways. | Procedure 1: . | Open MPLAB X IDE | Close all existing projects in IDE (if any project is opened) | Go to File -&gt; Open Project | Go to reference_apps repo path and navigate to following path . | &lt;reference_apps_path&gt;/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started | . | Select “firmware” folder, enable “Open Required Projects” and click on “Open Project” button | . | Once the project opens, set the “tz_pic32cm_ls00_cpro_NonSecure” project as Main Project by right clicking on the project. | . | Procedure 2: . | Open MPLAB X IDE | Close all existing projects in IDE (if any project is opened) | Open the project (../pic32cm_ls00_cpro_tz_getting_started/firmware/NonSecure/firmware/tz_pic32cm_ls00_cpro_NonSecure.X) in MPLAB X IDE. | . | . | Ensure “PIC32CM LS00 Curiosity Pro” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below. | Note: . | Windows OS has a maximum path length of 260 characters and a command-line limitation for Windows OS of 8191 characters. For details, see 6.5.5 Path, File and Folder Name Restrictions. | The TrustZone based project come with long path name, hence the project build may fail due to exceeding Windows maximum path length. | Workaround: Move the project folder to C:/ drive to reduce the project path length then open in MPLAB X IDE to build the project. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html"
  },"29": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Running the Demo: ",
    "content": ". | Basic functionality . | Perform Hardware Setup 1 steps mentioned above, if not done already. | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button). | Set the baud rate to 115200. | Reset or power cycle the device. LED0 toggles for every 500 milliseconds during power cycle. | An LED (LED0) on the PIC32CM LS00 Curiosity Pro Evaluation Kit toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And also, the LED toggling rate is displayed on the serial terminal. | Press the switch SW0 on the PIC32CM LS00 Curiosity Pro Evaluation Kit to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW0 on the PIC32CM LS00 Curiosity Pro Evaluation Kit changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | See the following figure for the output. | . | Extended functionality using I/O1 Xplained Pro Extension Kit: . | Perform Hardware Setup 2 steps mentioned above, if not done already. | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | Press SW1 to start the running the extended functionality. | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on PIC32CM LS00 Curiosity Pro Evaluation Kit to change the default sampling rate to 1 second. | Every subsequent pressing of switch SW0 on PIC32CM LS00 Curiosity Pro Evaluation Kit changes the default sampling rate to 2 seconds, 4 seconds, and 500 ms and back to 1 second in cyclic order as shown below. | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | Press any character on the terminal to display the last five values written to the EEPROM. Notice that a red LED (LED1) will be toggled when a key is pressed in the serial console to read the temperature values from the secure EEPROM. | Anytime press SW1 to start running basic functionality shown in Basic functionality | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html"
  },"30": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Comments: ",
    "content": ". | Getting Started with the PIC32CM LE00/LS00/LS60 Curiosity Pro Board | Dual Developer Application Development Use Case with TrustZone on SAM L11 Using MPLAB Harmony v3 . | Note: Though this technical brief is on SAM L11 MCUs, the TrustZone concepts it describes also applies to PIC32CM MC LS00 MCUs. | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html"
  },"31": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html#revision"
  },"32": {
    "doc": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/pic32cm_ls00_cpro_tz_getting_started/readme.html"
  },"33": {
    "doc": "PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "title": "PIC32CM LS00 Curiosity Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32CM LS00 Curiosity Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | TrustZone Getting Started on PIC32CM LS00 Curiosity Pro Evaluation Kit | Click Here | . More Application Demos . For more application demos on PIC32CM LS00 Curiosity Pro Evaluation Kit and other Development Boards/Kits having the same part number (PIC32CM5164LS00100) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls00_curiosity_pro/readme.html",
    "relUrl": "/apps/pic32cm_ls00_curiosity_pro/readme.html"
  },"34": {
    "doc": "Serial Bridge Application",
    "title": "ATWINC1510 Firmware upgrade",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/utilities/readme.html#atwinc1510-firmware-upgrade",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/utilities/readme.html#atwinc1510-firmware-upgrade"
  },"35": {
    "doc": "Serial Bridge Application",
    "title": "Description:",
    "content": "The application’s functioning requires the ATWINC1500 module to have firmware compatible with the WiFi software stack running on the PIC32CMLS60 microcontroller(EV76R77A Development Kit). To enable this compatibility, the ATWINC1500 module is updated with the firmware compatible with WiFi software running in the latest released demo. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/utilities/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/utilities/readme.html#description"
  },"36": {
    "doc": "Serial Bridge Application",
    "title": "Running the utility",
    "content": ". | Connect the WINC1500-Xpro to EXT3 of the PIC32CMLS60-Cpro(EV76R77A Development Kit).Flash the serial_bridge_ls60.hex inside utilities/aws_iot_winc_provisioning_serial_bridge/hex . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file in “aws_iot_provisioning_serial_bridge/hex” folder. | Select Device has “PIC32CM5164LS60100” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . | If LED0(Green) lights up it indicates the WINC has the latest firmware i.e Ver.19.7.7,In case of RED LED indication go ahead with below steps. | Download and extract pic32cmls60_aws_iot_winc_provisioning into utilities folder . | Open command prompt and navigate to “utilities/pic32cmls60_aws_iot_winc_provisioning” . The following command line will generate a device programming file winc1500_19.7.7.prog. | image_tool.exe -c winc1500_19.7.7/config.txt -o winc1500_19.7.7.prog -of prog . | The following command line will program a WINC1500 device via the serial port winc_programmer -p COMxx -d winc1500 -i winc1500_19.7.7.prog -if prog -w -r -pfw winc1500_19.7.7/firmware/programmer_firmware.bin . NOTE : Replace the xx with the device COM PORT in the above command and all other serial terminal application should be closed . | Wait till verify passed message comes up as shown below.After sucessful upgrade the Green LED (LED0) lights up. | . Revision: . | v1.6.0 released utility | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/utilities/readme.html#running-the-utility",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/utilities/readme.html#running-the-utility"
  },"37": {
    "doc": "Serial Bridge Application",
    "title": "Serial Bridge Application",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/utilities/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/utilities/readme.html"
  },"38": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " AWS Cloud IoT Core Application on PIC32CM LS60 Curiosity Pro Evaluation Kit ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"39": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "  Download  ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"40": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "–",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"41": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " Description: ",
    "content": "The PIC32CM LS60 Curiosity Pro Evaluation Kit is ideal for evaluating and prototyping with the secure and ultra-low power PIC32CM LS60 ARM® Cortex®-M23 based microcontrollers. The MCU integrates TrustFLEX ECC608 secure subsystem &amp; Arm® TrustZone® Technology in one package. This specific development board can be pre-provisioned for AWS IoT Core; The application demonstrates MQTT data transfer of light and temperature sensor data from IO1Xpro to AWS IoT core . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"42": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Key Highlights of  PIC32CM LS60 Curiosity Pro Evaluation Kit:",
    "content": ". | Additional sensors can be interfaced using “click boards” through an on-board mikroBUS connector. | . | Extension headers | Arduino Uno header connectors | mikroBUS socket | Embedded debugger | USB interface, Host or Device | Embedded current measurement XAM with Data Visualizer support for real-time power measurement | One Touch button | One Potentiometer | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html#key-highlights-of--pic32cm-ls60-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html#key-highlights-of--pic32cm-ls60-curiosity-pro-evaluation-kit"
  },"43": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " Features of PIC32CM LS60 Curiosity Pro Evaluation Kit: ",
    "content": ". | Microcontroller peripheral libraries and Middleware are based on the MPLAB Harmony v3 Software framework. | MPLAB X IDE-based project. | Command Line Interface (CLI) support for Wi-Fi credentials configuration. | 2 User LED’s and Push buttons. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"44": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " Components Used: ",
    "content": ". | PIC32CM5164LS60100 microcontroller | PIC32CM LS60 Curiosity Pro Evaluation Kit | ATWINC1510 Wi-FI module | I/O1-Xpro Extension kit | MIC5528 Voltage Regulator | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"45": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " Software/Tools Used: ",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cm_ls60 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"46": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "   ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html#aws_demo_account_setup",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html#aws_demo_account_setup"
  },"47": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " AWS Account Setup ",
    "content": "Details . To run the AWS Cloud IoT core solution, an AWS account is required. The following are the steps to configure an AWS account. Amazon Web Services (AWS) provides computing services for a fee. Some are offered for free on a trial or small-scale basis. By signing up for your AWS account, you are establishing an account to access a wide range of computing services. Think of your AWS account as your root account for AWS services. It is very powerful and gives you complete access. Be sure to protect your username and password. You control access to your AWS account by creating individual users and groups using the Identity and Access Management (IAM) Console. You also assign policies (permissions) to the group from the IAM Console. Create your own AWS account . | Create AWS account. Go to AWS website and follow instructions to create your own AWS account. Additional details can be found at create and activate a new AWS account. | Secure root account with MFA (multi-factor authentication) This is an important step to better secure your root account against attackers. Anyone logging in not only needs to know the password, but also a constantly changing code generated by an MFA device. AWS recommends a number of MFA device options at the following link: https://aws.amazon.com/iam/details/mfa/ The quickest solution is a virtual MFA device running on a phone. These apps provide the ability to scan the QR code AWS will generate to set up the MFA device. a. Return to https://aws.amazon.com/ and click the Sign In to the Console. b. If it asks for an IAM user name and password, select the Sign-in using root account credentials link. c. Enter the email and password for your AWS account. d. Under Find Services search for IAM and select it to bring up the Identity and Access Management options. e. Click on Activate MFA (Multi-factor Authentication) on your root account. f. Create an admin IAM user AWS best practices recommend not using your root account for standard administrative tasks, but to create a special admin user for those tasks. See https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#lock-away-credentials . | Follow the instructions at https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html for creating an admin user. | Enable MFA (multi-factor authentication) for the admin user. See https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#enable-mfa-for-privileged-users . | . Configuring the account using CloudFormation Templates . The usage of a custom PKI with TrustFLEX devices uses the Just-In-Time Registration (JITR) feature of AWS IoT Core. This feature requires a number of resources setup with an AWS account to work. The creation of these resources is automated through the AWS CloudFormation service. | Sign into the AWS console using the admin user created in the previous section. | Change to region to US East (Ohio) (a.k.a. us-east-2). This is done from a dropdown in the top right of the console webpage after logging in. | Under Find Services search for CloudFormation and select it to bring up that service. | Click Create Stack button. | Select Upload a template file from the page of the stack creation. | Click Choose file and upload the aws-zero-touch-full-setup.yaml file. Note: If running from a China region, you’ll need to select the aws-zero-touch-full- setup-cn.yaml instead. These files are available in ~/.trustplatform folder. | Click Next to move on to the stack details. | Enter TrustFLEX as the stack name. Actual name isn’t important, just has to be unique. | Enter a password for the user that will be created to run the demo under UserPassword. | Click Next to move on to the stack options. Nothing needs to be changed here. | Click Next to move on to the stack review. | Check the acknowledgment box regarding IAM resources at the bottom of the page. | Click Create Stack to start the resource creation. | Wait until the stack creation completes. This can take a few minutes. Once done, the stack you created will show as CREATE_COMPLETE. | Save demo credentials. Click the Outputs tab for the stack to see the credentials to be saved. | Save the credentials to aws_credentials.yaml file in ”~/.trustplatform/aws_credentials.yaml” folder. Note: ~ Indicates windows home directory is /user/username . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"48": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "   ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html#AWS_Cloud_IoT_Provisioning_Guide",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html#AWS_Cloud_IoT_Provisioning_Guide"
  },"49": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " AWS Cloud IoT Provisioning Guide ",
    "content": "Details . If this is the first time you are building/running this version of the demo, you must complete this step before proceeding further. Otherwise, you may skip this step. | Install Trust Platform Design Suite version 2 TPDSv2 . | Launch Trust Platform Design Suite v2 from windows search bar, a window launches as shown below . | Select “Trust Platform Design Suite” in webviews and Click on Usecases . | In Select Security Solution, Under Use Cases select AWS IoT Authentication . | Scroll Down and in Available solution by provisioning flow select AWS IoT Authentication under PIC32CMLS60 . | A Usecase gets launched. click on AWS IoT Authentication-PIC32CMLS60 from the Usescases . | AWS Cloud Connect – IoT Authentication page launches as shown below . | Scroll down and select PIC32CMLS60 Curiosity Pro Evaluation kit if not selected . | Connect both the debug and Traget USB to PIC32CMLS60 Curiosity pro evaluation kit to PC running Trust Platform Design Suite.Connect the WINC1500-Xpro to EXT3 of the Kit. | Scroll down to transaction diagram . | Click on Icon 1 and wait till a green right mark appears. | Sequentially Click on Icon 2, 3 and 4 . | Note the output in the output window on the right side . | Once the use case steps are executed successfully, click on C Source Files and navigate to .trustplatform\\\\pic32cmls60_cloud_connect and copy the aws_connect.h file . | Replace the aws_config.h file in the project folder(pic32cm_ls60_aws_iot_core) with the file that was copied in the above step . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"50": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "   ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html#WINC_Firmware_upgrade",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html#WINC_Firmware_upgrade"
  },"51": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " ATWINC1510 Wi-Fi controller module firmware and AWS Root certificates upgrade Guide ",
    "content": "Details . | Navigate to the utilities folder inside the project directory (pic32cm_ls60_aws_iot_core) . | Follow the steps in readme.md file inside the folder to do the WINC firmware upgrade. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"52": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " Application Demonstration ",
    "content": "Details . The following sections describes the steps to run the application. 1. How to setup the PIC32CMLS60 Development Board . | Connect the Debug USB port of PIC32CMLS60 Curiosity pro evaluation kit to the host PC’s USB port to power-up the board. | The board must be connected through a USB port to perform a firmware upgrade . | Connect the WINC1500-Xpro to EXT3 and IO1-Xpro to EXT2 of the PIC32CMLS60 Curiosity pro evaluation kit. | Use MPLAB X IDE to Program. | Configure the Wi-Fi Credentials using Wi-Fi configuration through CLI method explained Below. | . 2. Firmware upgrade and Wi-Fi configuration process . Firmware upgrade through MPLAB X IDE . | Connect the kit to the PC.Open MPLABX IDE and Click on the open project icon as shown below . | Open the project file (pic32cm_ls60_cpro_NonSecure.X ) file as shown below . | Once the project is opened in the IDE Click on the Make and Program icon as shown below and wait till the Programming complete message. Note: . | Windows OS has a maximum path length of 260 characters and a command-line limitation for Windows OS of 8191 characters. For details, see 6.5.5 Path, File and Folder Name Restrictions. | The TrustZone based project come with long path name, hence the project build may fail due to exceeding Windows maximum path length. | Workaround: Move the project folder to C:/ drive to reduce the project path length then open in MPLAB X IDE to build the project. | . | . Firmware upgrade through MPLAB X IDE . | Most developers usually follow this method to program the .hex file from the MPLAB X IDE environment.(Navigate to hex folder inside the project directory as shown in the below image) | . Wi-Fi configuration through CLI . | Open a terminal application on the host PC for the virtual COM port of the connected PIC32CMLS60 Curiossity pro evaluation kit, with 115200-8-None-1 settings. | Just enter the below command to set the Wi-Fi credentials. wifi &lt; SSID &gt;,&lt; PASSWORD &gt;,&lt; SECURITY TYPE &gt; example : wifi MCHP_test,Asdfghjk,2 . Note:No need of repeating this step every time while running the demo, Device remembers last used WiFi credentials and try to connect to it. If WiFi credentials changes, this step should be performed. | . 3. Running the demo application . | After a successful connection, the PIC32CMLS60 Curisity Pro Evaluation kit pushes the real-time light and temperature sensors data of the IO1Xpro to the AWS IoT cloud. Toggling of LED0 (Green LED) indicates the same. Red LED (LED1) indicates that the WiFi is not connected. Note: Only Temperature data is pushed by default.Light data is pushed when SW0 is pressed and pressing SW1 stops the publishing of Light sensor data. Note : AWS cloud path to visualize the data pushed from the device “AWS IOT &gt; Manage &gt; Things &gt; ThingNAME (ThingNAME = device_serialnumber) &gt; classic Shadow” . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"53": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " The AWS Lambda service ",
    "content": "Details . AWS Lambda is a service that enables code to be run in the cloud without worrying about things like provisioning, server management, and scalability. It natively supports many different programming languages, and interfaces with a wide range of other AWS services to facilitate cloud development. we will use AWS Lambda to transfer temperature and light sensor data from SAM-IoT Development Board to cloud watch. The main concept that we will focus on is how to route data between AWS Lambda and AWS IoT Core. | Sensor data is sent from connected devices to the AWS Cloud as MQTT messages. | The data is forwarded from AWS IoT Core to AWS Lambda, where it is routed to cloud watch for plotting the graph. | . Creating a Role in AWS IAM . | Sign in to the AWS Management Console and select the IAM service. | Select Roles under Access Management in the menu on the left-hand side . | Click Create role. | Select AWS service as the trusted entity. | Select Lambda as the use case. | Click Next: Permissions. | Attach the AWSIoTDataAccess, CloudWatchFullAccess and AWSLambdaBasicExecutionRole permission policies by using the search bar and ticking the relevant boxes. This will allow our Lambda function to send data to the AWS IoT Core and use Amazon CloudWatch logs. We will not cover Amazon CloudWatch in this tutorial, but it could be a useful tool for debugging your application later on. | Click Next: Tags. | Click Next: Review. | Enter Lambda_IoT_role as the Role name. | Click Create role . | . Designing an AWS Lambda function . Creating an empty Lambda function . AWS Lambda is a service that enables us to run code in the cloud without worrying about server management. It can be set up to send and receive data from many different services, such as AWS IoT Core, which we will make use of in this tutorial. To create an AWS Lambda function: . | Sign in to the AWS Management Console and select the Lambda service. | Select Functions in the menu on the left-hand side. | Click on Create function. | Choose Author from scratch. | Enter iot_Core_to_CwMetrics as the Function name. | Select Python 3.8 as the Runtime. | Expand Choose or create an execution role under Permissions and select Use an existing role. | Select the Lambda_IoT_role that we defined earlier . | Click on Create function. | . When the AWS Lambda function has been successfully created, the user should be redirected to the Configuration page for the iot_Core_to_CwMetrics function. This page can also be found by selecting Functions in the menu on the left-hand side in AWS Lambda and then selecting the function from the list. Triggering the Lambda function for relevant MQTT packages . The next step is to configure the Lambda function to trigger when messages containing sensor data are published over MQTT in AWS IoT Core: . | On the Lambda function’s configuration page, expand the Designer panel. | Click on Add trigger. | Select AWS IoT as the trigger in the dropdown menu. | Select Custom IoT rule. | In the Rule dropdown, select Create new rule. | Enter RouteSensorData as the Rule name. | Enter SELECT * FROM “$aws/things/ThingName/shadow/#” as the Rule query statement. NOTE : ThingName is the unique serial number of the device . | Click Add. | . Implementing the Lambda function . | Ensure that the iot_Core_to_CwMetrics function is selected in the Designer panel. | Paste the following Python code in the editor in the Function code panel . import json # Python library for dealing with JSON objects import boto3 # boto3 is the AWS SDK for Python cloudwatch = boto3.client('cloudwatch') #Define payload attributes that may be changed based on device message schema ATTRIBUTES = ['temperature','light','state','reported'] # Define CloudWatch namespace CLOUDWATCH_NAMESPACE = \\\"thingls60/MonitorMetrics\\\" # Define function to publish the metric data to CloudWatch def cw(topic, metricValue, metricName): metric_data = { 'MetricName': metricName, 'Dimensions': [{'Name': 'topic', 'Value': topic}], 'Unit': 'None', 'Value': metricValue, 'StorageResolution': 1 } cloudwatch.put_metric_data(MetricData=[metric_data],Namespace=CLOUDWATCH_NAMESPACE) return # Define the handler to loop through all the messages and looks to see if the message attributes # include light or temp and calls the cw() function if so to publish the custom metrics to Amazon CloudWatch def lambda_handler(event, context): my = list(event.values()) my_list = list(my[0].values()) print(my_list[0]) for e in my_list[0]: print(\\\"Received a message: {}\\\".format(str(e))) print(e) # Potential test point # Iterate through each attribute we'd like to publish for attribute in ATTRIBUTES: # Validate the event payload contains the desired attribute if attribute in e: print(\\\"publishing {} to CloudWatch\\\".format(attribute)) cw(\\\"PIC32CMLS\\\", my_list[0][attribute], attribute) return event . | Click Save . | . Visualizing sensor data in cloudwatch . | Search CloudWatch in AWS search box and open it | Click on Dashboard on the right side of the window under CloudWatch | Click on Create Dashboard | Enter Dashboard name as pic32cmls60_dashboard and click on Create Dashboard | Under Add widget Select Number | Under Add metric graph, select thingls60/MonitorMetrics and then topic | Under Metrics, select BOTH PIC32CMLS temperature and light metrics | Navigate to Graphed metrics and change the period to 1 second in both temperature and light metrics. Then click on Create widget | Click Save dashboard . | This Dashboard page refreshes every 10 seconds and update the sensor data. Note : ** Your custom dashboard can be found in **CloudWatch &gt; Dashboards &gt; your dash board name (here it is pic32cmls60_dashboard).The non-secure temperature data is shown by default.To view secure light sensor data press SW0 on the PIC32CMLS60 curiosity pro evaluation kit.To stop viewing it press SW1. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"54": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " Reference: ",
    "content": ". | For more details on the application usage, functionality and other details, refer to the PIC32CM LS60 Curiosity Pro Evaluation Kit User Guide | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"55": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " Comments:    ",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"56": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " Revision: ",
    "content": ". | v1.6.0 - released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"57": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "AWS Cloud IoT Core Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_aws_iot_core/readme.html"
  },"58": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#secure-boot-on-pic32cm-ls60-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#secure-boot-on-pic32cm-ls60-curiosity-pro-evaluation-kit"
  },"59": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html"
  },"60": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Description",
    "content": "This application demonstrates the Secure Boot feature on the PIC32CM LS60 microcontroller (MCU). The application has two projects; . | A Secure Bootloader | An Application | . Following are the steps to demonstrate the secure boot: . Step 1: Secure Boot Configuration | Provisioning | Secure Booting . | The PIC32CM LS60 MCU is configured to run in secure boot mode with ATECC608B-based boot protection verification method and SHA-based NVM boot configuration (BOOTOPT=5). | Program the Secure Bootloader code using Microchip’s Trust Platform Design Suite (TPDS). | The successful running of the Secure Bootloader is indicated by turning the green LED0 ON. | Receive the application image over UART from a PC by running a python script. The successful receiving of the application is indicated by toggling the red LED. | Red LED1 starts toggling indicating secure and successful application booting. | . Step 2: Impersonating Bootloader . | Generate a .hex file (say an impersonating bootloader) in MPLAB X IDE. | Program the hex file using MPLAB X IDE (Ensure the bootloader is programmed at 0x00) | Since the bootloader image in NVM is an impersonated one, it doesn’t have the digest matching the ATECC608 B-based authentication and integrity checks. The application fails to Boot. Both LED’s are OFF state. | . Step 3: Restoring the Secure Bootloader and Validation . | Generate the Secure Bootloader .hex file in MPLAB X IDE. | Use the Private/Public key used in Step 1 in TPDS and create the signed .hex file. | Program the signed.hex file using the TPDS. The successful running of the Secure Bootloader is indicated by turning the green LED0 ON. | Receive the application image over UART from a PC by running a python script. The successful receiving of the application is indicated by toggling the red LED. | Since the Secure Bootloader is restored and the Secure Bootloader and application work as expected. Red LED1 starts toggling indicating secure and successful application booting. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#description"
  },"61": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Secure PORT Pins (All pins by default are secure) | Secure I2C | Secure RTC | Secure EIC | Secure USART | . | System Modules . | Bootloader (UART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#modulestechnology-used"
  },"62": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LS60 Curiosity Pro Evaluation Kit | MikroElektronika USB UART Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#hardware-used"
  },"63": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Manifest file for Secure Bootloader project present in harmony-manifest-success.yml under the project folder firmware/secure_bootloader/Secure/firmware/src/config/pic32cm_ls60_cpro . | Note: Ignore NonSecure project(firmware/secure_bootloader/NonSecure/firmware/pic32cm_ls60_cpro_NonSecure.X) as it is a dummy project. | . Refer Manifest file for the application project under Secure and Non Secure parts of the project present in harmony-manifest-success.yml under the folder firmware/test_app/{Secure or NonSecure}/firmware/src/config/pic32cm_ls60_cpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Trust Platform Design Suite V2 | Any Serial Terminal application like Tera Term terminal application. | Python - v3 and above | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#softwaretools-used"
  },"64": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Hardware Setup: ",
    "content": ". | The following diagram shows a detailed picture of the setup. | The PIC32CM LS60 Curiosity Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the Type-A male to Micro-B USB cable to Target USB port (J200) to perform the provisioning using the TPDS tool on PIC32CM LS60 Curiosity Pro Evaluation Kit | Mount MikroElektronika USB UART Click on microBus connector and connect the Type-A male to Mini-B USB cable to Mini-B USB-UART Cick onboard to receive the application firmware from the host. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html"
  },"65": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Prerequisites: ",
    "content": ". | Install Trust Platform Design Suite V2 software. | Refer to Installing the Trust Platform Design Suite v2. | . | Generate Application’s Unified Binary. A Unified Binary is a single executable file generated by MPLAB X IDE using the Secure and NonSecure hex files. This can be used to program both Secure and Non-Secure regions together. | Note: The pre-built application hex and unified binary is kept in the hex folder. You can ignore the following steps if you have not modified the application project. | Open and Build the Application’s NonSecure project in the MPLAB X IDE, i.e., reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/firmware/test_app/NonSecure/firmware/pic32cm_ls60_cpro_NonSecure.X | This will also build the mandatory Secure project. | . | Steps to generate the PIC32CM LS60 User Row Configurations (Fuse Configurations) for Application project. | The pre-generated application_user_configurations_out.txt configuration file will be used by the btl_host.py script to update the fuse configurations while programming the application. | Note: The following steps shows how the application_user_configurations_out.txt file was generated based on the device and project configurations. You can ignore the following steps if you have not modified the project configurations. | If modified then the input file application_user_configurations_in.txt needs to be generated based on the new device and project configuration and then passed to btl_dev_cfg_gen.py script file to generate the output file application_user_configurations_out.txt. | The application_user_configurations_in.txt file consists of only the User Row Fuse configurations for the Non-Secure application project i.e., app_pic32cm_ls60_cpro_NonSecure project and it is generated by looking at the applications device and project configurations. | To know how this file is generated, open the above app_pic32cm_ls60_cpro_NonSecure project in MCC and check the Device &amp; Project Configuration under System module. For example, the Memory Configurations of the application can be seen as below. | For more information on application_user_configurations_in.txt generation check the link Bootloader Device Input Configuration. | Go to the scripts folder and execute the following command show help menu for the script. | python btl_dev_cfg_gen.py --help . | . | The syntax for generating the device configuration output file is: . | python btl_dev_cfg_gen.py -v -f &lt;device_config_input_file.txt&gt; -o &lt;device_config_output_file.txt&gt; . | To know more about btl_dev_cfg_gen.py - Refer Device Configuration Generation Script Help in Harmony UART Bootloader Library. | . | Now, to generate the CRC for the fuse settings, execute the following command: . | python btl_dev_cfg_gen.py -v -f application_user_configurations_in.txt -o application_user_configurations_out.txt . | . | The application_user_configurations_out.txt configuration file will be used later by the btl_host.py to update the fuse configurations while programming the application using Secure Bootloader. | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html"
  },"66": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Running the Demo: ",
    "content": ". | Perform Hardware Setup steps mentioned above, if not done already. | Perform Prerequisites steps mentioned above, if not done already. | . Step-1: Secure Boot Configuration | Provisioning | Secure Booting . | PIC32CM LS60 MCU is configured to run in secure boot mode with ATECC608B-based boot protection verification method and SHA-based NVM boot configuration (BOOTOPT=5). | Open and Build the Secure Bootloader project in the MPLAB X IDE, i.e., reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/firmware/secure_bootloader/Secure/firmware/pic32cm_ls60_cpro_Secure.X | . | Program the Secure Bootloader code using Mirochip’s Trust Platform Design Suite (TPDS). | Open the TPDS application and select the TrustFlex usecase, i.e., Secure Boot-PIC32CMLS60. | This usecase will sign an application hex file to support secure boot in combination with the ATECC608 embedded into the PIC32CM LS60. The application that is to be signed must be generated as per the current data sheet for secure boot. | . | And click on Option 1 to Generate Private/Public key pair to perform the factory programming of default binary and wait for the response OK. | Press the reset button on the PIC32CM LS60 Curiosity Pro Evaluation Kit to sync with TPDS. | Again press Option 1 - Generate Private/Public key. In this step, the public key required to verify the SecureBoot is stored in Slot 15. This time a pop-up apears to Generate Private/Public key, as shown below. | After successful execution of Option 1, a green tick mark appears in the Option 1 as shown below and check the log window for message “Executed Step-1 Successfully”. | Select Option 2 to Generate the IOPROT Key. | The communication between the PIC32CM LS60 microcontroller and the ATECC608B is encrypted using an I/O Protection Key (IOPROTKEY). This unique key is initially provisioned in both the ATECC608B Slot 6 and the microcontroller BOCOR NVM Configuration Row (IOPROTKEY). | . | After successful execution of Option 2, a green tick mark appears in the Option 2 as shown below and check the log window for message “Executed Step-2 Successfully”. | Copy the pic32cm_ls60_cpro_Secure.X.production.hex file from reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/hex/secure_bootloader/pic32cm_ls60_cpro_Secure.X.production.hex to &lt;user_path&gt;/.trustplatform/pic32cmls60_secure_boot to load hex file, calculate digest, and signature. | Select Option 3 to load the Secure Bootloader hex file from the TPDS trustplatform folder i.e., &lt;user_path&gt;/.trustplatform/pic32cmls60_secure_boot to calculate the digest and signature. In this step, the digest and signature will be generated for the loaded Secure Bootloader hex file. | After successful execution of Option 3, a green tick mark appears in the Option 3 as shown below and check the log window for message “Executed Step-3 Successfully”. | Select Option 4 to save the new application hex. i.e, the TPDS generates a new hex file with the name signed.hex which has the digest and the Elliptic Curve Digital Signature Algorithm (ECDSA) signature stored at the end of the BOOT region Secure Bootloader hex file. | After successful execution of Option 4, a green tick mark appears in the Option 4 as shown below and check the log window for message “Executed Step-4 Successfully”. | Select Option 5 to program the signed.hex on to PIC32CM LS60 Curiosity Pro Evaluation Kit. In this step, the Host MCU calculates the SHA-256 digest and sends the encrypted digest and signatures to be verified through ECDSA. Then Secure Boot execution will authenticate the application code. | After successful execution of Option 5, a green tick mark appears in the Option 5 as shown below and check the log window for message “Executed Step-5 Successfully”. | This completes the usecase execution. i.e., the provisioning flow of PIC32CM LS60 MCU. | Reset or power cycle the device. | . | The successful running of the Secure bootloader is indicated by turning the green LED (LED0) ON. | A green LED (LED0) on the PIC32CM LS60 Curiosity Pro Evaluation Kit turns ON when the Secure Bootloader is running. | Open MPLAB X IDE and you can check the Configuration Bits by going to Window-&gt;Target Memory Views-&gt;Configuration Bits in the MPLAB X IDE | The Secure Bootloader fuse configuration bits are stored in the secure_bootloader_with_tpds.c file. | Here, you can see that the BOOTROM_BOOTOPT value is set to 0x5, which enables the secure boot. | Also check the BOOTKEY which is set by the user and IOPROTKEY which is stored by the TPDS. | . | . | Receive the application image over UART from a PC by running a python script. The successful receiving of the application is indicated by toggling the red LED. | Open the Virtual Debug COM port and set the baud rate to 115200. | Connect the Type-A male to Mini-B USB cable to Mini-B USB-UART Cick onboard to receive the application firmware from the Host-PC. | Go to the Secure Bootloader Scripts path, and open Command prompt to run the bootloader host script btl_host.py and device fuse configuration bits generation script btl_dev_cfg_gen.py. | btl_host.py - Sends the Application’s Unified (Secure and NonSecure) binary from Host-PC to Target device over UART. &lt;reference_apps&gt;/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/scripts and execute the following command. Change the COM port number based on its enumeration in the Host-PC. | btl_dev_cfg_gen.py - Generates the device fuse configuration bits. | To show help menu for the script enter btl_host.py --help in the command prompt. | . | The following command sends the Application’s Unified binary from Host-PC to the PIC32CM LS60 Curiosity Pro Evaluation Kit and updates the User row fuse configurations bits. See the following output on the command prompt. | python btl_host.py -v -u even -i COM27 -d PIC32CM -a 0x1000 -f ../hex/test_app/pic32cm_ls60_cpro_NonSecure.X.production.unified.bin -c application_user_configurations_out.txt . | Observe the LED1 (Red-LED) blinking while receiving the application. | . | After receiving the application’s unified binary and update of device configuration bits, remove the Mini-USB from the USB-UART Click board and reset the device. | . | Red LED1 starts toggling indicating secure and successful application booting. | Now the LED1 (Red-LED) toggles and prints a message in the Virtual COM as shown below, indicating the application is loaded from Secure bootloader. | Press and Hold the Switch SW0 key to trigger the Secure Bootloader to program the application once again or with the new application. | Notice that the green LED0 turns ON when the Secure Bootloader is triggered. | Now open MPLAB X IDE and to check the Device Fuse Configuration Bits after programming the application. Go to Window-&gt;Target Memory Views-&gt;Configuration Bits in the MPLAB X IDE. The configuration bits are saved in the secure_bootloader_with_tpds_and_application.c file. | In this file, notice only User Row configurations (i.e., USER WORD) are updated based on the application’s configuration, whereas the Boot Configuration Row (i.e., BOCOR WORD) are not modified. | You can check the diff of the secure_bootloader_with_tpds.c and secure_bootloader_with_tpds_and_application.c present in the scripts folder to see which user configuration bitfields are updated by the Bootloader script based on the application’s project configuration. | . | . | . Step-2: Impersonating Bootloader . | Open and Build the Secure Bootloader project in the MPLAB X IDE, i.e., reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/firmware/secure_bootloader/Secure/firmware/pic32cm_ls60_cpro_Secure.X | Program the hex file using MPLAB X IDE. | Since the Secure Bootloader image does not have the signature appended at the end of the Bootloader image when flashing using the MPLAB X IDE, the ATECC608 B-based authentication and integrity checks fails. | The Secure Bootloader application fails to Boot. LEDs will go to the OFF state. | . Step-3: Restoring the Secure Bootloader and Validation . | Perform Hardware Setup steps mentioned above to restore the Secure Bootloader. | Generate the Secure Bootloader .hex file in MPLAB X IDE as mentioned in the Step 1.1. | Use the Private/Public key used in Step 1.2 in TPDS and create the signed .hex file. | Follow the Step 1.3 to program the signed.hex file using the TPDS. Then press the Reset button and observe that the green LED0 is turned ON. This indicates the successful running of the Secure Bootloader. | Follow the Step 1.4 to receive the application image over UART from a PC by running a python script. The successful receiving of the application is indicated by toggling the red LED. | Since the Secure Bootloader is restored and the Secure Bootloader and application work as expected. Red LED1 starts toggling indicating secure and successful application booting. | . Note: . | Modifying the security configurations by (re)-programming the different NVM Configuration rows (using the NVMCTRL peripheral) is possible but the changes done on these NVM Configuration rows will always be applied only after a new reset sequence happens (through a new Boot ROM execution). | The Security Configuration Lock bit i.e., SECCFGLOCK is set to 1 by default. This means, after exiting the Boot ROM: . | The security configurations are locked so that no code (even secure) can change them before next reset sequence. | The only way to update the security configurations is to (re)-program the NVM Configuration rows then reset the device. | For more information check the PIC32CM LS00/LS60 Specific Security Features section of PIC32CM LE00/LS00/LS60 Family Data Sheet. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html"
  },"67": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Comments: ",
    "content": ". | Getting Started with the PIC32CM LE00/LS60/LS60 Curiosity Pro Board | Trust Platform Design Suite v2 | PIC32CM LS00/LS60 Security Reference Guide | Dual Developer Application Development Use Case with TrustZone on SAM L11 Using MPLAB Harmony v3 . | Note: Though this technical brief is on SAM L11 MCUs, the TrustZone concepts it describes also applies to PIC32CM MC LS60 MCUs. | . | This application demo builds and works out of the box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html"
  },"68": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#revision",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html#revision"
  },"69": {
    "doc": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_secure_boot/readme.html"
  },"70": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#trustzone-getting-started-on-pic32cm-ls60-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#trustzone-getting-started-on-pic32cm-ls60-curiosity-pro-evaluation-kit"
  },"71": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html"
  },"72": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Description",
    "content": "This application demonstrates the TrustZone feature on the PIC32CM LS60 microcontroller (MCU). The application has two projects pertaining to Secure and Non-Secure modes of PIC32CM LS60 that work together on the same MCU and offers security isolation between the trusted and the non-trusted resources in the device. | The application includes Basic and Extended functionalites. | Basic application: . | The Secure mode application toggles an LED (LED0 toggles when the switch SW0 is pressed) on a timeout basis and the periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW0 on the PIC32CM LS60 Curiosity Pro Evaluation Kit. | The Non-secure application requests the Secure mode application, reads the LED toggling rate and prints on the serial terminal. The LED toggling rate data is transferred to the Non-secure mode application when it requests to Secure application through Non-Secure Callables (NSC). | . | Extended application: . | The Secure mode application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit every 500 milliseconds. Further, the application writes the temperature readings to EEPROM and reads when a request is received from the Non-secure mode application. Also, a green LED (LED0) is toggled every time the temperature display request is received from the Non-secure mode application. The periodicity of the temperature values reading can be changed to 1 second, 2 seconds, 4 seconds, and back to 500 milliseconds whenever the user presses the switch SW0 on the PIC32CM LS60 Curiosity Pro Evaluation Kit. The temperature readings are transferred to the Non-secure mode application when it requests to Secure application through Non-Secure Callables (NSC). | The Non-secure mode application requests the Secure mode application the temperature values and prints them on a serial console once it receives from the Secure mode application. Further, when it gets a request from the user (in the form of a key press on the serial console), it will request the Secure mode application to retrieve the last five stored temperature values in the EEPROM. The Non-secure application prints the last five stored temperature values on the console. Also, a red LED (LED1) is toggled every time the temperature values are read from EEPROM. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#description"
  },"73": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Secure PORT Pins (All pins by default are secure) | Secure I2C | Secure RTC | Secure EIC | Non-secure USART | Non-secure DMAC | Non-secure PORT Pins (USART Pins only) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#modulestechnology-used"
  },"74": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LS60 Curiosity Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#hardware-used"
  },"75": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Manifest for Secure and NonSecure projects present in harmony-manifest-success.yml under the project folder firmware/{Secure or NonSecure}/firmware/src/config/pic32cm_ls60_cpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#softwaretools-used"
  },"76": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Hardware Setup 1: ",
    "content": ". | The PIC32CM LS60 Curiosity Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CM LS60 Curiosity Pro Evaluation Kit | The PIC32CM LS60 Curiosity Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the PIC32CM LS60 Curiosity Pro Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html"
  },"77": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Hardware Setup 2: ",
    "content": ". | The PIC32CM LS60 Curiosity Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CM LS60 Curiosity Pro Evaluation Kit | To test the extended functionality, connect the I/O1 Xplained Pro Extension Kit to the extension header EXT1 (J601) on the PIC32CM LS60 Curiosity Pro Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html"
  },"78": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "TrustZone Application Development Use Cases",
    "content": ". | There are two use cases: . | Single Developer (This application demonstrates a single developer use case) | Dual Developer | . | 1. Single Developer . | A single developer develops both Secure and Non-Secure applications. | The following steps are automatically taken care of by the MCC. | MCC generates both Secure and Non-Secure projects and Sets the Secure project as a loadable project to the Non-Secure project | . | Configures the Secure project to generate the veneer library in the Non-Secure project path (NonSecure/firmware/tz_pic32cm_ls60_cpro_NonSecure.X/tz_pic32cm_ls60_cpro_Secure_sg_veneer.lib) | . | Configures the Non-Secure project to link the veneer library. | . | . | 2. Dual Developer . | The dual developer use case involves two developers. | Initially, Developer A is responsible for developing the Secure application; then, Developer B is responsible for developing the Non-Secure application. | Refer Comments for more details on the “Dual Developer Application Development Use Case” | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#trustzone-application-development-use-cases",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#trustzone-application-development-use-cases"
  },"79": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Programming Methods:",
    "content": ". | The device can be programmed in two ways . | Refer Method 1: Programming using the prebuilt hex file. | Refer Method 2: Programming by opening and building the application project. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#programming-methods",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#programming-methods"
  },"80": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Method 1: Steps for Programming prebuilt hex file: ",
    "content": ". | The TrustZone project will have Secure and Non-Secure pre-built hex files | Program Secure hex file first followed by the Non-Secure hex file | The following are the steps to program these hex files | Download and extract the pic32cm_ls60_cpro_tz_getting_started project, if not done already. | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | . Step 1: Program the Secure Project hex file . | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, . | Step 1 - Create Prebuilt Project, . | Click the “Browse” button to select the prebuilt “tz_pic32cm_ls60_cpro_Secure.X.production.hex” file from project path “pic32cm_ls60_cpro_tz_getting_started/hex” | Select Device as “PIC32CM5164LS60100” | Ensure “PIC32CM LS60 Curiosity Pro” is selected under “Hardware Tool” and click “Next” button | . | Step 2 - Select Project Name and Folder, . | Select appropriate project name and folder and click “Finish” button | . | . | Once the project opens, set the “tz_pic32cm_ls60_cpro_Secure.X.prebuilt” project as Main Project by right clicking on the project. | Go to project properties and set Program Options under EDBG categories to erase and program only Secure memory region. | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | . Step 2: Program the Non-Secure Project hex file . | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, . | Step 1 - Create Prebuilt Project, . | Click the “Browse” button to select the prebuilt “tz_pic32cm_ls60_cpro_NonSecure.X.production.hex” file from project path “pic32cm_ls60_cpro_tz_getting_started/hex” | Select Device as “PIC32CM5164LS60100” | Ensure “PIC32CM LS60 Curiosity Pro” is selected under “Hardware Tool” and click “Next” button | . | Step 2 - Select Project Name and Folder, . | Select appropriate project name and folder and click “Finish” button | . | . | Once the project opens, set the “tz_pic32cm_ls60_cpro_NonSecure.X.prebuilt” project as Main Project by right clicking on the project. | In the “tz_pic32cm_ls60_cpro_NonSecure.X.prebuilt” project, right click on Loadables folder and click on “Add Loadable File” to add Secure Gateway veneer library as shown below. | Select “tz_pic32cm_ls60_cpro_Secure_sg_veneer.lib” veneer library. | Expand Loadables folder to confirm that the veneer library is added to the Non-Secure project. | Go to project properties and set Program Options under EDBG categories to erase and program only Non-Secure memory region. | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in Running the Demo section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html"
  },"81": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Method 2: Programming/Debugging Application Project: ",
    "content": ". | The Trustzone project can be opened in two ways. | Procedure 1: . | Open MPLAB X IDE | Close all existing projects in IDE (if any project is opened) | Go to File -&gt; Open Project | Go to reference_apps repo path and navigate to following path . | &lt;reference_apps_path&gt;/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started | . | Select “firmware” folder, enable “Open Required Projects” and click on “Open Project” button | . | Once the project opens, set the “tz_pic32cm_ls60_cpro_NonSecure” project as Main Project by right clicking on the project. | . | Procedure 2: . | Open MPLAB X IDE | Close all existing projects in IDE (if any project is opened) | Open the project (../pic32cm_ls60_cpro_tz_getting_started/firmware/NonSecure/firmware/tz_pic32cm_ls60_cpro_NonSecure.X) in MPLAB X IDE. | . | . | Ensure “PIC32CM LS60 Curiosity Pro” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below. | Note: . | Windows OS has a maximum path length of 260 characters and a command-line limitation for Windows OS of 8191 characters. For details, see 6.5.5 Path, File and Folder Name Restrictions. | The TrustZone based project come with long path name, hence the project build may fail due to exceeding Windows maximum path length. | Workaround: Move the project folder to C:/ drive to reduce the project path length then open in MPLAB X IDE to build the project. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html"
  },"82": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Running the Demo: ",
    "content": ". | Basic functionality . | Perform Hardware Setup 1 steps mentioned above, if not done already. | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button). | Set the baud rate to 115200. | Reset or power cycle the device. LED0 toggles for every 500 milliseconds during power cycle. | An LED (LED0) on the PIC32CM LS60 Curiosity Pro Evaluation Kit toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And also, the LED toggling rate is displayed on the serial terminal. | Press the switch SW0 on the PIC32CM LS60 Curiosity Pro Evaluation Kit to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW0 on the PIC32CM LS60 Curiosity Pro Evaluation Kit changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | See the following figure for the output. | . | Extended functionality using I/O1 Xplained Pro Extension Kit: . | Perform Hardware Setup 2 steps mentioned above, if not done already. | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | Press SW1 to start the running the extended functionality. | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on PIC32CM LS60 Curiosity Pro Evaluation Kit to change the default sampling rate to 1 second. | Every subsequent pressing of switch SW0 on PIC32CM LS60 Curiosity Pro Evaluation Kit changes the default sampling rate to 2 seconds, 4 seconds, and 500 ms and back to 1 second in cyclic order as shown below. | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | Press any character on the terminal to display the last five values written to the EEPROM. Notice that a red LED (LED1) will be toggled when a key is pressed in the serial console to read the temperature values from the secure EEPROM. | Anytime press SW1 to start running basic functionality shown in Basic functionality | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html"
  },"83": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Comments: ",
    "content": ". | Getting Started with the PIC32CM LE00/LS60/LS60 Curiosity Pro Board | Dual Developer Application Development Use Case with TrustZone on SAM L11 Using MPLAB Harmony v3 . | Note: Though this technical brief is on SAM L11 MCUs, the TrustZone concepts it describes also applies to PIC32CM MC LS60 MCUs. | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html"
  },"84": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html#revision"
  },"85": {
    "doc": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_cpro_tz_getting_started/readme.html"
  },"86": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Secure IoT Gateway application client on PIC32CM LE00 Curiosity Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#secure-iot-gateway-application-client-on-pic32cm-le00-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#secure-iot-gateway-application-client-on-pic32cm-le00-curiosity-pro-evaluation-kit"
  },"87": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html"
  },"88": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Description:",
    "content": "This project demonstrates the bad/fake/impersonating client side implementation of the secure IoT gateway application. The PIC32CM LE00 Client reads the sensor data from the temperature and light sensors on the I/O1 Xplained Pro board connected to the EXT2 XPRO connector. The sensor data is displayed at the MIKROE OLED C Click display. The client waits for the host to initiate the authentication process. Since the authentication fails, the sensor data is not sent across the host through USART. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#description"
  },"89": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM1 (I2C-ATECC608) | SERCOM2 (USART) | SERCOM3 (SPI) | SERCOM5 (I2C-IO1 Xplained Pro) | TC0 | RTC | NVMCTRL | EVSYS | Systick | EIC | GPIO | ADC | PM | . | Harmony Core | Drivers . | SPI | LE SPI 4-line | Crypto | . | System Services . | Console | Time | Input | CryptoAuthlib . | Core | Trust&amp;Go | . | . | Graphics . | GFX Core Legato | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#modulestechnology-used"
  },"90": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LE00 Curiosity Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | MIKROE OLED C Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#hardware-used"
  },"91": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic321e_oled . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#softwaretools-used"
  },"92": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Hardware Setup:",
    "content": ". | Connect the MIKROE OLED C Click to the mikroBUS extension in the PIC32CM LE00 Curiosity Pro board | Connect the I/O1 Xplained Pro Extension Kit to the EXT2 in the PIC32CM LE00 Curiosity Pro board | Connect the jumper wires from PA22/PA23 for SERCCOM UART RX/TX to communicate with the client | Connect the PIC32CM LE00 Curiosity Pro Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . PIC32CM LE00 Client . Demo Setup . For complete “Secure IoT Gateway application” demo setup, refer to demo readme.md inside the project directory (pic32cm_ls60_secure_iot_gateway) . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#hardware-setup",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#hardware-setup"
  },"93": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM5164LE60100” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in Running the Demo section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#programming-hex-file"
  },"94": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client) in MPLAB X IDE | Open pic32cm_le00_securegateway_client as the main project. | Ensure “PIC32CM LE00 Curiosity Xpro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in Running the Demo section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#programmingdebugging-application-project"
  },"95": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Running the Demo: ",
    "content": ". | Once the device is programmed, the I/O1 Xplained Pro sensor values will be read and displayed in the MIKROE OLED C Click display board. | The client does not respond to the authentication request as it doesnt have an secure element to compute and respond | On the host side, the display on OLED C board indicates unsuccessful authentication | . Host MIKROE OLED C Click After Unsuccessful Authentication . Host Teraterm Output After Unsuccessful Authentication . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html"
  },"96": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Comments:",
    "content": ". | Getting Started with the PIC32CM LE00/LS00/LS60 Curiosity Pro Board | Reference Document: PIC32CM LS00/LS60 Security Reference Guide | This application demo builds and works out of box by following the instructions above in Running the Demo section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#comments",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#comments"
  },"97": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Revision:",
    "content": ". | v1.6.0 released demo application bad-client | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#revision",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html#revision"
  },"98": {
    "doc": "Secure IoT Gateway application bad-client",
    "title": "Secure IoT Gateway application bad-client",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client/readme.html"
  },"99": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Secure IoT Gateway application client on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#secure-iot-gateway-application-client-on-pic32cm-ls60-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#secure-iot-gateway-application-client-on-pic32cm-ls60-curiosity-pro-evaluation-kit"
  },"100": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html"
  },"101": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Description:",
    "content": "This project demonstrates the good-client side implementation of the secure IoT gateway application. The PIC32CM LS60 Client reads the sensor data from the temperature and light sensors on the I/O1 Xplained Pro board connected to the EXT2 Xpro connector. The client waits for the host to initiate the authentication process. Once the authentication is completed successfully, the sensor data is sent to the host through the USART. The MAC calculation and SERCOM transmission are placed securely in the secure region of the PIC32CM LS60. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#description"
  },"102": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Non-Secure SERCOM0 (SPI) | Non-Secure SERCOM3 (SPI) | Non-Secure SERCOM1 (I2C-ATECC608) | Non-Secure SERCOM5 (I2C-IO1 Xplained Pro) | Secure SERCOM2 (USART) | Non-Secure TC0 | Non-Secure DMAC | Non-Secure RTC | Non-Secure ADC | NVMCTRL | EVSYS | Systick | EIC | GPIO | PM | TC1 | . | Harmony Core | Drivers . | SPI | WINC | LE SPI 4-line | Crypto . | ATECC608 | . | . | System Services . | Time | Input | . | Graphics . | GFX Core Legato | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#modulestechnology-used"
  },"103": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LS60 Curiosity Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | MIKROE OLED C Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#hardware-used"
  },"104": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | For LS60 Client, Refer Manifest for Secure and NonSecure projects present in harmony-manifest-success.yml under the project folder firmware/pic32cm_ls60_cpro_sg_client/{Secure or NonSecure}/firmware/src/config/pic32cm_ls60 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | Trust Platform Design Suite v2.3.5 or above Click Here . | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#softwaretools-used"
  },"105": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Hardware Setup:",
    "content": ". | Connect the MIKROE OLED C Click to the mikroBUS extension in the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the I/O1 Xplained Pro Extension Kit to the EXT2 in the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the jumper wires from PA22/PA23 for SERCCOM UART RX/TX to communicate with the host | Connect the PIC32CM LS60 Curiosity Pro Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . PIC32CM LS60 Client . Demo Setup . For complete “Secure IoT Gateway application” demo setup, refer to demo readme.md inside the project directory (pic32cm_ls60_secure_iot_gateway) . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#hardware-setup",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#hardware-setup"
  },"106": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM5164LS60100” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in Running the Demo section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#programming-hex-file"
  },"107": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client) in MPLAB X IDE | Open both Secure and NonSecure projects inside the project group and set the NonSecure as the main project. | Ensure “PIC32CM LS60 Curiosity Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in Running the Demo section below | . Note: . | Windows OS has a maximum path length of 260 characters and a command-line limitation for Windows OS of 8191 characters. For details, see 6.5.5 Path, File and Folder Name Restrictions. | The TrustZone based project come with long path name, hence the project build may fail due to exceeding Windows maximum path length. | Workaround: Move the project folder to C:/ drive to reduce the project path length then open in MPLAB X IDE to build the project. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#programmingdebugging-application-project"
  },"108": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Running the Demo: ",
    "content": ". | Once the device is programmed, the I/O1 Xplained Pro Extension Kit sensor values will be read and displayed in the MIKROE OLED C Click display board. | The client will wait for the the random number from the host side. The MAC digest will be sent to the host | Once authentication success is acknowledged, the sensor values will be sent through the USART. | Successful authentication is ensured if the Host device gets the values displayed in the MIKROE OLED C Click | . Host MIKROE OLED C Click After Successful Authentication . Host Teraterm Output After Successful Authentication . AWS Cloud MQTT Messages After Successful Authentication . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html"
  },"109": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Comments:",
    "content": ". | Reference Document: PIC32CM LS00/LS60 Security Reference Guide | This application demo builds and works out of box by following the instructions above in Running the Demo section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#comments",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#comments"
  },"110": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Revision:",
    "content": ". | v1.6.0 released demo application good-client | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#revision",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html#revision"
  },"111": {
    "doc": "Secure IoT Gateway application good-client",
    "title": "Secure IoT Gateway application good-client",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client/readme.html"
  },"112": {
    "doc": "Serial Bridge Application",
    "title": "ATWINC1510 Firmware upgrade",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/utilities/readme.html#atwinc1510-firmware-upgrade",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/utilities/readme.html#atwinc1510-firmware-upgrade"
  },"113": {
    "doc": "Serial Bridge Application",
    "title": "Description:",
    "content": "The application’s functioning requires the ATWINC1500 module to have firmware compatible with the WiFi software stack running on the PIC32CMLS60 microcontroller(EV76R77A Development Kit). To enable this compatibility, the ATWINC1500 module is updated with the firmware compatible with WiFi software running in the latest released demo. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/utilities/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/utilities/readme.html#description"
  },"114": {
    "doc": "Serial Bridge Application",
    "title": "Running the utility",
    "content": ". | Connect the WINC1500-Xpro to EXT3 of the PIC32CMLS60-Cpro(EV76R77A Development Kit).Flash the serial_bridge_ls60.hex inside utilities/aws_iot_winc_provisioning_serial_bridge/hex . Programming hex file: . The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file in “aws_iot_provisioning_serial_bridge/hex” folder. | Select Device has “PIC32CM5164LS60100” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . | If LED0(Green) lights up it indicates the WINC has the latest firmware i.e Ver.19.7.7,In case of RED LED indication go ahead with below steps. | Download and extract pic32cmls60_aws_iot_winc_provisioning into utilities folder . | Open command prompt and navigate to “utilities/pic32cmls60_aws_iot_winc_provisioning” . The following command line will generate a device programming file winc1500_19.7.7.prog. | image_tool.exe -c winc1500_19.7.7/config.txt -o winc1500_19.7.7.prog -of prog . | The following command line will program a WINC1500 device via the serial port winc_programmer -p COMxx -d winc1500 -i winc1500_19.7.7.prog -if prog -w -r -pfw winc1500_19.7.7/firmware/programmer_firmware.bin . NOTE : Replace the xx with the device COM PORT in the above command and all other serial terminal application should be closed . | Wait till verify passed message comes up as shown below.After sucessful upgrade the Green LED (LED0) lights up. | . Revision: . | v1.6.0 released utility | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/utilities/readme.html#running-the-utility",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/utilities/readme.html#running-the-utility"
  },"115": {
    "doc": "Serial Bridge Application",
    "title": "Serial Bridge Application",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/utilities/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/utilities/readme.html"
  },"116": {
    "doc": "Secure IoT Gateway application host",
    "title": "Secure IoT Gateway application host on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#secure-iot-gateway-application-host-on-pic32cm-ls60-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#secure-iot-gateway-application-host-on-pic32cm-ls60-curiosity-pro-evaluation-kit"
  },"117": {
    "doc": "Secure IoT Gateway application host",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html"
  },"118": {
    "doc": "Secure IoT Gateway application host",
    "title": "Description:",
    "content": "This project demonstrates the host side implementation of the secure IoT gateway application. The host project initiates the symmetric authentication process of the client connected to it. The host also connects to the AWS IoT cloud. Once the SW0 button on the host device is pressed, the random number from the inbuilt ATECC608B is sent across the USART pins to the client and awaits the result. Once the client is authenticated, the sensor data is received and displayed on the MIKROE OLED C Click board. The data is also published to the AWS IoT Core at timely intervals. The LED0 on the host toggles each time the data is published to the cloud. The host’s connection to the PIC32CM LS60 client would be successful as the authentication (through the ATECC608B) would be successful. However, the PIC32CM LE00 client would fail the authentication process as there is no inbuilt ATECC608B. If the authentication fails, the data is not displayed on the host side or published to the cloud. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#description"
  },"119": {
    "doc": "Secure IoT Gateway application host",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Non-Secure SERCOM0 (SPI) | Non-Secure SERCOM3 (SPI) | Non-Secure SERCOM1 (I2C) | Non-Secure SERCOM2 (USART) | Non-Secure SERCOM5 (System Console) | Non-Secure TC2 | Non-Secure DMAC | Non-Secure RTC | NVMCTRL | EVSYS | Systick | EIC | GPIO | PM | . | BSP . | PIC32 CM LS60 Curiosity Pro | . | Harmony Core | Drivers . | SPI | WINC | LE SPI 4-line | Crypto | . | System Services . | Console | Time | Input | CryptoAuthlib . | Core | Trust&amp;Go | . | . | Graphics . | GFX Core Legato | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#modulestechnology-used"
  },"120": {
    "doc": "Secure IoT Gateway application host",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LS60 Curiosity Pro Evaluation Kit | ATWINC1500-XPRO | MIKROE OLED C Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#hardware-used"
  },"121": {
    "doc": "Secure IoT Gateway application host",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | For Host, Refer Manifest for Secure and NonSecure projects present in harmony-manifest-success.yml under the project folder firmware/pic32cm_ls60_cpro_sg_host/{Secure or NonSecure}/firmware/src/config/pic32cm_ls60 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | Trust Platform Design Suite v2.3.5 or above Click Here . | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#softwaretools-used"
  },"122": {
    "doc": "Secure IoT Gateway application host",
    "title": "AWS Account Setup",
    "content": "Click here for details . In order to run this application an AWS account is required. This section describes the steps required to obtain and configure an AWS account for the demo. Amazon Web Services (AWS) provides computing services for a fee. Some are offered for free on a trial or small-scale basis. By signing up for your own AWS account, you are establishing an account to gain access to a wide range of computing services. Think of your AWS account as your root account to AWS services. It is very powerful and gives you complete access. Be sure to protect your username and password. You control access to your AWS account by creating individual users and groups using the Identity and Access Management (IAM) Console. From the IAM Console, you also assign policies (permissions) to the group from IAM Console. Create your own AWS account . | Create AWS account . | Go to Amazon AWS and follow instructions to create your own AWS account | Additional details can be found at Create and activate a new AWS account | . | Secure root account with MFA (multi-factor authentication) . | This is an important step to better secure your root account against attackers. Anyone logging in not only needs to know the password, but also a constantly changing code generated by an MFA device. | AWS recommends a number of MFA device options at the link Multi-Factor Authentication (MFA) for IAM | The quickest solution is a virtual MFA device running on a phone. These apps provide the ability to scan the QR code AWS will generate to set up the MFA device. | Return to Amazon AWS and click the Sign In to the Console. | If it asks for an IAM user name and password, select the Sign-in using root account credentials link. | Enter the email and password for your AWS account. | Under Find Services search for IAM and select it to bring up the Identity and Access Management options. | Click on Activate MFA (Multi-factor Authentication) on your root account | . | . | Create an admin IAM user AWS best practices recommend not using your root account for standard administrative tasks, but to create a special admin user for those tasks. See lock-away-credentials . | Follow the instructions at Create an administrative user for creating an admin user. | Enable MFA (multi-factor authentication) for the admin user. See Require multi-factor authentication (MFA) . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#aws-account-setup",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#aws-account-setup"
  },"123": {
    "doc": "Secure IoT Gateway application host",
    "title": "Configuring the account using CloudFormation Templates",
    "content": "The usage of a custom PKI with TrustFLEX devices uses the Just-In-Time Registration (JITR) feature of AWS IoT Core. This feature requires a number of resources setup with an AWS account to work. The creation of these resources is automated through the AWS CloudFormation service. | Sign into the AWS console Amazon AWS using the admin user created in the previous section. | Change to region to US East (Ohio) (a.k.a. us-east-2). This is done from a dropdown in the top right of the console webpage after logging in. | Under Find Services search for CloudFormation and select it to bring up that service. | Click Create Stack button. | Select Upload a template file from the page of the stack creation. | Click Choose file and upload the aws-zero-touch-full-setup.yaml file. Note, if running from a China region, you’ll need to select the aws-zero-touch-full-setup-cn.yaml instead. These files are available in ~/.trustplatform folder. | Click Next to move on to the stack details. | Enter TrustFLEX as the stack name. Actual name isn’t important, just has to be unique. | Enter a password for the user that will be created to run the demo under UserPassword. | Click Next to move on to the stack options. Nothing needs to be changed here. | Click Next to move on to the stack review. | Check the acknowledgement box regarding IAM resources at the bottom of the page. | Click Create Stack to start the resource creation. | Wait until the stack creation completes. This can take a few minutes. Once done, the stack your created will show as CREATE_COMPLETE. | Save demo credentials. Click the Outputs tab for the stack to see the credentials to be saved. | Save the credentials to aws_credentials.yaml file in ~/.trustplatform folder. | . AWS Cloud IoT Provisioning Guide . If this is the first time you are building/running this version of the demo, you must complete this step before proceeding further. Otherwise, you may skip this step. | Install Trust Platform Design Suite version 2 TPDSv2 . | Launch Trust Platform Design Suite v2 from windows search bar, a window launches as shown below . | Select “Trust Platform Design Suite” in webviews and Click on Usecases . | In Select Security Solution, Under Use Cases select AWS IoT Authentication . | Scroll Down and in Available solution by provisioning flow select AWS IoT Authentication under PIC32CMLS60 . | A Usecase gets launched. click on PIC32CMLS60_AWSIoTAuth-TFLEX from the Usescases . | AWS Cloud Connect – IoT Authentication - PIC32CMLS60 page launches as shown below . | Scroll down and select PIC32CMLS60 CPro Development board if not selected . | Connect PIC32CMLS60 CPro Development Board to PC running Trust Platform Design Suite . | Ensure MPLAB X Path is set in File -&gt; Preference under System Settings in TPDS. This helps to program the provisioner kit firmware to the PIC32CMLS60 CPro Development Board . | Scroll down to transaction diagram . | Click on Icon 1 and wait till a green right mark appears. | Sequentially Click on Icon 2, 3 and 4 . | Note the output in the output window on the right side . | Once the usecase steps are executed successfully, click on C Source Files and copy the aws_config.h file to the ls60_host folder(pic32cm_ls60_secure_iot_gateway\\firmware\\\\pic32cm_ls60_cpro_sg_host). | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#configuring-the-account-using-cloudformation-templates",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#configuring-the-account-using-cloudformation-templates"
  },"124": {
    "doc": "Secure IoT Gateway application host",
    "title": "   ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#WINC_Firmware_upgrade",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#WINC_Firmware_upgrade"
  },"125": {
    "doc": "Secure IoT Gateway application host",
    "title": " ATWINC1510 Wi-Fi Controller Module Firmware and AWS Root Certificates Upgrade Guide ",
    "content": "Details . | Navigate to the utilities folder inside the project directory (pic32cm_ls60_secure_iot_gateway\\firmware\\\\pic32cm_ls60_cpro_sg_host) | . | Follow the steps in readme.md file inside the folder to do the WINC firmware upgrade. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html"
  },"126": {
    "doc": "Secure IoT Gateway application host",
    "title": "Hardware Setup:",
    "content": ". | Connect the MIKROE OLED C Click to the mikroBUS extension in the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the ATWINC1500-XPRO to the EXT3 of the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the jumper wires from PA22/PA23 for SERCOM UART RX/TX to communicate with the client | Connect the PIC32CM LS60 Curiosity Pro Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . PIC32CM LS60 Host . Demo Setup . For complete “Secure IoT Gateway application” demo setup, refer to demo readme.md inside the project directory (pic32cm_ls60_secure_iot_gateway) . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#hardware-setup",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#hardware-setup"
  },"127": {
    "doc": "Secure IoT Gateway application host",
    "title": "Prerequisites ",
    "content": ". | Ensure PIC32CM LS60 host is provisioned on AWS cloud as mentioned under the heading “AWS Cloud IoT Provisioning Guide” | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html"
  },"128": {
    "doc": "Secure IoT Gateway application host",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Perform Prerequisites steps mentioned above, if not done already. | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM5164LS60100” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in Running the Demo section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#programming-hex-file"
  },"129": {
    "doc": "Secure IoT Gateway application host",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host) in MPLAB X IDE | Open both Secure and NonSecure project inside the project group and set the cloud_connect_NonSecure as the main project. | Ensure “PIC32CM LS60 Curiosity Xpro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in Running the Demo section below | . Note: . | Windows OS has a maximum path length of 260 characters and a command-line limitation for Windows OS of 8191 characters. For details, see 6.5.5 Path, File and Folder Name Restrictions. | The TrustZone based project come with long path name, hence the project build may fail due to exceeding Windows maximum path length. | Workaround: Move the project folder to C:/ drive to reduce the project path length then open in MPLAB X IDE to build the project. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#programmingdebugging-application-project"
  },"130": {
    "doc": "Secure IoT Gateway application host",
    "title": "Wi-Fi configuration through CLI: ",
    "content": ". | Open a terminal application on the host PC for the virtual COM port of the connected PIC32CMLS60 Curiossity pro evaluation kit, with 115200-8-None-1 settings. | Just enter the below command to set the Wi-Fi credentials. wifi &lt; SSID &gt;,&lt; PASSWORD &gt;,&lt; SECURITY TYPE &gt; example : wifi MCHP_test_,Asdfghjk,2 . Note:No need of repeating this step every time while running the demo, Device remembers last used WiFi credentials and try to connect to it. If WiFi credentials changes, this step should be performed. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html"
  },"131": {
    "doc": "Secure IoT Gateway application host",
    "title": "Running the Demo: ",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | The MIKROE OLED C Click board doesn’t display any value yet. | The **LED(LED1) will be on if there is no active WiFi connection. Once the certificate verification is done, follw the steps in section Wi-Fi configuration through CLI to enter the WiFi credentials. | Once WiFi and MQTT connection is successful, the LED1 will be Off and LED0 will be On | Press SW0 on the PIC32CM LS60 Curiosity Pro Evaluation Kit to start the authentication process | Once authentication is successful, the MIKROE OLED C Click will display the sensor values and the cloud will be updated with the sensor values periodically | An LED (LED0) on the PIC32CM LS60 Curiosity Pro Evaluation Kit toggles on every time the sensor values are published | The WINC1500 Initialization messages and MQTT connection details would be displayed in the terminal | . Host MIKROE OLED C Click After Successful Authentication . Host Teraterm Output After Successful Authentication . AWS Cloud MQTT Messages After Successful Authentication . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html"
  },"132": {
    "doc": "Secure IoT Gateway application host",
    "title": "Comments:",
    "content": ". | Reference Document: PIC32CM LS00/LS60 Security Reference Guide | This application demo builds and works out of box by following the instructions above in Running the Demo section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#comments",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#comments"
  },"133": {
    "doc": "Secure IoT Gateway application host",
    "title": "Revision:",
    "content": ". | v1.6.0 released demo application host | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#revision",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html#revision"
  },"134": {
    "doc": "Secure IoT Gateway application host",
    "title": "Secure IoT Gateway application host",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host/readme.html"
  },"135": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#secure-iot-gateway-on-pic32cm-ls60-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#secure-iot-gateway-on-pic32cm-ls60-curiosity-pro-evaluation-kit"
  },"136": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"137": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Description",
    "content": "This application demonstrates the anti-cloning feature on the PIC32CM LS60 microcontroller (MCU). The application has three projects pertaining to Secure and Non-Secure modes of PIC32CM LS60 that work between the Host and Client devices (PIC32CM LS60/LE00) and offers security isolation between the trusted and the non-trusted resources in the device. | The application includes host and client projects. | PIC32CM LS60 Host application: . | The host project initiates the symmetric authentication process of the client connected to it. The host also connects to the AWS IoT cloud. Once the SW0 button on the host device is pressed, the random number from the inbuilt ATECC608B is sent across the USART pins to the client and awaits the result. Once the client is authenticated, the sensor data is received and displayed on the MIKROE OLED C Click board. The data is also published to the AWS IoT Core at timely intervals. The LED0 on the host toggles each time the data is published to the cloud. The host’s connection to the PIC32CM LS60 client would be successful as the authentication (through the ATECC608B) would be successful. However, the PIC32CM LE00 client would fail the authentication process as there is no inbuilt ATECC608B. If the authentication fails, the data is not displayed on the host side or published to the cloud. | . | PIC32CM LS60 Client application: . | The PIC32CM LS60 Client reads the sensor data from the temperature and light sensors on the I/O1 Xplained Pro board connected to the EXT2 Xpro connector. The client waits for the host to initiate the authentication process. Once the authentication is completed successfully, the sensor data is sent to the host through the USART. The MAC calculation and SERCOM transmission are placed securely in the secure region of the PIC32CM LS60. | . | PIC32CM LE00 Client application: . | The PIC32CM LE00 Client reads the sensor data from the temperature and light sensors on the I/O1 Xplained Pro board connected to the EXT2 XPRO connector. The client waits for the host to initiate the authentication process. Since the authentication fails, the sensor data is not sent across the host through USART. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#description"
  },"138": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Modules/Technology Used:",
    "content": ". | For PIC32CM LS60 Host Click Here | For PIC32CM LS60 Client Click Here | For PIC32CM LE00 Client Click Here | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#modulestechnology-used"
  },"139": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LS60 Curiosity Pro Evaluation Kit | PIC32CM LE00 Curiosity Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | ATWINC1500-XPRO | MIKROE OLED C Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#hardware-used"
  },"140": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | For Host, Refer Manifest for Secure and NonSecure projects present in harmony-manifest-success.yml under the project folder firmware/pic32cm_ls60_cpro_sg_host/{Secure or NonSecure}/firmware/src/config/pic32cm_ls60 . | For LS60 Client, Refer Manifest for Secure and NonSecure projects present in harmony-manifest-success.yml under the project folder firmware/pic32cm_ls60_cpro_sg_host/{Secure or NonSecure}/firmware/src/config/pic32cm_ls60 . | For LE00 Client, Refer Manifest for project present in harmony-manifest-success.yml under the project folder firmware/pic32cm_le00_cpro_sg_client/firmware/src/config/pic32cm_le00 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | Trust Platform Design Suite v2.3.5 or above Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#softwaretools-used"
  },"141": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Hardware Setup 1: ",
    "content": "PIC32CM LS60 Host to PIC32CM LS60 Client . PIC32CM LS60 Host . | Connect the MIKROE OLED C Click to the mikroBUS extension in the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the ATWINC1500-XPRO to the EXT3 of the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the jumper wires from PA22/PA23 for SERCOM UART RX/TX to communicate with the client | Connect the PIC32CM LS60 Curiosity Pro Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | The PIC32CM LS60 Curiosity Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging | . PIC32CM LS60 Client . | Connect the MIKROE OLED C Click to the mikroBUS extension in the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the I/O1 Xplained Pro Extension Kit to the EXT2 in the PIC32CM LS60 Curiosity Pro Evaluation Kit | Connect the jumper wires from PA22/PA23 for SERCCOM UART RX/TX to communicate with the host | Connect the PIC32CM LS60 Curiosity Pro Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . Demo Setup . Note: Connect the USART RX/TX of the Host to the USART TX/RX of the client . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"142": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Hardware Setup 2: ",
    "content": "PIC32CM LS60 Host to PIC32CM LE00 Client . PIC32CM LS60 Host . | Same setup as mentioned in PIC32CM LS60 Host under Harware Setup 1 | . PIC32CM LE00 Client . | Connect the MIKROE OLED C Click to the mikroBUS extension in the PIC32CM LE00 Curiosity Pro Evaluation Kit | Connect the I/O1 Xplained Pro Extension Kit to the EXT2 in the PIC32CM LE00 Curiosity Pro Evaluation Kit | Connect the jumper wires from PA22/PA23 for SERCCOM UART RX/TX to communicate with the host | Connect the PIC32CM LE00 Curiosity Pro Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . Demo Setup . Note: Connect the USART RX/TX of the Host to the USART TX/RX of the client . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"143": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Prerequisites ",
    "content": ". | Ensure PIC32CM LS60 host is provisioned on AWS cloud as mentioned under the heading “AWS Cloud IoT Provisioning Guide” in the PIC32CM LS60 Host project’s readme.md. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"144": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Programming Methods:",
    "content": ". | The device can be programmed in two ways . | Refer Method 1: Programming using the prebuilt hex file. | Refer Method 2: Programming by building the application project. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#programming-methods",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#programming-methods"
  },"145": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Method 1: Steps for Programming prebuilt hex file: ",
    "content": "Steps to program the hex file . | Perform Prerequisites steps mentioned above, if not done already. | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM5164LS60100” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in Running the Demo under PIC32CM LS60 Host section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"146": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Method 2: Steps for Programming by building the application project:",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"147": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Programming/Debugging Application Project:",
    "content": "PIC32CM LS60 Host . | Open the project (pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_host) in MPLAB X IDE | Open both Secure and NonSecure project inside the project group and set the NonSecure as the main project. | Ensure “PIC32CM LS60 Curiosity Xpro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in Running the Demo under PIC32CM LS60 Host section below | . PIC32CM LS60 Client . | Open the project (pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_ls60_cpro_sg_client) in MPLAB X IDE | Open both Secure and NonSecure project inside the project group and set the NonSecure as the main project | Ensure “PIC32CM LS60 Curiosity Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in Running the Demo under PIC32CM LS60 Client section below | . PIC32CM LE00 Client . | Open the project (pic32cm_ls60_secure_iot_gateway/firmware/pic32cm_le00_cpro_sg_client) in MPLAB X IDE | Ensure “PIC32CM LE00 Curiosity Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in Running the Demo under PIC32CM LE00 Client section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#programmingdebugging-application-project"
  },"148": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Wi-Fi configuration through CLI: ",
    "content": ". | Open a terminal application on the host PC for the virtual COM port of the connected PIC32CMLS60 Curiossity pro evaluation kit, with 115200-8-None-1 settings. | Just enter the below command to set the Wi-Fi credentials. wifi &lt; SSID &gt;,&lt; PASSWORD &gt;,&lt; SECURITY TYPE &gt; example : wifi MCHP_test_,Asdfghjk,2 . Note:No need of repeating this step every time while running the demo, Device remembers last used WiFi credentials and try to connect to it. If WiFi credentials changes, this step should be performed. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"149": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Running the Demo: ",
    "content": "PIC32CM LS60 Host . | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | The MIKROE OLED C Click board doesn’t display any value yet | Press SW0 on the PIC32CM LS60 Curiosity Pro Evaluation Kit to start the authentication process | The **LED(LED1) will be on if there is no active WiFi connection. Once the certificate verification is done, follw the steps in section Wi-Fi configuration through CLI to enter the WiFi credentials. | Once WiFi and MQTT connection is successful, the LED1 will be Off and LED0 will be On | Once authentication is successful, the MIKROE OLED C Click will display the sensor values and the cloud will be updated with the sensor values periodically | An LED (LED0) on the PIC32CM LS60 Curiosity Pro Evaluation Kit toggles every time the sensor values are published | The WINC1500 Initialization messages and MQTT connection details would be displayed in the terminal | . Host MIKROE OLED C Click Before Authentication . PIC32CM LS60 Client . | Perform Programming/Debugging Application Project steps under PIC32CM LS60 Client mentioned above, if not done already | After the device is successfuly programmed and authenticated, the display on OLED C board at the Host indicates successful authentication as shown below | . Host MIKROE OLED C Click After Successful Authentication . Host Teraterm Output After Successful Authentication . AWS Cloud MQTT Messages After Successful Authentication . PIC32CM LE00 Client . | Perform Programming/Debugging Application Project steps under PIC32CM LE00 Client mentioned above, if not done already | After the device is successfuly programmed and authentication procedure completes, the display on OLED C board at Host indicates unsuccessful authentication as shown below | . Host MIKROE OLED C Click After Unsuccessful Authentication . Host Teraterm Output After Unsuccessful Authentication . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"150": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Comments: ",
    "content": ". | Getting Started with the PIC32CM LE00/LS60/LS60 Curiosity Pro Board | Dual Developer Application Development Use Case with TrustZone on SAM L11 Using MPLAB Harmony v3 . | Note: Though this technical brief is on SAM L11 MCUs, the TrustZone concepts it describes also applies to PIC32CM MC LS60 MCUs. | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"151": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#revision",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html#revision"
  },"152": {
    "doc": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/pic32cm_ls60_secure_iot_gateway/readme.html"
  },"153": {
    "doc": "PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "title": "PIC32CM LS60 Curiosity Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32CM LS60 Curiosity Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | TrustZone Getting Started on PIC32CM LS60 Curiosity Pro Evaluation Kit | Click Here | . | 2 | Secure Boot on PIC32CM LS60 Curiosity Pro Evaluation Kit | Click Here | . | 3 | AWS Cloud IoT Core Application on PIC32CM LS60 Curiosity Pro Evaluation Kit | Click Here | . | 4 | Secure IoT Gateway on PIC32CM LS60 Curiosity Pro Evaluation Kit | Click Here | . More Application Demos . For more application demos on PIC32CM LS60 Curiosity Pro Evaluation Kit and other Development Boards/Kits having the same part number (PIC32CM5164LS60100) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_curiosity_pro/readme.html",
    "relUrl": "/apps/pic32cm_ls60_curiosity_pro/readme.html"
  },"154": {
    "doc": "Smart Lock",
    "title": "Smart Lock Application on PIC32CM LS60 Smart Lock Reference Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#smart-lock-application-on-pic32cm-ls60-smart-lock-reference-board",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#smart-lock-application-on-pic32cm-ls60-smart-lock-reference-board"
  },"155": {
    "doc": "Smart Lock",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html"
  },"156": {
    "doc": "Smart Lock",
    "title": "Description",
    "content": "The application showcases key-less secure access control and monitoring of a deadbolt through multiple methods: . | Capacitive Touch keypad . | Multiple unique user passkeys | . | Smartphone App . | Secure bluetooth control | Remote access control using WiFi with AWS cloud | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#description",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#description"
  },"157": {
    "doc": "Smart Lock",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | ADC | EIC | EVSYS | NVMCTRL | PTC | RTC | SERCOM (SPI) | SERCOM (USART) | SERCOM (I2C) | TC | . | Drivers . | ATECC608 | . | System service . | TIME | . | Tools . | Secure STDIO | . | Libraries . | Touch Library | Crypto Authentication Library | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#modulestechnology-used"
  },"158": {
    "doc": "Smart Lock",
    "title": "Hardware Used:",
    "content": ". | PIC32CM LS60 Smart Lock Reference Board(1) | WFI32-IoT Development Board: EV36W50A(2) | BM70 Compact Demo Board: BM-70-CDB(2) | Power and Motor Control Board(1) | Four AA 1.5V alkaline batteries(2) | QT3 XPLAINED PRO EXTENSION KIT: ATQT3-XPRO(1) | Schlage Deadbolt with motor and custom printed interface for limit switch(1) | . Note: . 1) Contact Microchip technical support or local Microchip FAE for purchasing the Smart Door Lock kit bundle 2) Not provided as part of the Smart Door Lock kit bundle. Should be procured separately (through Microchip Direct or any thirdparty vendor) . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#hardware-used"
  },"159": {
    "doc": "Smart Lock",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#softwaretools-used"
  },"160": {
    "doc": "Smart Lock",
    "title": "Setup:",
    "content": "The demo can be run in three different modes: . | Standalone Touch keypad entry | Bluetooth control using BM70 Compact Demo Board and Smartphone application | WiFi control using WFI32-IoT Development Board and AWS cloud | . Standalone Touch keypad entry . Connect the QT3 Xplained pro, Power board and the deadbolt to the PIC32CM LS60 Smart Lock Reference Board as seen below: . On powering the kit, the Smart Door Lock becomes functional and waits for the user input through the Touch Keypad to control the entry access. This kit allows up to five user-authenticated entries through the door lock, and each user has a user ID (1, 2, 3 , 4 &amp; 5). Each user would require a passkey to enter through the Touch Keypad to open the lock. User Entry/Passkey Authentication . 1) Select a user ID (press any number from 2 to 5)(1) and press “#”. 2) Enter the 5-digit passkey(2) corresponding to the selected user and then press “#”. 3) If the passkey is valid, the door opens. 4) The door automatically relocks after 10 seconds. Note: . (1) User ID 1 is for the temporary passkey generated using the Mobile app. This user ID cannot be used without provisioning the mobile app (2) By default, all users (2, 3, 4 and 5) have the same passkey - ‘12345’ . Passkey Modification . The passkey of each user can be altered through the touch keypad using the steps outlined below. | Long press “#” button until all the touch LEDs blink in the Touch Keypad. | Enter the corresponding user ID which needs to be changed and press “#” (1) | Enter the current passkey, and press ‘#’ to authenticate the user (2) | Once authenticated, enter the new passkey and press “#” | To reconfirm, enter the new passkey again and press “#” | This configures the lock with the new Passkey | . Note: . (1) User ID 1 is for the temporary passkey generated using the Mobile app. (2) If this is the first-time configuration, enter the default passkey (12345) for validation and press “#” • Activate the touchpad using your palm. • Only 5-digit passcodes can be stored, but any number of digits can be entered on the touch keypad; only the final 5 before pressing ‘#’ will be accepted. Bluetooth and WiFi control using Smartphone . A custom Android application must be installed in the smartphone to control the door lock module. Click here to download the .apk file for the app. After installing the app, it needs to be provisioned so that the mobile and the door lock device can be securely connected. Create a. Create a Microchip Technical Support case for provisioning your smartphone with your bluetooth module. Add the following details to the support case: Case Reason: Hardware/Firmware Support Subject: Smart Door Lock: Primary provisioning token request Primary Target Device: PIC32CM5164LS60064 Case Description: &lt; share BLE MAC ID of your BM70 board &gt; . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#setup",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#setup"
  },"161": {
    "doc": "Smart Lock",
    "title": "Programming hex file:",
    "content": "Connect Atmel ICE or PICKIT4 or any other programmer that supports SWD programming to the J1 header on the PIC32CM LS60 Smart Lock Reference Board. The pre-built hex file can then be programmed by following the below steps: . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device as “PIC32CM5164LS60064” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#programming-hex-file"
  },"162": {
    "doc": "Smart Lock",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cm_ls60_rd_smart_lock/NonSecure/firmware/pic32cm_ls60_sdl_NonSecure.X) in MPLAB X IDE | Ensure proper tool is selected to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Note: . | Windows OS has a maximum path length of 260 characters and a command-line limitation for Windows OS of 8191 characters. For details, see 6.5.5 Path, File and Folder Name Restrictions. | The TrustZone based project come with long path name, hence the project build may fail due to exceeding Windows maximum path length. | Workaround: Move the project folder to C:/ drive to reduce the project path length then open in MPLAB X IDE to build the project. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#programmingdebugging-application-project"
  },"163": {
    "doc": "Smart Lock",
    "title": "Running the Demo:",
    "content": ". | Upon completion of programming, you should see the QT3 keypad light up and go back to sleep | Activate the touchpad using your palm | Select a user and enter the default passkey ‘12345’ to open the deadbolt . | . Note: This shows a custom passkey being entered. By default all users (2, 3, 4 and 5) have the same passkey - ‘12345’ . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#running-the-demo"
  },"164": {
    "doc": "Smart Lock",
    "title": "Reference:",
    "content": ". | For more details on the application usage, functionality and other details, refer to the PIC32CM LS60 Smart Door Lock User Guide | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#reference",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#reference"
  },"165": {
    "doc": "Smart Lock",
    "title": "Comments: ",
    "content": ". | Getting Started with the PIC32CM LE00/LS60/LS60 Curiosity Pro Board | Dual Developer Application Development Use Case with TrustZone on SAM L11 Using MPLAB Harmony v3 . | Note: Though this technical brief is on SAM L11 MCUs, the TrustZone concepts it describes also applies to PIC32CM MC and PIC32CM LS60 MCUs. | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html"
  },"166": {
    "doc": "Smart Lock",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#revision",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html#revision"
  },"167": {
    "doc": "Smart Lock",
    "title": "Smart Lock",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html",
    "relUrl": "/apps/pic32cm_ls60_rd/pic32cm_ls60_rd_smart_lock/readme.html"
  },"168": {
    "doc": "PIC32CM LS60 Smart Lock Reference Board",
    "title": "PIC32CM LS60 Smart Lock Reference Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32CM LS60 Smart Lock Reference Board. | SI No | Demo Name | Download Link | . | 1 | Smart Lock Application on PIC32CM LS60 | Click Here | . More Application Demos . For more application demos on PIC32CM LS60 Smart Lock Reference Board and other Development Boards/Kits having the same part number (PIC32CM5164LS60064) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_ls60_rd/readme.html",
    "relUrl": "/apps/pic32cm_ls60_rd/readme.html"
  },"169": {
    "doc": "Getting Started",
    "title": "Getting Started Application on PIC32CM MC00 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#getting-started-application-on-pic32cm-mc00-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#getting-started-application-on-pic32cm-mc00-curiosity-nano-evaluation-kit"
  },"170": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html"
  },"171": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "This application demonstrates an LED (LED0) toggle on a timeout basis and prints the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW0 on the PIC32CM MC00 Curiosity Nano Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#description",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#description"
  },"172": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | RTC | GPIO | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#modulestechnology-used"
  },"173": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | PIC32CM MC00 Curiosity Nano Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#hardware-used"
  },"174": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#softwaretools-used"
  },"175": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Connect the PIC32CM MC00 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#setup",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#setup"
  },"176": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM1216MC00032” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#programming-hex-file"
  },"177": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cmmc_getting_started/firmware/pic32cm_mc_cnano.X) in MPLAB X IDE | Ensure “PIC32CM MC00 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#programmingdebugging-application-project"
  },"178": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | An LED (LED0) on the PIC32CM MC00 Curiosity Nano Evaluation Kit toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds | And also, the LED toggling rate is displayed on the serial terminal | Press the switch SW0 on the PIC32CM MC00 Curiosity Nano Evaluation Kit to change the default periodicity of the timeout to one second | Every subsequent pressing of the switch SW0 on the PIC32CM MC00 Curiosity Nano Evaluation Kit changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#running-the-demo"
  },"179": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#comments"
  },"180": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Updated the hardware setup image, Added MCC support, Regenerated and tested application. | v1.3.0 regenerated and tested the application | v1.2.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html#revision"
  },"181": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_getting_started/readme.html"
  },"182": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Smart Appliance Control on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#smart-appliance-control-on-pic32cm-mc00-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#smart-appliance-control-on-pic32cm-mc00-curiosity-nano-evaluation-kit"
  },"183": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html"
  },"184": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html"
  },"185": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Description:",
    "content": "This application demonstrates a smart control fan using BLE. The application connects through BM71 XPRO to Microchip Bluetooth Data (MBD) android mobile application via BLE (Bluetooth Low Energy). The BM71 XPRO uses a transparent service for data exchange with the android MBD mobile application. Based on the mobile application’s commands, the fan connected to Fan click via the I2C interface is controlled. The BLE commands has two different modes, one mode is temperature based fan control and another is BLE based command. The BM71 XPRO interfaces to the MCU over SERCOM - USART interface. A fan is controlled by following below commands: . | TEMP_CTRL - Fan will be ran based on the environmental temperature. When the user chooses temperature based fan control mode, application reads the temperature values from a weather sensor displays on Eink display and controls a DC fan as mentioned below. a. Temperature between 18 (64 F) to 25 (77 F) degree Celsius, the fan rotates at LOW speed. b. Temperature between 26 (78 F) to 30 (86 F) degree Celsius, the fan rotates at MEDIUM speed. c. Temperature is greater than 30 degree Celsius (86 F), the fan rotates at HIGH speed. d. Temperature is less than 18 (64 F), the fan is switched OFF. The application also prints the temperature values on a serial terminal using USART peripheral library | User can control the fan from the BLE based MBD app running on the connected smartphone by sending below commands. a. BLE_CTRL:FAN_ON - Turns “On” the fan with LOW speed. b. BLE_CTRL:FAN_OFF - Turns “Off” the fan. c. BLE_CTRL:FAN_LOW - Runs the fan with LOW speed. d. BLE_CTRL:FAN_MID - Runs the fan with MEDIUM speed. e. BLE_CTRL:FAN_HIGH - Runs the fan with HIGH speed. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#description",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#description"
  },"186": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SYS Time | SYSTICK | Timer | SERCOM(I2C) | SERCOM(USART) | SERCOM(SPI) | EIC | . | Driver Modules . | BM71 Driver | . | STDIO Library | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#modulestechnology-used"
  },"187": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Hardware Used:",
    "content": ". | PIC32CM MC00 Curiosity Nano Evaluation Kit | Curiosity Nano Base for click boards | BM71-XPRO | Fan Click | WEATHER CLICK | MikroElektronika Eink Click Without Display | MikroElektronika E-Paper display 2,9” 296x128 dots display | 5V DC Fan | Lipo Rechargeable Battery | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#hardware-used"
  },"188": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cm_mc00_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Install Microchip Bluetooth Data Android App in your Android mobile or | Install Microchip Bluetooth Data iOS App in your iOS mobile | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#softwaretools-used"
  },"189": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Adding private characteristics to BM71:",
    "content": "Hardware Setup . | In BM71-XPRO, Change jumper J2 to select USB | In BM71-XPRO, Configure DIP switch SW2 with the below configurations . | All DIP switch ON | . | Power the BM71-XPRO from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J1) | Perform reset by pressing switch SW1 on BM71-XPRO and check blue LD1 is ON | . Programming private characteristics . | Download the manual configuration tool from BM70/71 Firmware &amp; Software Tools v1.11 | Extract and locate configuration tool from below location - Your_downloaded_folder /Firmware &amp; Software Tools v1.11/ConfigurationTool/IS187x_102_BLEDK3v1.11_UI1.00 | Double click on “IS187x_102_BLEDK3v1.11_UI1.00.exe “ | Click on “Load” button and select “Load Text File” | Select “IS1871SF_102_BLEDK3v1.11_UI v1.00(BM71)_default.txt” from your_downloaded_folder \\\\Firmware &amp; Software Tools v1.11\\\\ConfigurationTool\\\\IS187x_102_BLEDK3v1.11_UI1.00 | Click on “EDIT” option . | Select “0x01: BM71” in BLEDK and click ok . | Update the Operation Mode Setting from Auto Pattern to Manual Pattern . | Confirm OK to disable the “Flow Control and LE Connection Parameter Update Request” . | Click on “Finish” . | Click on “Write” . | Select respective COM Port and set baud rate to 115200 then click on Write . | Click on Yes to successfully update the private characteristics on to BM71 module . | After successful update, click OK and remove the power from BM71-XPRO and change jumper J2 to select EXT . | Turn OFF DIP 1 switch | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#adding-private-characteristics-to-bm71",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#adding-private-characteristics-to-bm71"
  },"190": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Setup:",
    "content": ". | Mount PIC32CM MC00 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Connect the BM71-XPRO on to EXT 1 connector of Curiosity Nano Base board | Mount the eINK click and Eink E-Paper display 2,9” 296x128 dots display on the mikro bus 1 connector of Curiosity Nano Base board | Mount Fan click board on mikro bus click 2 connector of Curiosity Nano Base and connect 4 fan wires to the fan click | Mount Weather Click board on mikroBUS click 3 connector of Curiosity Nano Base | Connect Li-ion or Lipo Battery on J1 connector and make sure SW1 slider switch is moved to Battery on position in Curiosity Nano Base board | Connect the PIC32CM MC00 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#setup",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#setup"
  },"191": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM1216MC00032” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#programming-hex-file"
  },"192": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cmmc_smart_appliance_control/firmware/pic32cm_mc_cnano.X) in MPLAB X IDE | Ensure “PIC32CM MC00 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#programmingdebugging-application-project"
  },"193": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Running the Demo:",
    "content": "Before proceeding, install the Microchip Bluetooth Data android app in an Android Smartphone. | Enable Bluetooth and location from Smartphone settings | Perform reset by unplugging and re-plugging the power cable of PIC32CM MC00 Curiosity Nano. | Open the “Microchip Bluetooth Data (MBD)” android app from your smartphone. and tap on “BLE UART” icon on the dashboard. If prompted, allow the application to turn on Bluetooth. | Now, scan for Bluetooth devices by tapping “BM70” -&gt; “SCAN” -&gt; “SCAN” options on the MBD APP. | . | The BM71 device should appear as TransparentUARTDemo in the list of Bluetooth devices. Once you see the “TransparentUARTDemo” device, click on the “CANCEL” button to cancel the device scanning. | Tap on the “TransparentUARTDemo” device to connect to the device. | Once the device is connected, tap on the “Transfer data to device” to build the communication interface between Demo application and MBD App. | Enable the “Write with Response” by clicking on “OFF” button at the bottom of the MBD APP screen. | Send the commands mentioned in the demo description to control the fan. The commands mentioned in the demo description are not case sensitive. | Based on the command received from the MBD application, the fan will be controlled. | When the user chooses temperature based fan control mode, application reads the temperature values from a weather sensor displays on EInk display and controls a DC fan | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#running-the-demo"
  },"194": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#comments",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#comments"
  },"195": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Revision:",
    "content": ". | v1.6.0 - Replaced Eink Click Bundle with Eink E-Paper display 2,9” 296x128, regenerated and tested application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 Added display capability | v1.3.0 Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#revision",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html#revision"
  },"196": {
    "doc": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "title": "Smart Appliance Control with BM71 Click on PIC32CM MC00 Curiosity Nano Evaluation kit",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html",
    "relUrl": "/apps/pic32cm_mc00_cnano/pic32cmmc_smart_appliance_control/readme.html"
  },"197": {
    "doc": "PIC32CM MC00 Curiosity Nano Evaluation Kit",
    "title": "PIC32CM MC00 Curiosity Nano Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32CM MC00 Curiosity Nano Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | Smart Appliance Control | Click Here | . More Application Demos . For more application demos on PIC32CM MC00 Curiosity Nano Evaluation Kit and other Development Boards/Kits having the same part number (PIC32CM1216MC00032) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_cnano/readme.html",
    "relUrl": "/apps/pic32cm_mc00_cnano/readme.html"
  },"198": {
    "doc": "Getting Started",
    "title": "Getting Started Application on PIC32CM MC00 Curiosity Pro Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#getting-started-application-on-pic32cm-mc00-curiosity-pro-development-board",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#getting-started-application-on-pic32cm-mc00-curiosity-pro-development-board"
  },"199": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html"
  },"200": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "The application reads current room temperature from the temperature sensor and light level from light sensor on the I/O1 Xplained Pro Extension and sends it to the console. The application will utilize below peripherals: . | SERCOM0 (as I²C) PLIB to read the temperature from a temperature sensor. | SERCOM2 (as Universal Synchronous Asynchronous Receiver Transmitter (USART)) PLIBs and STDIO library to print the temperature values on a COM (serial) port terminal application running on a PC. | The ADC peripheral library is used to read data from the light sensor | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#description",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#description"
  },"201": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM2(I2C) | ADC | SERCOM0(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#modulestechnology-used"
  },"202": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | PIC32CM MC00 Curiosity Pro Development Board | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#hardware-used"
  },"203": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cm_mc00_curiosity_pro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#softwaretools-used"
  },"204": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Connect the PIC32CM MC00 Curiosity Pro Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#setup",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#setup"
  },"205": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM1216MC00048” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#programming-hex-file"
  },"206": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cm_mc_curiosity_getting_started/firmware/pic32cm_mc00_curiosity_pro.X) in MPLAB X IDE | Ensure “PIC32CM MC00 Curiosity pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#programmingdebugging-application-project"
  },"207": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 9600 | Press the Reset switch on the PIC32CM MC00 Curiosity Pro Development Board. | The application prints temperature and light sensor continuously. | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to vary the light value. Place the finger on the temperature sensor to vary the temperature. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#running-the-demo"
  },"208": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#comments"
  },"209": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Regenerated and tested demo application | v1.2.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html#revision"
  },"210": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/pic32cm_mc_curiosity_getting_started/readme.html"
  },"211": {
    "doc": "PIC32CM MC00 Curiosity Pro Development Board",
    "title": "PIC32CM MC00 Curiosity Pro Development Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32CM MC00 Curiosity Pro Development Board. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . More Application Demos . For more application demos on PIC32CM MC00 Curiosity Pro Development Board and other Development Boards/Kits having the same part number (PIC32CM1216MC00048) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_mc00_curiosity_pro/readme.html",
    "relUrl": "/apps/pic32cm_mc00_curiosity_pro/readme.html"
  },"212": {
    "doc": "Getting Started",
    "title": "Getting Started Application with PIC32CX SG41 Curiosity Ultra Evaluation Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#getting-started-application-with-pic32cx-sg41-curiosity-ultra-evaluation-board",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#getting-started-application-with-pic32cx-sg41-curiosity-ultra-evaluation-board"
  },"213": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html"
  },"214": {
    "doc": "Getting Started",
    "title": "Description",
    "content": "This application demonstrates an LED1 toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW1 on the PIC32CX SG41 Curiosity Ultra Evaluation Board. The demo application has additional functionality to print the current room temperature periodically using on board temperature sensor. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#description",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#description"
  },"215": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM | RTC | EIC | DMAC | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#modulestechnology-used"
  },"216": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | PIC32CX SG41 Curiosity Ultra Evaluation Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#hardware-used"
  },"217": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cx_sg41_cult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#softwaretools-used"
  },"218": {
    "doc": "Getting Started",
    "title": "Hardware Setup:",
    "content": ". | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CX SG41 Curiosity Ultra Evaluation Board . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#hardware-setup",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#hardware-setup"
  },"219": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CX1025SG41128” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#programming-hex-file"
  },"220": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cx_sg41_getting_started/firmware/pic32cx_sg41_cult.X) in MPLAB X IDE | Ensure “PIC32CX SG41 Curiosity Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#programmingdebugging-application-project"
  },"221": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Reset or power cycle the device. | An LED1 on the PIC32CX SG41 Curiosity Ultra Evaluation Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And the LED toggling rate is displayed on the serial terminal. | Press the switch SW1 on the PIC32CX SG41 Curiosity Ultra Evaluation Board to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW1 on the PIC32CX SG41 Curiosity Ultra Evaluation Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW2 on the PIC32CX SG41 Curiosity Ultra Board to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW1 on the PIC32CX SG41 Curiosity Ultra Evaluation Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds on every time user press the switch SW1 on the PIC32CX SG41 Curiosity Ultra Evaluation Board. | Below diagram shows the sample output log displayed on command prompt. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#running-the-demo"
  },"222": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#comments"
  },"223": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html#revision"
  },"224": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html",
    "relUrl": "/apps/pic32cx_sg41_cult/pic32cx_sg41_getting_started/readme.html"
  },"225": {
    "doc": "PIC32CX SG41 Curiosity Ultra Evaluation Board",
    "title": "PIC32CX SG41 Curiosity Ultra Evaluation Board",
    "content": ". This repository contains the MPLAB® Harmony 3 reference applications developed on PIC32CX SG41 Curiosity Ultra Evaluation Board . | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . More Application Demos . For more application demos on PIC32CX SG41 Curiosity Ultra Evaluation Board and other Development Boards/Kits having the same part number (PIC32CX1025SG41128) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg41_cult/readme.html",
    "relUrl": "/apps/pic32cx_sg41_cult/readme.html"
  },"226": {
    "doc": "Getting Started",
    "title": "Getting Started Application with PIC32CX SG61 Curiosity Ultra Evaluation Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#getting-started-application-with-pic32cx-sg61-curiosity-ultra-evaluation-board",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#getting-started-application-with-pic32cx-sg61-curiosity-ultra-evaluation-board"
  },"227": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html"
  },"228": {
    "doc": "Getting Started",
    "title": "Description",
    "content": "This application demonstrates an LED1 toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW 1 on the PIC32CX SG61 Curiosity Ultra Evaluation Board. The demo application has additional functionality to print the current room temperature periodically using on board temperature sensor. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#description",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#description"
  },"229": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM | RTC | EIC | DMAC | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#modulestechnology-used"
  },"230": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | PIC32CX SG61 Curiosity Ultra Evaluation Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#hardware-used"
  },"231": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cx_sg61_cult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#softwaretools-used"
  },"232": {
    "doc": "Getting Started",
    "title": "Hardware Setup:",
    "content": ". | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J300) to power and debug the PIC32CX SG61 Curiosity Ultra Evaluation Board . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#hardware-setup",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#hardware-setup"
  },"233": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CX1025SG61128” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#programming-hex-file"
  },"234": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cx_sg61_getting_started\\firmware\\\\pic32cx_sg61_cult.X) in MPLAB X IDE | Ensure “PIC32CX SG61 Curiosity Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#programmingdebugging-application-project"
  },"235": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Reset or power cycle the device. | An LED1 on the PIC32CX SG61 Curiosity Ultra Evaluation Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And the LED toggling rate is displayed on the serial terminal. | Press the switch SW 1 on the PIC32CX SG61 Curiosity Ultra Evaluation Board to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW 1 on the PIC32CX SG61 Curiosity Ultra Evaluation Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW 2 on the PIC32CX SG61 Curiosity Ultra Evaluation Board to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW 1 on the PIC32CX SG61 Curiosity Ultra Evaluation Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds on every time user press the switch SW 1 on the PIC32CX SG61 Curiosity Ultra Evaluation Board. | Below diagram shows the sample output log displayed on command prompt. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#running-the-demo"
  },"236": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#comments"
  },"237": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html#revision"
  },"238": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html",
    "relUrl": "/apps/pic32cx_sg61_cult/pic32cx_sg61_getting_started/readme.html"
  },"239": {
    "doc": "PIC32CX SG61 Curiosity Ultra Evaluation Board",
    "title": "PIC32CX SG61 Curiosity Ultra Evaluation Board",
    "content": ". This repository contains the MPLAB® Harmony 3 reference applications developed on PIC32CX SG61 Curiosity Ultra Evaluation Board . | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . More Application Demos . For more application demos on PIC32CX SG61 Curiosity Ultra Evaluation Board and other Development Boards/Kits having the same part number (PIC32CX1025SG61128) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cx_sg61_cult/readme.html",
    "relUrl": "/apps/pic32cx_sg61_cult/readme.html"
  },"240": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended Application on PIC32CZ CA80 Curiosity Ultra Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#getting-started-extended-application-on-pic32cz-ca80-curiosity-ultra-development-board",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#getting-started-extended-application-on-pic32cz-ca80-curiosity-ultra-development-board"
  },"241": {
    "doc": "Getting Started Extended",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html"
  },"242": {
    "doc": "Getting Started Extended",
    "title": "Description",
    "content": "This application demonstrates an LED toggle (LED0 toggles when the switch SW0 is pressed) on a timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW0 on the PIC32CZ CA80 Curiosity Ultra Development Board. The demo application has extended functionality to print the current room temperature periodically when the XPRO connector is plugged with I/O1 Xplained Pro Extension Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#description",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#description"
  },"243": {
    "doc": "Getting Started Extended",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | RTC | GPIO | SERCOM (I2C) | SERCOM (UART) | DMA | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#modulestechnology-used"
  },"244": {
    "doc": "Getting Started Extended",
    "title": "Hardware Used:",
    "content": ". | PIC32CZ CA80 Curiosity Ultra Development Board | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#hardware-used",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#hardware-used"
  },"245": {
    "doc": "Getting Started Extended",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cz_ca80_cult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#softwaretools-used"
  },"246": {
    "doc": "Getting Started Extended",
    "title": "Setup 1:",
    "content": ". | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J200) to program and debug the PIC32CZ CA80 Curiosity Ultra Development Kit and connect to a external power supply (6.5V-14V) to power-up the board. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#setup-1",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#setup-1"
  },"247": {
    "doc": "Getting Started Extended",
    "title": "Setup 2:",
    "content": ". | Connect the PIC32CZ CA80 Curiosity Ultra Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB Debug USB (J200) port. | To test the extended functionality, connect the I/O1 Xplained Pro Extension Kit (Temperature Sensor) to J500 (Extension Header 1 (EXT1)) on the PIC32CZ CA80 Curiosity Ultra Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#setup-2",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#setup-2"
  },"248": {
    "doc": "Getting Started Extended",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CZ8110CA80208” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#programming-hex-file"
  },"249": {
    "doc": "Getting Started Extended",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cz_ca80_getting_started_ext\\firmware\\\\pic32cz_ca80_cult.X) in MPLAB X IDE | Ensure “PIC32CZ CA80 Curiosity Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#programmingdebugging-application-project"
  },"250": {
    "doc": "Getting Started Extended",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button). | Set the baud rate to 115200. | Reset or power cycle the device. | An LED0 on the PIC32CZ CA80 Curiosity Ultra Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And also, the LED toggling rate is displayed on the serial terminal. | Press the switch SW0 on the PIC32CZ CA80 Curiosity Ultra Development Board to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW0 on the PIC32CZ CA80 Curiosity Ultra Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Testing Extended functionality: . | Press the switch SW1 on the PIC32CZ CA80 Curiosity Ultra Development Board to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW0 (toggles LED0) on the PIC32CZ CA80 Curiosity Ultra Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds every time the user presses the switch SW0 on the PIC32CZ CA80 Curiosity Ultra Development Board. | Below diagram shows the sample output log displayed on command prompt. | | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#running-the-demo"
  },"251": {
    "doc": "Getting Started Extended",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#comments",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#comments"
  },"252": {
    "doc": "Getting Started Extended",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#revision",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html#revision"
  },"253": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32cz_ca80_cult/pic32cz_ca80_getting_started_ext/readme.html"
  },"254": {
    "doc": "PIC32CZ CA80 Curiosity Ultra Development Board",
    "title": "PIC32CZ CA80 Curiosity Ultra Development Board",
    "content": ". This repository contains the MPLAB® Harmony 3 reference applications developed on PIC32CZ CA80 Curiosity Ultra Development Board . | SI No | Demo Name | Download Link | . | 1 | Getting Started Extended | Click Here | . More Application Demos . For more application demos on PIC32CZ CA80 Curiosity Ultra Development Board and other Development Boards/Kits having the same part number (PIC32CZ8110CA80208) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca80_cult/readme.html",
    "relUrl": "/apps/pic32cz_ca80_cult/readme.html"
  },"255": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended Application on PIC32CZ CA90 Curiosity Ultra Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#getting-started-extended-application-on-pic32cz-ca90-curiosity-ultra-development-board",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#getting-started-extended-application-on-pic32cz-ca90-curiosity-ultra-development-board"
  },"256": {
    "doc": "Getting Started Extended",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html"
  },"257": {
    "doc": "Getting Started Extended",
    "title": "Description",
    "content": "This application demonstrates an LED toggle (LED0 toggles when the switch SW0 is pressed) on a timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW0 on the PIC32CZ CA90 Curiosity Ultra Development Board. The demo application has extended functionality to print the current room temperature periodically when the XPRO connector is plugged with I/O1 Xplained Pro Extension Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#description",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#description"
  },"258": {
    "doc": "Getting Started Extended",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | RTC | GPIO | SERCOM (I2C) | SERCOM (UART) | DMA | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#modulestechnology-used"
  },"259": {
    "doc": "Getting Started Extended",
    "title": "Hardware Used:",
    "content": ". | PIC32CZ CA90 Curiosity Ultra Development Board | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#hardware-used",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#hardware-used"
  },"260": {
    "doc": "Getting Started Extended",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cz_ca90_cult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#softwaretools-used"
  },"261": {
    "doc": "Getting Started Extended",
    "title": "Setup 1:",
    "content": ". | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J200) to program and debug the PIC32CZ CA80 Curiosity Ultra Development Kit and connect to a external power supply (6.5V-14V) to power-up the board . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#setup-1",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#setup-1"
  },"262": {
    "doc": "Getting Started Extended",
    "title": "Setup 2:",
    "content": ". | Connect the PIC32CZ CA90 Curiosity Ultra Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B Debug USB (J200) port. | To test the extended functionality, connect the I/O1 Xplained Pro Extension Kit (Temperature Sensor) to J500 (Extension Header 1 (EXT1)) on the PIC32CZ CA90 Curiosity Ultra Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#setup-2",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#setup-2"
  },"263": {
    "doc": "Getting Started Extended",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CZ8110CA90208” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#programming-hex-file"
  },"264": {
    "doc": "Getting Started Extended",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cz_ca90_getting_started_ext\\firmware\\\\pic32cz_ca90_cult.X) in MPLAB X IDE | Ensure “PIC32CZ CA90 Curiosity Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Note: If you see a programming error, Use the alternate programming option with MPLAB ICD 4 In-Circuit Debugger . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#programmingdebugging-application-project"
  },"265": {
    "doc": "Getting Started Extended",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button). | Set the baud rate to 115200. | Reset or power cycle the device. | An LED0 on the PIC32CZ CA90 Curiosity Ultra Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And also, the LED toggling rate is displayed on the serial terminal. | Press the switch SW0 on the PIC32CZ CA90 Curiosity Ultra Development Board to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW0 on the PIC32CZ CA90 Curiosity Ultra Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Testing Extended functionality: . | Press the switch SW1 on the PIC32CZ CA90 Curiosity Ultra Development Board to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW0 (toggles LED0) on the PIC32CZ CA90 Curiosity Ultra Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds every time the user presses the switch SW0 on the PIC32CZ CA90 Curiosity Ultra Development Board. | . | Below diagram shows the sample output log displayed on command prompt. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#running-the-demo"
  },"266": {
    "doc": "Getting Started Extended",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#comments",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#comments"
  },"267": {
    "doc": "Getting Started Extended",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#revision",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html#revision"
  },"268": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32cz_ca90_cult/pic32cz_ca90_getting_started_ext/readme.html"
  },"269": {
    "doc": "PIC32CZ CA90 Curiosity Ultra Development Board",
    "title": "PIC32CZ CA90 Curiosity Ultra Development Board",
    "content": ". This repository contains the MPLAB® Harmony 3 reference applications developed on PIC32CZ CA90 Curiosity Ultra Development Board . | SI No | Demo Name | Download Link | . | 1 | Getting Started Extended | Click Here | . More Application Demos . For more application demos on PIC32CZ CA90 Curiosity Ultra Development Board and other Development Boards/Kits having the same part number (PIC32CZ8110CA90208) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cz_ca90_cult/readme.html",
    "relUrl": "/apps/pic32cz_ca90_cult/readme.html"
  },"270": {
    "doc": "Getting Started",
    "title": "Getting Started Application on PIC32MK General Purpose (GP) Development Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#getting-started-application-on-pic32mk-general-purpose-gp-development-kit",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#getting-started-application-on-pic32mk-general-purpose-gp-development-kit"
  },"271": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html"
  },"272": {
    "doc": "Getting Started",
    "title": "Description",
    "content": "The application reads the current room temperature from the temperature sensor on the MikroElectronika Weather click board. The temperature reading is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch S1 on the PIC32MK GP Development Kit. Also, an LED (LED1) is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#description",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#description"
  },"273": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SPI | Timer | Core Timer | GPIO | UART | DMA | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#modulestechnology-used"
  },"274": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | PIC32MK General Purpose (GP) Development Kit | MikroElectronika Weather click board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#hardware-used"
  },"275": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mk_gp_db . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#softwaretools-used"
  },"276": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Connect the Type-A male to Micro-B USB cable to the Micro-B Serial USB port (J25) on the PIC32MK GP Development Kit for logs | Connect the Type-A male to Micro-B USB cable to Micro-B DEBUG USB port (J12) to power and debug the PIC32MK GP Development Kit | Connect the MikroElectronika Weather click board on the mikroBUS interface J29. Ensure the following hardware modification before connecting the Weather click board | . Hardware Modification: . | The MikroElectronika Weather click board supports both I²C and SPI protocols to communicate with the BME280 temperature sensor. It provides jumpers (resistors) to choose a communication interface between I²C and SPI. By default, I²C is selected as the communication interface. The PIC32MK1024GPE100 device does not have an I²C peripheral module; therefore, SPI is chosen as the communication interface to communicate with the temperature sensor. The hardware modification to be done on the MikroElectronika Weather click board is shown in the figure below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#setup",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#setup"
  },"277": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MK1024GPE100” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#programming-hex-file"
  },"278": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32mk_getting_started\\firmware\\\\pic32mk_gp_db.X) in MPLAB X IDE | Ensure “Starter Kits (PKOB)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#programmingdebugging-application-project"
  },"279": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below | Also, notice LED1 blinking at a 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the S1 switch on the PIC32MK General Purpose (GP) Development Kit to change the default sampling rate to one second | Every subsequent press of switch S1 on the PIC32MK General Purpose (GP) Development Kit changes the default sampling rate to two seconds, four seconds, 500 milliseconds and back to one second in cyclic order as shown below . | While the temperature sampling rate changes on every switch S1 press, notice LED1 toggling at the same sampling rate | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#running-the-demo"
  },"280": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on PIC32MK GP MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#comments"
  },"281": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html#revision"
  },"282": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html",
    "relUrl": "/apps/pic32mk_gp_db/pic32mk_getting_started/readme.html"
  },"283": {
    "doc": "PIC32MK General Purpose (GP) Development Kit",
    "title": "PIC32MK General Purpose (GP) Development Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32MK General Purpose (GP) Development Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . More Application Demos . For more application demos on PIC32MK General Purpose (GP) Development Kit and other Development Boards/Kits having the same part number (PIC32MK1024GPE100) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_gp_db/readme.html",
    "relUrl": "/apps/pic32mk_gp_db/readme.html"
  },"284": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended Application on PIC32MK MCM Curiosity Pro Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#getting-started-extended-application-on-pic32mk-mcm-curiosity-pro-development-board",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#getting-started-extended-application-on-pic32mk-mcm-curiosity-pro-development-board"
  },"285": {
    "doc": "Getting Started Extended",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html"
  },"286": {
    "doc": "Getting Started Extended",
    "title": "Description",
    "content": "This application demonstrates an LED toggle (LED1 toggles when the switch SW1 is pressed and LED3 toggles when switch SW3 is pressed) on a timeout basis and prints the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW1 or SW3 on the PIC32MK MCM Curiosity Pro Development Board. The periodicity will not change while switching between SW1 to SW3 or vice versa. The demo application has extended functionality to print the current room temperature periodically when the MikroBus socket is plugged with MikroElectronika Weather Click Board. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#description",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#description"
  },"287": {
    "doc": "Getting Started Extended",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SPI | Timer | Core Timer | GPIO | UART | DMA | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#modulestechnology-used"
  },"288": {
    "doc": "Getting Started Extended",
    "title": "Hardware Used:",
    "content": ". | PIC32MK MCM Curiosity Pro Development Board | MikroElectronika Weather Click Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#hardware-used",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#hardware-used"
  },"289": {
    "doc": "Getting Started Extended",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mk_mcm_curiosity_pro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#softwaretools-used"
  },"290": {
    "doc": "Getting Started Extended",
    "title": "Hardware Setup 1: ",
    "content": ". | Connect the Type-A male to Micro-B USB cable to the Micro-B USB to UART port (J400) on the PIC32MK MCM Curiosity Pro Development Board for logs | Connect the Type-A male to Micro-B USB cable to Micro-B USB DEBUG port (J500) to power and debug the PIC32MK MCM Curiosity Pro Development Board | . Hardware Modification: . | The MikroElectronika Weather click board supports both I²C and SPI protocols to communicate with the BME280 temperature sensor. It provides jumpers (resistors) to choose a communication interface between I²C and SPI. By default, I²C is selected as the communication interface. The PIC32MK MCM Curiosity Pro Development Board does not have I²C lines routed to the MikroBus socket; therefore, SPI is chosen as the communication interface to communicate with the temperature sensor. The hardware modification on the MikroElectronika Weather click board is shown in the figure below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html"
  },"291": {
    "doc": "Getting Started Extended",
    "title": "Hardware Setup 2: ",
    "content": ". | Connect the Type-A male to Micro-B USB cable to the Micro-B USB to UART port (J400) on the PIC32MK MCM Curiosity Pro Development Board for logs | Connect the Type-A male to Micro-B USB cable to Micro-B USB DEBUG port (J500) to power and debug the PIC32MK MCM Curiosity Pro Development Board | To test the extended functionality, connect the MikroElectronika Weather click board to the MikroBus socket (J300) on the PIC32MK MCM Curiosity Pro Development Board. Ensure the above hardware modification before connecting the Weather click board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html"
  },"292": {
    "doc": "Getting Started Extended",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MK1024MCM100” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#programming-hex-file"
  },"293": {
    "doc": "Getting Started Extended",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32mk_mcm_curiosity_getting_started_ext/firmware/pic32mk_mcm_curiosity_pro.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits (PKOB4)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#programmingdebugging-application-project"
  },"294": {
    "doc": "Getting Started Extended",
    "title": "Running the Demo:",
    "content": ". | Perform Hardware Setup 1 steps mentioned above, if not done already. | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button). | Set the baud rate to 115200. | Reset or power cycle the device. LED1 toggles for every 500 milliseconds during power cycle. | An LED (LED1) on the PIC32MK MCM Curiosity Pro Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And also, the LED toggling rate is displayed on the serial terminal. | Press the switch SW1 on the PIC32MK MCM Curiosity Pro Development Board to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW1 on the PIC32MK MCM Curiosity Pro Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW3 on the PIC32MK MCM Curiosity Pro Development Board to switch the toggling LED from LED1 to LED3. | Every subsequent pressing of the switch SW3 on the PIC32MK MCM Curiosity Pro Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW1 on the PIC32MK MCM Curiosity Pro Development Board to switch back the toggling LED from LED3 to LED1. | See the following figure for the output. | To Test the Extended functionality using MikroElectronika Weather Click Board: . | First perform the Hardware Modification shown above, if not done already. | Then perform Hardware Setup 2 steps mentioned above, if not done already. | Reset or power cycle the device. LED1 toggles for every 500 milliseconds during power cycle. | The switch SW2 is used to switch between the printing of LED toggling rate or the temperature. | Press the switch SW2 on the PIC32MK MCM Curiosity Pro Development Board to read and print the Temperature from the MikroElectronika Weather click board. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW1 (toggles LED1) on the PIC32MK MCM Curiosity Pro Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds, and back to 500 milliseconds every time the user presses the switch SW1 on the PIC32MK MCM Curiosity Pro Development Board. | Press the switch SW3 (toggles LED3) on the PIC32MK MCM Curiosity Pro Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds, and back to 500 milliseconds every time the user presses the switch SW3 on the PIC32MK MCM Curiosity Pro Development Board. | Finally, Press the switch SW2 on the PIC32MK MCM Curiosity Pro Development Board to switch back to print the LED toggling rate. | See the following figure for the output. | . | Note: . | The periodicity will not change while switching between SW1 to SW3 or vice versa. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#running-the-demo"
  },"295": {
    "doc": "Getting Started Extended",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on PIC32MK GP MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#comments",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#comments"
  },"296": {
    "doc": "Getting Started Extended",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application. | v1.5.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#revision",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html#revision"
  },"297": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/pic32mk_mcm_curiosity_getting_started_ext/readme.html"
  },"298": {
    "doc": "PIC32MK MCM Curiosity Pro Development Board",
    "title": "PIC32MK MCM Curiosity Pro Development Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32MK MCM Curiosity Pro Development Board. | SI No | Demo Name | Download Link | . | 1 | Getting Started Extended | Click Here | . More Application Demos . For more application demos on PIC32MK MCM Curiosity Pro Development Board and other Development Boards/Kits having the same part number (PIC32MK1024MCM100) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mk_mcm_curiosity_pro/readme.html",
    "relUrl": "/apps/pic32mk_mcm_curiosity_pro/readme.html"
  },"299": {
    "doc": "Getting Started",
    "title": "Getting Started Application on Curiosity PIC32MX470 Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#getting-started-application-on-curiosity-pic32mx470-development-board",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#getting-started-application-on-curiosity-pic32mx470-development-board"
  },"300": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html"
  },"301": {
    "doc": "Getting Started",
    "title": "Description",
    "content": "The application reads the current room temperature from the temperature sensor on the MikroElectronika Weather click board. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch S1 on the Curiosity PIC32MX470 Development Board. Also, LED1 is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#description",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#description"
  },"302": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | Timer | Core Timer | GPIO | UART | DMA | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#modulestechnology-used"
  },"303": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MX470 Development Board | MikroElectronika Weather click board | MikroElectronika USB UART click board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#hardware-used"
  },"304": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mx470_curiosity . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#softwaretools-used"
  },"305": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Connect the Type-A male to mini-B USB cable to mini-B DEBUG USB port to power and debug the PIC32MX470 Curiosity Development Board. | Connect the MikroElectronika Weather click board on the mikroBUS interface 1 | Connect the MikroElectronika USB UART click board on the mikroBUS interface 2 | Connect USB Type-A male to mini-B male cable to USB-UART serial port through mikroBUS interface 2 | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#setup",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#setup"
  },"306": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MX470F512H” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#programming-hex-file"
  },"307": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32mx470_getting_started\\firmware\\\\pic32mx470_curiosity.X) in MPLAB X IDE | Ensure “Starter Kits (PKOB)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#programmingdebugging-application-project"
  },"308": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice LED1 blinking at a 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the S1 switch on the Curiosity PIC32MX470 Development Board to change the default sampling rate to one second | Every subsequent press of switch S1 on the Curiosity PIC32MX470 Development Board changes the default sampling rate to two seconds, four seconds, 500 milliseconds and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch S1 press, notice LED1 toggling at the same sampling rate | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#running-the-demo"
  },"309": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started With Harmony v3 Peripheral Libraries on PIC32MX 470 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#comments"
  },"310": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html#revision"
  },"311": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html",
    "relUrl": "/apps/pic32mx470_curiosity/pic32mx470_getting_started/readme.html"
  },"312": {
    "doc": "Curiosity PIC32MX470 Development Board",
    "title": "Curiosity PIC32MX470 Development Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on Curiosity PIC32MX470 Development Board. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . More Application Demos . For more application demos on Curiosity PIC32MX470 Development Board and other Development Boards/Kits having the same part number (PIC32MX470F512H) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mx470_curiosity/readme.html",
    "relUrl": "/apps/pic32mx470_curiosity/readme.html"
  },"313": {
    "doc": "Getting Started",
    "title": "Getting Started Application with PIC32MZ DA Curiosity Development Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#getting-started-application-with-pic32mz-da-curiosity-development-kit",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#getting-started-application-with-pic32mz-da-curiosity-development-kit"
  },"314": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html"
  },"315": {
    "doc": "Getting Started",
    "title": "Description",
    "content": "This application demonstrates an LED (LED1[RGB-RED]) toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW1 on the PIC32MZ DA Curiosity Development Kit. The demo application has additional functionality to print the current room temperature periodically using on board temperature sensor. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#description",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#description"
  },"316": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | Timer | GPIO | UART | DMA | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#modulestechnology-used"
  },"317": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | PIC32MZ DA Curiosity Development Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#hardware-used"
  },"318": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mzda_curiosity . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#softwaretools-used"
  },"319": {
    "doc": "Getting Started",
    "title": "Hardware Setup:",
    "content": ". | Connect the PIC32MZ DA Curiosity Development Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#hardware-setup",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#hardware-setup"
  },"320": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2064DAR176” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#programming-hex-file"
  },"321": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32mzda_getting_started\\firmware\\\\pic32mz_da_curiosity.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#programmingdebugging-application-project"
  },"322": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Reset or power cycle the device. | An LED (LED1[RGB-RED]) on the PIC32MZ DA Curiosity Development Kit toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And the LED toggling rate is displayed on the serial terminal. | Press the switch SW1 on the PIC32MZ DA Curiosity Development Kit to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW1 on the PIC32MZ DA Curiosity Development Kit changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW2 on the PIC32MZ DA Curiosity Development Kit to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW1 on the PIC32MZ DA Curiosity Development Kit to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds on every time user press the switch SW1 on the PIC32MZ DA Curiosity Development Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#running-the-demo"
  },"323": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#comments"
  },"324": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html#revision"
  },"325": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_getting_started/readme.html"
  },"326": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "SD Card USB Audio Player on PIC32MZ DA Curiosity Development Kit + High-Performance 4.3” WQVGA Display Module with maXTouch® Technology using Legato Graphics",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#sd-card-usb-audio-player-on-pic32mz-da-curiosity-development-kit--high-performance-43-wqvga-display-module-with-maxtouch-technology-using-legato-graphics",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#sd-card-usb-audio-player-on-pic32mz-da-curiosity-development-kit--high-performance-43-wqvga-display-module-with-maxtouch-technology-using-legato-graphics"
  },"327": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html"
  },"328": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Description",
    "content": "This application reads a WAV audio file from the SD card or USB thumb drive on the PIC32MZ DA Curiosity Development Kit and streams it over the I²S interface through the audio CODEC. The application implements the functionality of an audio player (for WAV files only). The application displays audio tracks from the SD card/USB Thumb in a list wheel box. It allows to navigate the list to select and play a track. It also provides volume increase/decrease scroll bar, Play/Pause button, Next Track button, Rewind button, and a track progress bar. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#description",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#description"
  },"329": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | I2S | Timer | . | Drivers . | I2S Driver | I2C Driver | AK4954 Driver | SDCARD (SPI) Driver | USB High Speed Driver | MSD Function Driver | Legato Graphics Display driver w/ PDA TM4301B Display | Max Touch Controller Driver | . | Audio Decoder Libraries . | WAV Decoder Library | . | System Services . | File System | Input System | . | Middleware . | USB Host layer | Legato Graphics | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#modulestechnology-used"
  },"330": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Hardware Used:",
    "content": ". | PIC32MZ DA Curiosity Development Kit | AC324954 - PIC32 Audio Codec Daughter Card | High-Performance 4.3” WQVGA Display Module with maXTouch® Technology | Micro SD Card | USB Thumb Drive | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#hardware-used"
  },"331": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mzda_curiosity . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#softwaretools-used"
  },"332": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Setup:",
    "content": ". | Attach the 24-bit pass through card to the GFX Connector on the PIC32MZ DA Curiosity Development Kit | Connect the ribbon cable from the High-Performance 4.3” WQVGA maXTouch Display to the ribbon connector on the 24-bit pass through card. Make sure that the S1 switch on the 24-bit pass through card is set to 2. | Connect AC324954 - PIC32 Audio Codec Daughter Card to XC32 HEADER 1 on the PIC32MZ DA Curiosity Development Kit | Connect a USB cable from the host computer to the DEBUG USB port on the PIC32MZ DA Curiosity Development Kit. This USB connection is used for programming and debugging. | Connect the wired stereo headphone to the audio jack | Connect Barrel jack power adapter to PIC32MZ DA Curiosity Development Kit | . Note : DEBUG USB and Barrel Jack both should be connected . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#setup",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#setup"
  },"333": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2064DAR176” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#programming-hex-file"
  },"334": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32mzda_sdcard_usb_audio_player\\firmware\\\\pic32mz_da_curiosity.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits (PKOB4)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#programmingdebugging-application-project"
  },"335": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Running the Demo:",
    "content": ". | Make sure that the micro SD card/USB Thumb drive contains WAV audio files | Reset the board by pressing RESET switch | You should see a display as shown below | Wait till initialization completes and display renders as shown below | Select the source (SD CARD/USB) to play audio | The following screen is shown if the audio source is not connected or connected improperly. Make sure to insert the SD Card or USB Thumb Drive properly in the sockets. You could unplug and re-plug if you are continuing to see the below screen. Note: . | SD Card socket is at J500 (Back side of the board) on PIC32MZ DA Curiosity Development Kit | USB Thumb drive connector is at J301 (Target USB) on PIC32MZ DA Curiosity Development Kit | . | . | Once the Source is mounted, display renders the audio player options as shown below . | Description of the options available are shown in below image . | Track List : Shows all the tracks in list wheel, available in the selected source(Move the list wheel to change the track) | Progress Indicator : Indicates the current track progress time | Rewind : Re-plays the current track from starting | Play/Pause : Play and Pause the track | Next Track : Plays next track in the list | Song Duration : Duration of the track | Volume Control : Increases/Decreases the volume level | . | If the source mounted is empty, display renders as shown below . | Listen to your favorite track. Notice the track list will scroll as the tracks get played out one after the other. | The user interface should respond to touch events and you should be able to select next or rewind tracks for playing, increase or decrease volume level, and select the particular track. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#running-the-demo"
  },"336": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#comments",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#comments"
  },"337": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested application. | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#revision",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html#revision"
  },"338": {
    "doc": "SD Card USB Audio Player with Legato Graphics",
    "title": "SD Card USB Audio Player with Legato Graphics",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html",
    "relUrl": "/apps/pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player/readme.html"
  },"339": {
    "doc": "PIC32MZ DA Curiosity Development Kit",
    "title": "PIC32MZ DA Curiosity Development Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32MZ DA Curiosity Development Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | SD Card USB Audio Player | Click Here | . More Application Demos . For more application demos on PIC32MZ DA Curiosity Development Kit and other Development Boards/Kits having the same part number (PIC32MZ2064DAR176) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_curiosity/readme.html",
    "relUrl": "/apps/pic32mz_da_curiosity/readme.html"
  },"340": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "MiWi IoT gateway Application on PIC32MZ DA Radial Graphics Development Board (RGDB) using Legato Graphics",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#miwi-iot-gateway-application-on-pic32mz-da-radial-graphics-development-board-rgdb-using-legato-graphics",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#miwi-iot-gateway-application-on-pic32mz-da-radial-graphics-development-board-rgdb-using-legato-graphics"
  },"341": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html"
  },"342": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Description",
    "content": "This application builds up a gateway for an IoT network using MiWi. The application sends and receives messages from the SAMR3018A MiWi module, available on the RGDB. The SAMR3018A module handles the communication with the SAMR30M sensor boards over MiWi.   . MiWi Module on the RGDB . The PIC32MZ2064DAR176 chip and SAMR3018A MiWi module on the RGDB PCB: .   . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#description",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#description"
  },"343": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | UART | . | Drivers . | UART Driver | . | Middleware . | Legato Graphics | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#modulestechnology-used"
  },"344": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Hardware Used:",
    "content": ". | PIC32MZ DA Radial Graphics Development Board | SAMR30M SENSOR BOARD | MPLAB® ICD 4 In-Circuit Debugger | Atmel-ICE Debugger | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#hardware-used"
  },"345": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Hardware changes:",
    "content": "Before starting on this demo, a hardware modification is needed on RGDB. Remove the two resistors: R800 &amp; R801. This change is needed because USB serial TX conflicts with UART1 of PIC32. To use UART1 communication between PIC32 and SAMR30 module embedded on RGDB, the USB serial port should be disabled to avoid conflict.   . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#hardware-changes",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#hardware-changes"
  },"346": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/glcd_rgba8888_mxt_mzda_intddr_round . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#softwaretools-used"
  },"347": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Setup:",
    "content": ". | Attach the ICD4 debugger Connector to the ICSP header J300 on the RGDB. This connection is used for programming and debugging. | Connect a USB cable from the host computer or a 5VDC power adapter to the USB port J601 on the RGDB. This USB connection is used for power supply. | . Note : A USB cable for UART console debug should be connected to RGDB if need capture printing information when debug.   . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#setup",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#setup"
  },"348": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. There are 3 hex files should be programmed in this demo. | Program hex file for PIC32MZ | Program hex file for SAMR3018A module embedded on RGDB | Program hex file for SAMR30M sensor board | . Steps to program the hex file for PIC32MZ . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2064DAR176” | Ensure the ICD4 tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . Steps to program the hex file for SAMR3018A module embedded on RGDB . | Connect Atmel-ICE Debugger with RGDB J800 header . | Power on RGDB | Open Microchip Studio | Go to Tools -&gt; Device Programming | In the Device Programming window, set the following . | Tool – Atmel-ICE or SAM-ICE | Device – ATSAMR30E18A | Interface – SWD | . | Click Read to read the device signature and target voltage | Click the Fuses tab in the left pane and enter 0x7 in the USER_WORD_0.NVMCTRL_BOOTPROT field. | Click Program . | Navigate to Memories tab | In the Flash section, click the ellipsis to select the SAMR3018A_Module_Xpro_Star_RN_cmd06fw04b.hex in the hex folder | Click Program . | .   . Steps to program the hex file for SAMR30M sensor board . | Connect Atmel-ICE Debugger with SWD header J3 of sensor board | Power on sensor board by external supply J5 or battery suppy by J4 selection . | Open Microchip Studio | Go to Tools -&gt; Device Programming | In the Device Programming window, set the following . | Tool – Atmel-ICE or SAM-ICE | Device – ATSAMR30E18A | Interface – SWD | . | Click Read to read the device signature and target voltage. If there are issues in reading the signature or target voltage, ensure that the programming cable is firmly connected to the SWD header | Navigate to Memories tab | In the Flash section, click the ellipsis to select the SAMR30M_Sensor_board_ED_v3_OQPSK250.hex in the hex folder | Click Program | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#programming-hex-file"
  },"349": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Running the Demo:",
    "content": "Power on devices and connecting automatically . | Power on RGDB, the first UI displays a round Sub-GHz icon with nubmer and ‘node’ identifier. On the top of screen shows the MiWi-IoT Demo title, and on the bottom there can be found the connection status of current node | Swipe on the round icon, there is a list-wheel animation effect to show the switching of different node . | Power on the first sensor board, the Node 1 should change status from “Offline” to “Online”, and so on | . Monitor and control a selected node . | When a node showing “Online”, click on the icon will enter to the sub page which showing details information and control UI . | The sub page shows the node name on the top and the temperature &amp; RSSI below the name. Sensor board reports temperature and RSSI with a fixed cycle. The home icon in the middle of screen is the button to return to main page to switch different nodes. The 3 round buttons on the bottom are the control widgets to toggle LED, GPIO1 and GPIO2 of the sensor board | click on the LED button, we can see that the red LED would be toggled on the sensor board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#running-the-demo"
  },"350": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#comments",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#comments"
  },"351": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "Revision:",
    "content": ". | v1.6.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#revision",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html#revision"
  },"352": {
    "doc": "MiWi IoT gateway with Legato Graphics",
    "title": "MiWi IoT gateway with Legato Graphics",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html",
    "relUrl": "/apps/pic32mz_da_rgdb/pic32mzda_miwi_iot/readme.html"
  },"353": {
    "doc": "PIC32MZ DA Radial Graphics Development Board (RGDB)",
    "title": "PIC32MZ DA Radial Graphics Development Board (RGDB)",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32MZ DA Radial Graphics Development Board (RGDB). | SI No | Demo Name | Download Link | . | 1 | MiWi IoT Gateway | Click Here | . More Application Demos . For more application demos on PIC32MZ DA Radial Graphics Development Board (RGDB) and other Development Boards/Kits having the same part number (PIC32MZ2064DAR176) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_da_rgdb/readme.html",
    "relUrl": "/apps/pic32mz_da_rgdb/readme.html"
  },"354": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended Application on Curiosity PIC32MZ EF 2.0 Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#getting-started-extended-application-on-curiosity-pic32mz-ef-20-development-board",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#getting-started-extended-application-on-curiosity-pic32mz-ef-20-development-board"
  },"355": {
    "doc": "Getting Started Extended",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html"
  },"356": {
    "doc": "Getting Started Extended",
    "title": "Description",
    "content": "This application demonstrates an LED toggle (LED1 toggles when the switch SW1 is pressed and LED3 toggles when switch SW3 is pressed) on a timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW1 or SW3 on the Curiosity PIC32MZ EF 2.0 Development Board. The periodicity will not change while switching between SW1 to SW3 or vice versa. The demo application has extended functionality to print the current room temperature periodically when the XPRO connector is plugged with I/O1 Xplained Pro Extension Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#description"
  },"357": {
    "doc": "Getting Started Extended",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | Timer | GPIO | UART | DMA | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#modulestechnology-used"
  },"358": {
    "doc": "Getting Started Extended",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MZ EF 2.0 Development Board | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#hardware-used"
  },"359": {
    "doc": "Getting Started Extended",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mz_ef_curiosity_v2 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#softwaretools-used"
  },"360": {
    "doc": "Getting Started Extended",
    "title": "Setup 1:",
    "content": ". | Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#setup-1",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#setup-1"
  },"361": {
    "doc": "Getting Started Extended",
    "title": "Setup 2:",
    "content": ". | Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | To test the extended functionality, connect the I/O1 Xplained Pro Extension Kit (Temperature Sensor) to J501 (Extension Header 1 (EXT1)) on the Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#setup-2",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#setup-2"
  },"362": {
    "doc": "Getting Started Extended",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#programming-hex-file"
  },"363": {
    "doc": "Getting Started Extended",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started_ext\\firmware\\\\pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits (PKOB4)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#programmingdebugging-application-project"
  },"364": {
    "doc": "Getting Started Extended",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button). | Set the baud rate to 115200. | Reset or power cycle the device. | An LED (LED1) on the Curiosity PIC32MZ EF 2.0 Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And also, the LED toggling rate is displayed on the serial terminal. | Press the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW3 on the Curiosity PIC32MZ EF 2.0 Development Board to switch the toggling LED from LED1 to LED3. | Every subsequent pressing of the switch SW3 on the Curiosity PIC32MZ EF 2.0 Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board to switch back the toggling LED from LED3 to LED1. | Testing Extended functionality: . | Press the switch SW2 on the Curiosity PIC32MZ EF 2.0 Development Board to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW1 (toggles LED1) on the Curiosity PIC32MZ EF 2.0 Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds every time the user presses the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board. | Press the switch SW3 (toggles LED3) on the Curiosity PIC32MZ EF 2.0 Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds every time the user presses the switch SW3 on the Curiosity PIC32MZ EF 2.0 Development Board. | . | Note: . | The LED1 toggles for every 500 milliseconds during power cycle. | The periodicity will not change while switching between SW1 to SW3 or vice versa. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#running-the-demo"
  },"365": {
    "doc": "Getting Started Extended",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on PIC32MZ EF MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#comments"
  },"366": {
    "doc": "Getting Started Extended",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Extended functionality to toggle LED3 on SW3 switch press, added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html#revision"
  },"367": {
    "doc": "Getting Started Extended",
    "title": "Getting Started Extended",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_ext/readme.html"
  },"368": {
    "doc": "Getting Started Middleware",
    "title": "Getting Started Application using Harmony v3 Drivers, System Services, Middleware and FreeRTOS on Curiosity PIC32MZ EF 2.0 Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#getting-started-application-using-harmony-v3-drivers-system-services-middleware-and-freertos-on-curiosity-pic32mz-ef-20-development-board",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#getting-started-application-using-harmony-v3-drivers-system-services-middleware-and-freertos-on-curiosity-pic32mz-ef-20-development-board"
  },"369": {
    "doc": "Getting Started Middleware",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html"
  },"370": {
    "doc": "Getting Started Middleware",
    "title": "Description",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM and to a file in a USB thumb drive whenever the USB thumb drive is connected. Also, an LED LED1 is toggled every time the temperature is displayed on the serial console and an LED (LED2) is in ON state when a USB thumb drive is connected. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#description"
  },"371": {
    "doc": "Getting Started Middleware",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | Timer | GPIO | UART | DMA | . | Drivers . | USB High-Speed Driver | USART Synchronous Drive | I²C Synchronous Driver | . | System Services . | File System Services | . | Middleware . | USB Host | . | Third Party Libraries . | FreeRTOS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#modulestechnology-used"
  },"372": {
    "doc": "Getting Started Middleware",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MZ EF 2.0 Development Board | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#hardware-used"
  },"373": {
    "doc": "Getting Started Middleware",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mz_ef_curiosity_v2 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#softwaretools-used"
  },"374": {
    "doc": "Getting Started Middleware",
    "title": "Setup:",
    "content": ". | Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Connect the I/O1 Xplained Pro Extension Kit (Temperature Sensor) to J501 (Extension Header 1 (EXT1)) on the Curiosity PIC32MZ EF 2.0 Development Board | Connect USB OTG Thumb Drive (Pendrive having mirco USB connector) or connect any pen drive using Type-A female to micro-B USB converter cable to Target USB (J201) on the Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#setup",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#setup"
  },"375": {
    "doc": "Getting Started Middleware",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#programming-hex-file"
  },"376": {
    "doc": "Getting Started Middleware",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started_middleware\\firmware\\\\middleware_drivers_freertos_pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits (PKOB4)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#programmingdebugging-application-project"
  },"377": {
    "doc": "Getting Started Middleware",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED1 blinking at a one second rate | Press any character on the terminal to display the last five values written to the EEPROM | You should see the LED2 is in “ON” state whenever you connect a USB thumb drive and the application creates a text file “Temperature_Sensor_Data.txt” if it is not already present in the USB thumb drive. The latest room temperature samples are written to the text file at a one-second rate. To view the data in the text file, connect the USB Thumb drive to a PC USB port and open the Temperature_Sensor_Data.txt file | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#running-the-demo"
  },"378": {
    "doc": "Getting Started Middleware",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Drivers and Middleware on PIC32MZ EF MCUs using FreeRTOS | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#comments"
  },"379": {
    "doc": "Getting Started Middleware",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html#revision"
  },"380": {
    "doc": "Getting Started Middleware",
    "title": "Getting Started Middleware",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/getting_started_middleware/readme.html"
  },"381": {
    "doc": "Getting Started",
    "title": "Getting Started Application on Curiosity PIC32MZ EF 2.0 Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#getting-started-application-on-curiosity-pic32mz-ef-20-development-board",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#getting-started-application-on-curiosity-pic32mz-ef-20-development-board"
  },"382": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html"
  },"383": {
    "doc": "Getting Started",
    "title": "Description",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board. Also, LED1 is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#description"
  },"384": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | Timer | GPIO | UART | DMA | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#modulestechnology-used"
  },"385": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MZ EF 2.0 Development Board | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#hardware-used"
  },"386": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mz_ef_curiosity_v2 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#softwaretools-used"
  },"387": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Connect the Curiosity PIC32MZ EF 2.0 Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Connect the I/O1 Xplained Pro Extension Kit (Temperature Sensor) to J501 (Extension Header 1 (EXT1)) on the Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#setup",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#setup"
  },"388": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#programming-hex-file"
  },"389": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started\\firmware\\\\pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits (PKOB4)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#programmingdebugging-application-project"
  },"390": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice LED1 blinking at a 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the SW1 switch on the Curiosity PIC32MZ EF 2.0 Development Board to change the default sampling rate to one second | Every subsequent press of switch SW1 on the Curiosity PIC32MZ EF 2.0 Development Board changes the default sampling rate to two seconds, four seconds, 500 milliseconds and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW1 press, notice LED1 toggling at the same sampling rate | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#running-the-demo"
  },"391": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on PIC32MZ EF MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#comments"
  },"392": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html#revision"
  },"393": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_getting_started/readme.html"
  },"394": {
    "doc": "Thermal camera",
    "title": "Thermal Camera based Heat Map Application on Curiosity PIC32MZ EF 2.0 Development Board + OLED C click + Grid-EYE click",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#thermal-camera-based-heat-map-application-on-curiosity-pic32mz-ef-20-development-board--oled-c-click--grid-eye-click",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#thermal-camera-based-heat-map-application-on-curiosity-pic32mz-ef-20-development-board--oled-c-click--grid-eye-click"
  },"395": {
    "doc": "Thermal camera",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html"
  },"396": {
    "doc": "Thermal camera",
    "title": "Description:",
    "content": "This application demonstrates a thermal camera based object heat map. The application senses the surface temperature of an object and display it as a colorful heat map. Temperatures are rendered in real-time and displayed as different colors to form a heat map. The application uses MPLAB Harmony v3 Legato Graphics library to display on OLED C click, the thermal frame data measured with Grid-EYE click. The application have two major tasks: one to acquire and process the data from the Grid-EYE click and the other one to display a frame of colors based on the temperature values measured at the previous task. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#description"
  },"397": {
    "doc": "Thermal camera",
    "title": "Modules/Technology Used:",
    "content": ". | Legato Grahpics library | TIME System Service | I2C driver | SPI driver | LE External Controller driver | Core Timer | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#modulestechnology-used"
  },"398": {
    "doc": "Thermal camera",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MZ EF 2.0 Development Board | OLED C click | Grid-EYE click | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#hardware-used"
  },"399": {
    "doc": "Thermal camera",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#softwaretools-used"
  },"400": {
    "doc": "Thermal camera",
    "title": "Setup:",
    "content": ". | Mount the OLED C click on the mikro BUS 1 of the Curiosity PIC32MZ EF 2.0 Development Board | Mount the Grid-EYE click on the mikro BUS 2 of the Curiosity PIC32MZ EF 2.0 Development Board | Power the Curiosity PIC32MZ EF 2.0 Development Board from a Host PC through a Type-A male to micro-B USB cable connected to Micro-B port (J700) | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#setup",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#setup"
  },"401": {
    "doc": "Thermal camera",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#programming-hex-file"
  },"402": {
    "doc": "Thermal camera",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32mzef_thermal_camera_heat_map/firmware/pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#programmingdebugging-application-project"
  },"403": {
    "doc": "Thermal camera",
    "title": "Running the Demo:",
    "content": ". | Reset or power cycle the device. | After the board powers up, the MPLAB Harmony Logo should appear and remain on the screen for 2 seconds. After the time elapsed, the screen should change, showing small rectangles with different colors | Place a finger above the sensor, and on display, the user can observe a figure of the finger in a color different than the background (red or orange) | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#running-the-demo"
  },"404": {
    "doc": "Thermal camera",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Drivers and Middleware on PIC32MZ EF MCUs using FreeRTOS | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#comments"
  },"405": {
    "doc": "Thermal camera",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Updated the application to use Grid-EYE and OLED-C Click routines, Removed MCC support, Regenerated and tested application. | v1.4.0 - Released demo application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html#revision"
  },"406": {
    "doc": "Thermal camera",
    "title": "Thermal camera",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_thermal_camera_heat_map/readme.html"
  },"407": {
    "doc": "Web Photo Frame",
    "title": "Web Photo Frame Application on Curiosity PIC32MZ EF 2.0 Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#web-photo-frame-application-on-curiosity-pic32mz-ef-20-development-board",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#web-photo-frame-application-on-curiosity-pic32mz-ef-20-development-board"
  },"408": {
    "doc": "Web Photo Frame",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html"
  },"409": {
    "doc": "Web Photo Frame",
    "title": "Description:",
    "content": "This application shows how to create a web-enabled digital photo frame using Harmony 3 under MPLAB Code Configurator (MCC). The application uses: Legato Graphics library to display images from an SD Card to a WQVGA display TCP/IP Stack to enable a Web Server to show images into a Web Browser . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#description"
  },"410": {
    "doc": "Web Photo Frame",
    "title": "Modules/Technology Used:",
    "content": ". | FreeRTOS | Time and Core Timer | File System Library using two files systems, FATFS on SD Card and MPFS inside NVM | TCP/IP Stack | Legato Graphics Library | SSD1936 driver | PDA TM4301B Display - 480x272 resolution | MaxTouch for Touch Screen | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#modulestechnology-used"
  },"411": {
    "doc": "Web Photo Frame",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MZ EF 2.0 Development Board (DM320209) | SSD1963 LCD Controller Graphics Card (AC320214) | High-Performance 4.3” WQVGA Display Module with maXTouch® Technology (AC320005-4) | KSZ8061 Daughter Board (AC320004-6) | microSD Click from Mikro (MIKROE-924) | USB I2C Click from Mikro (MIKROE-1985) | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#hardware-used"
  },"412": {
    "doc": "Web Photo Frame",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default/ | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#softwaretools-used"
  },"413": {
    "doc": "Web Photo Frame",
    "title": "Development Tools",
    "content": ". | MPLAB® X IDE v6.05 | MPLAB® XC32 C/C++ Compiler v4.21 | MPLAB® X IDE plug-ins: . | MPLAB Code Configurator (MCC) v5.3.0 | . | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#development-tools",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#development-tools"
  },"414": {
    "doc": "Web Photo Frame",
    "title": "Setup:",
    "content": ". | Mount the SSD1963 LCD Controller Graphics Card on the Graphics connector(J601) of Curiosity PIC32MZ EF 2.0 Development Board | Mount the microSD click board on the microBUS 1 connector of Curiosity PIC32MZ EF 2.0 Development Board | Mount the USB I2C click board on the microBUS 2 connector of Curiosity PIC32MZ EF 2.0 Development Board | Mount the KSZ8061 Ethernet Daughter Board to Ethernet PHY Module connector | Connect the WVGA LCD Display Module ribbon to the connector(J2) of the SSD1963 LCD Controller Graphics Card | Plug the 5.5-14V power cable to the power connecter(J200) of the Curiosity PIC32MZ EF 2.0 Development Board | Connect a microUSB Cable to the Debug USB plug (J700) of Curiosity PIC32MZ EF 2.0 Development Board | Connect and Ethernet Cable between the KSZ8061 Ethernet Board and your Router / PC | Connect a miniUSBcable between the USB I2C Click board and one of your PC USB ports . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#setup",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#setup"
  },"415": {
    "doc": "Web Photo Frame",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IPE | Device: PIC32MZ2048EFM144 | Select the Tool: Curiosity/Stater Kits (PKOB) and click on Connect | Hex File: Browse to pic32mz_web_photo_frame/hex folder and load the hex file available | Use the Main Menu: Settings-&gt;Release from reset | Click on the Program button and allow programming time | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#programming-hex-file"
  },"416": {
    "doc": "Web Photo Frame",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32mz_web_photo_frame/firmware/pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits (PKOB4)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#programmingdebugging-application-project"
  },"417": {
    "doc": "Web Photo Frame",
    "title": "Running the Demo:",
    "content": "Preparation . | Take a micro SD Card and copy the resource files and folders provided into the pic32mz_web_photo_frame/sdcard_files to the SD Card | Plug the SD Card into the mikroSD Click board | Plug an Ethernet Cable into the Ethernet Adapter and a Router in the same network with the PC, or directly to the PC. If plugged directly to the PC, the Ethernet Adapter on the PC should be configured for Static IP with the IP address 192.168.100.2 and Net Mask 255.255.255.0 | Open a terminal like Tera Term and connect it to the COM port assigned to the USB I2C click | Reset the board to start. | . Serial Terminal . | Observe the output on the Terminal | Observe the IP address of the board, needed for the Web Browser . | . Graphics Display . | After the board powers up, a splash screen should appear on the graphics display | Wait for the text to say Touch Screen To Start . | Touch the screen, the images should load one after the other at about 3-5 seconds interval | Observe the terminal, it will output what file will be displayed. | In the terminal, an IP address should be provided in the case the Ethernet Cable is pluged, see above screenshot | Open a browser on the PC and browse to the provided IP address in the Terminal | The followin Web Page should load . | Use the provided buttons to navigate the images. | Observe the terminal, it will output what file will be displayed. | . Observations . | The image display is not synchronized between the Graphics and the HTTP application, each has its own cursor. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#running-the-demo"
  },"418": {
    "doc": "Web Photo Frame",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on PIC32MZ EF MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#comments"
  },"419": {
    "doc": "Web Photo Frame",
    "title": "Revision:",
    "content": ". | v1.6.0 Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html#revision"
  },"420": {
    "doc": "Web Photo Frame",
    "title": "Web Photo Frame",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/pic32mzef_web_photo_frame/readme.html"
  },"421": {
    "doc": "SD Card Audio Player",
    "title": "SD Card GFX Audio Player Application on Curiosity PIC32MZ EF 2.0 Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#sd-card-gfx-audio-player-application-on-curiosity-pic32mz-ef-20-development-board",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#sd-card-gfx-audio-player-application-on-curiosity-pic32mz-ef-20-development-board"
  },"422": {
    "doc": "SD Card Audio Player",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html"
  },"423": {
    "doc": "SD Card Audio Player",
    "title": "Description:",
    "content": "The demonstration application creates an audio player that reads audio files (.WAV format only) from an SD card mounted on the click interface. The audio is played through the CODEC placed on the X32 header interface. It also provides feature to switch to the next track on the media. The sdcard_player application plays .wav files from the SD Card. The SD Card driver uses the SPI driver to interact with the SD Card. The application uses the File System Service to read/write data on the SD Card. The audio data read from the SD card is decoded by passing it to the WAV decoder. The decoded output is saved in the output buffers 1 and 2 which are used in ping pong manner. The output buffers 1 and 2 are submitted to the Codec driver for playing. The Codec is configured for 16-bit data and 48 kHz sampling frequency. The Codec driver sends the audio data to the AK4954 Codec using the I2S driver, which in turn uses DMA to transfer the audio data. The Codec driver uses the I2C driver to send commands to the AK4954 Codec. The application displays audio track from the SD card. It also provides volume increase/decrease scroll bar, Play/Pause button, Next Track button, Previous Track button. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#description"
  },"424": {
    "doc": "SD Card Audio Player",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Core Timer | DMA | . | Driver Modules . | I2S driver | SDSPI driver | AK4954 Codec driver | . | System Service Libraries . | File System | . | WAV Audio decoder | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#modulestechnology-used"
  },"425": {
    "doc": "SD Card Audio Player",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MZ EF 2.0 Development Board | MICROSD CLICK from MikroElektronika | PIC32 Audio Codec Daughter Card - AK4954 | HIGH-PERFORMANCE 4.3” WQVGA DISPLAY MODULE WITH MAXTOUCH® TECHNOLOGY | 565 LCD ADAPTER GRAPHICS CARD | Micro SD Card | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#hardware-used"
  },"426": {
    "doc": "SD Card Audio Player",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mzef_c2_ak4954 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#softwaretools-used"
  },"427": {
    "doc": "SD Card Audio Player",
    "title": "Setup:",
    "content": ". | Mount the microSD click board on the mikro bus 1 interface (J301, J302) on Curiosity PIC32MZ EF 2.0 Development Board | Insert a micro SD card into the microSD click board card slot. Ensure that the SD card contains WAV audio files | Mount the PIC32 Audio Codec Daughter Card - AK4954 on X32 HEADER 2 on Curiosity PIC32MZ EF 2.0 Development Board | Connect speaker or headphone to the headphone out (HP OUT) connector (Yellow colour) on top of the PIC32 Audio Codec Daughter Card - AK4954 | Attach the 565 LCD Adapter Graphics Card to the GFX Connector on the Curiosity PIC32MZ EF 2.0 Development Board | Connect the ribbon cable from the High-Performance 4.3” WQVGA Display module to the ribbon connector on the 565 LCD Adapter Graphics Card. | Power the Curiosity PIC32MZ EF 2.0 Development Board from a Host PC through a Type-A male to micro-B USB cable connected to Micro-B port (J700) | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#setup",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#setup"
  },"428": {
    "doc": "SD Card Audio Player",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#programming-hex-file"
  },"429": {
    "doc": "SD Card Audio Player",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sdcard_player\\firmware\\\\pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits (PKOB4)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#programmingdebugging-application-project"
  },"430": {
    "doc": "SD Card Audio Player",
    "title": "Running the Demo:",
    "content": ". | Reset or power cycle the device. | You should see a display as shown below | Insert the SD card, display renders the audio player options as shown below and starts playing the audio.Put on the headphone. You should be able to hear the audio track being played from the SD card. | Description of the options available are shown in below image . | Track List : Displays the Tracks | Previous Track : Plays the previous track in the list | Play/Pause : Play and Pause the track | Next Track : Plays next track in the list | Volume Control : Increases/Decreases the volume level ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#running-the-demo"
  },"431": {
    "doc": "SD Card Audio Player",
    "title": "Comments:",
    "content": "| . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#comments"
  },"432": {
    "doc": "SD Card Audio Player",
    "title": "Revision:",
    "content": ". | v1.6.0 - Added Graphics support, regenerated and tested application. | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application | v1.1.0 - Regenerated and tested the demo application | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html#revision"
  },"433": {
    "doc": "SD Card Audio Player",
    "title": "SD Card Audio Player",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/sdcard_player/readme.html"
  },"434": {
    "doc": "Snake Game",
    "title": "Snake Game Application on Curiosity PIC32MZ EF 2.0 Development Board + High-Performance WVGA LCD Display Module with maXTouch Technology using Legato Graphics",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#snake-game-application-on-curiosity-pic32mz-ef-20-development-board--high-performance-wvga-lcd-display-module-with-maxtouch-technology-using-legato-graphics",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#snake-game-application-on-curiosity-pic32mz-ef-20-development-board--high-performance-wvga-lcd-display-module-with-maxtouch-technology-using-legato-graphics"
  },"435": {
    "doc": "Snake Game",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html"
  },"436": {
    "doc": "Snake Game",
    "title": "Description:",
    "content": "This demonstration represents the classic snake game wherein the player maneuvers the snake and tries to eat the mice (food), which eventually grows the length of the snake. The player needs to protect the snake from hitting the boundary. The application uses the Legato Graphics library to implement the user interface. The template of each screen is made using the Legato Graphics Composer, while the snake was created using a rectangle widgets used inside a double chained list. The control for the thumbstick was implemented using the SPI driver library from Harmony 3. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#description"
  },"437": {
    "doc": "Snake Game",
    "title": "Modules/Technology Used:",
    "content": ". | Legato Graphics Library | SSD1936 driver | SPI Driver Library | Time System Service Library | Core Timer | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#modulestechnology-used"
  },"438": {
    "doc": "Snake Game",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MZ EF 2.0 Development Board | Thumbstick click from MikroElektronika | SSD1963 LCD Controller Graphics Card | High-Performance WVGA LCD Display Module with maXTouch ® Technology | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#hardware-used"
  },"439": {
    "doc": "Snake Game",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#softwaretools-used"
  },"440": {
    "doc": "Snake Game",
    "title": "Setup:",
    "content": ". | Mount SSD1963 LCD Controller Graphics Card on the Graphics connector(J601) of Curiosity PIC32MZ EF 2.0 Development Board | Mount Thumbstick click board on mikro bus click 1 connector of Curiosity PIC32MZ EF 2.0 Development Board | Connect the WVGA LCD Display Module ribbon to the connector(J2) of the SSD1963 LCD Controller Graphics Card | Plug the 5.5-14V power cable to the power connecter(J200) of the Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#setup",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#setup"
  },"441": {
    "doc": "Snake Game",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#programming-hex-file"
  },"442": {
    "doc": "Snake Game",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (snake_game/firmware/pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits (PKOB4)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#programmingdebugging-application-project"
  },"443": {
    "doc": "Snake Game",
    "title": "Running the Demo:",
    "content": ". | Perform a reset by pressing RESET button on the Curiosity PIC32MZ EF 2.0 Development Board | After the board powers up, a splash screen should appear followed by the Menu screen. | By using the Thumbstick, select the desired level to play and press the thumbstick to enter the level. | Use the thumbstick to change the snake direction in order to reach the food. | By pressing the Thumbstick button the user can go back to the Menu. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#running-the-demo"
  },"444": {
    "doc": "Snake Game",
    "title": "Comments:",
    "content": ". | The game should end when the snake hit an obstacle when it doesn’t have any remaining lives or when it eats food 8 times | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#comments"
  },"445": {
    "doc": "Snake Game",
    "title": "Revision:",
    "content": ". | v1.6.0 Regenerated and tested the application. | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 regenerated and tested demo application | v1.2.0 regenerated and tested demo application | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html#revision"
  },"446": {
    "doc": "Snake Game",
    "title": "Snake Game",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/snake_game/readme.html"
  },"447": {
    "doc": "WiFi based RGB LED Control",
    "title": "WiFi based RGB LED Control Application on Curiosity PIC32MZ EF 2.0 Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#wifi-based-rgb-led-control-application-on-curiosity-pic32mz-ef-20-development-board",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#wifi-based-rgb-led-control-application-on-curiosity-pic32mz-ef-20-development-board"
  },"448": {
    "doc": "WiFi based RGB LED Control",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html"
  },"449": {
    "doc": "WiFi based RGB LED Control",
    "title": "Description:",
    "content": "The WiFi RGB Easy Configuration demo showcases how to configure an embedded WiFi device that does not have a natural keyboard and screen. By using the internal Web server that accompanies the Microchip TCP/IP stack, end-users can use their browser to control the RGB(RedGreenBlue) Led. The Curiosity PIC32MZ EF 2.0 Development Board provides an XPRO connector. The XPRO connector is plugged with the ATWINC1500-XPRO board to configure WiFi connectivity. Also, the demo features changing the color of the on-board RGB LED using the webpage hosted by the Curiosity board. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#description"
  },"450": {
    "doc": "WiFi based RGB LED Control",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Output compare | Core Timer | NVM | . | Driver Modules . | Memory Driver | . | Middleware Libraries . | TCP/IP Stack | . | System Service Libraries . | File System | SYS Console | SYS Command | . | STDIO Library | WINC1500 Driver | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#modulestechnology-used"
  },"451": {
    "doc": "WiFi based RGB LED Control",
    "title": "Hardware Used:",
    "content": ". | Curiosity PIC32MZ EF 2.0 Development Board | ATWINC1500-XPRO | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#hardware-used"
  },"452": {
    "doc": "WiFi based RGB LED Control",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . Note: : This demo uses wireless WINC v19.6.1 stack and driver. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#softwaretools-used"
  },"453": {
    "doc": "WiFi based RGB LED Control",
    "title": "Setup:",
    "content": ". | Connect ATWINC1500-XPRO to Extension header (J501) on Curiosity PIC32MZ EF 2.0 Development Board | Power the Curiosity PIC32MZ EF 2.0 Development Board from a Host PC through a Type-A male to micro-B USB cable connected to Micro-B port (J700) | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#setup",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#setup"
  },"454": {
    "doc": "WiFi based RGB LED Control",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32MZ2048EFM144” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#programming-hex-file"
  },"455": {
    "doc": "WiFi based RGB LED Control",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (wifi_rgb_easy_configuration\\firmware\\\\pic32mz_ef_curiosity_v2.X) in MPLAB X IDE | Ensure “Curiosity/Starter Kits PKOB4” is selected as hardware tool to program/debug the application | Navigate to “../reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/firmware/src/utilities” folder | Double click on “mpfs2” jar file (Note : Make sure java is installed) | Select Source Directory and browse to the folder “”../reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/firmware/src/web_pages” as shown in below image | Select “PIC32 Image” and click on Generate button to generate mpfs_img2.c file as shown in below image | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#programmingdebugging-application-project"
  },"456": {
    "doc": "WiFi based RGB LED Control",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | Perform a reset by pressing the “RESET” switch | The serial terminal displays the below message “TCP/IP Stack: Initialization Started TCP/IP Stack: Initialization Ended - success SYS_Initialize: The MPFS2 File System is mounted WINC IP Address: 192.168.1.1” | When the demonstration runs, the WINC1500 goes into SoftAP mode (it behaves as an access point) and displays itself as “MCHPSoftAP” network | From a smartphone or personal computer, connect to the “MCHPSoftAP” network, which is the SoftAP network started by the demonstration. Then, bring up a web page by entering the IP address(e.g., 192.168.1.1) of the SoftAP network into the smartphone browser | When the web page is displayed, On the right top corner of the page, there is a widget through which you can change the color of the RGB LED on the Curiosity board | Click the text box to display a pop-up for selecting the color of the RGB LED. Click the Submit button to set the color of the RGB LED on the Curiosity board | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#running-the-demo",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#running-the-demo"
  },"457": {
    "doc": "WiFi based RGB LED Control",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#comments"
  },"458": {
    "doc": "WiFi based RGB LED Control",
    "title": "Revision:",
    "content": ". | v1.6.0 Regenerated and tested application. | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Regenerated and tested application. | v1.2.0 Regenerated and tested application. | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html#revision"
  },"459": {
    "doc": "WiFi based RGB LED Control",
    "title": "WiFi based RGB LED Control",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration/readme.html"
  },"460": {
    "doc": "Curiosity PIC32MZ EF 2.0 Development Board",
    "title": "Curiosity PIC32MZ EF 2.0 Development Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on Curiosity PIC32MZ EF 2.0 Development Board. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | Getting Started Extended | Click Here | . | 3 | Getting Started Middleware - EEPROM/Thumb drive temperature logger | Click Here | . | 4 | SD Card Audio Player | Click Here | . | 5 | WiFi based RGB LED Control | Click Here | . | 6 | Snake Game | Click Here | . | 7 | Thermal Camera based Heat Map | Click Here | . | 8 | Web Photo Frame | Click Here | . More Application Demos . For more application demos on Curiosity PIC32MZ EF 2.0 Development Board and other Development Boards/Kits having the same part number (PIC32MZ2048EFM144) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_curiosity_v2/readme.html",
    "relUrl": "/apps/pic32mz_ef_curiosity_v2/readme.html"
  },"461": {
    "doc": "Live update on PIC32MZ",
    "title": "Live update Application on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#live-update-application-on-pic32mz-embedded-connectivity-with-fpu-ef-starter-kit",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#live-update-application-on-pic32mz-embedded-connectivity-with-fpu-ef-starter-kit"
  },"462": {
    "doc": "Live update on PIC32MZ",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html"
  },"463": {
    "doc": "Live update on PIC32MZ",
    "title": "Description:",
    "content": "The Live update application uses the dual bank flash feature available on the PIC32MZ Microcontrollers (MCUs). The banks on PIC32MZ MCU are named as BANK1 and BANK2. At any point of time, the application considers the bank on which it is currently executing from as active bank while the other bank is marked as inactive bank. The dual bank flash enables programming the inactive bank with a new version of the firmware while running the current version of the firmware from the active bank. The application updates the new version of the firmware to the inactive bank while the current version of the firmware runs from the active bank. The application identifies the flash bank which has the latest version of the firmware (active bank) and toggles a specific LED at a periodic rate. For example, it starts with toggling LED1 and when there is bank swap (active bank changed following successful upgrade), it toggles LED2. Similarly, the process repeats for every successful application firmware update. ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#description",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#description"
  },"464": {
    "doc": "Live update on PIC32MZ",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | NVM | CORE TIMER | UART | Harmony Core | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#modulestechnology-used"
  },"465": {
    "doc": "Live update on PIC32MZ",
    "title": "Hardware Used:",
    "content": ". | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#hardware-used",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#hardware-used"
  },"466": {
    "doc": "Live update on PIC32MZ",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32mz_ef_sk . | Refer the Release Notes to know the MPLAB X IDE and MHC/MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | Windows command prompt | Python 2.7 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#softwaretools-used"
  },"467": {
    "doc": "Live update on PIC32MZ",
    "title": "Setup:",
    "content": ". | Connect a mini USB cable to the UART-USB port J11 | For programming, connect a mini USB cable to the USB Debug port J3 | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#setup",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#setup"
  },"468": {
    "doc": "Live update on PIC32MZ",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32mz_uart_live_update/firmware/pic32mz_ef_sk.X) in MPLAB X IDE | Ensure “Starter Kits (PKOB)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#programmingdebugging-application-project"
  },"469": {
    "doc": "Live update on PIC32MZ",
    "title": "Running the Bootloader application:",
    "content": "For the first time, the Live update application is programmed by using either Harmony basic bootloader or Harmony fail-safe bootloader. | Download the MPLAB Harmony Bootloader and Bootloader UART Apps packages. | Connect a mini USB cable to the DEBUG port of the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit. | Build and program the UART fail safe bootloader (Dual bank bootloader) which is in (path: &lt;Your Harmony Framework download folder&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/pic32mz_ef_sk.X) using the MPLAB X IDE. | Build the Live update application (path: &lt;Live Update application folder&gt;/firmware/pic32mz_ef_sk.X) using the MPLAB X IDE but do not program. | From the command prompt, run the bootloader host script “btl_host.py” available at &lt;Your Harmony Framework download folder&gt;/bootloader/tools to program the application binary. | python &lt;Your Harmony Framework download folder&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d pic32mz -a 0x9D100000 -f &lt;Live Update application folder&gt;/hex/pic32mz_ef_sk.X.production.bin | Note: If you need to know more information on the bootloader host script, refer Help for setting up the host script available at &lt;Your Harmony Framework download folder&gt;/bootloader/doc/help_bootloader.chm | . | Following screenshot shows successful programming of the application binary. | The messages “Swapping Bank And Rebooting and Reboot Done” in below screenshot signifies that bootloading is successful. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#running-the-bootloader-application",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#running-the-bootloader-application"
  },"470": {
    "doc": "Live update on PIC32MZ",
    "title": "Running the Live update application:",
    "content": ". | Perform “Running the Bootloader application” steps mentioned above, if not done already. | If the above step is successful, then LED1 or LED2 on the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit should start blinking which indicates the application is running from BANK 1 or BANK 2 based on from where the program is running. | Reset or Power cycle the device. | Run the host script “live_update.py” for live update application from command prompt available at &lt;Live Update application folder&gt;/scripts to program the new version of the firmware to an inactive panel while the current version of the application is being run from the active panel. | python &lt;Live Update application folder&gt;/scripts/live_update.py -v -s -i &lt;COM PORT&gt; -d pic32mz -a 0x9D100000 -f &lt;Live Update application folder&gt;/hex/pic32mz_ef_sk.X.production.bin | The following screenshot shows the Live update script help. | . | The following screenshot shows the example for output of successful firmware programming. | If the Live update is success then LED3 should turn ON. | This indicates that the Live update is successful | . | In case of any error during the Live update i.e. in Step 4, the LED3 turns OFF. Follow the below steps recover from the error: . | Press and hold the Switch SW1 to reset the system then repeat the step 4 to program the Live update application. | or | Reset or Power cycle the device and repeat from the step 4 to program the Live update application. | . | If the Live update is success then LED1 or LED2 should start blinking which indicates the application is running from BANK 1 or BANK 2 based on from where the program is running. | LED1 for BANK 1 | LED2 for BANK 2 | . | Reset or Power Cycle the device for the newly programmed application to run. | Observe the change in LED toggling compared to the LED which was toggling in the previous step. This indicates that the newly updated image is running properly. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#running-the-live-update-application",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#running-the-live-update-application"
  },"471": {
    "doc": "Live update on PIC32MZ",
    "title": "Comments:",
    "content": ". | Reference Application Note: Live Update application on PIC32MZ MCUs using MPLAB Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#comments",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#comments"
  },"472": {
    "doc": "Live update on PIC32MZ",
    "title": "Revision:",
    "content": ". | v1.6.0 Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 regenerated and tested the application | v1.2.0 regenerated and tested the application | v1.1.0 regenerated and tested the application | v1.0.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#revision",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html#revision"
  },"473": {
    "doc": "Live update on PIC32MZ",
    "title": "Live update on PIC32MZ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk/pic32mz_uart_live_update/readme.html"
  },"474": {
    "doc": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit. | SI No | Demo Name | Download Link | . | 1 | Live Update | Click Here | . More Application Demos . For more application demos on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit and other Development Boards/Kits having the same part number (PIC32MZ2048EFH144) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32mz_ef_sk/readme.html",
    "relUrl": "/apps/pic32mz_ef_sk/readme.html"
  },"475": {
    "doc": "Getting Started",
    "title": "Getting Started Application on SAMC21N Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#getting-started-application-on-samc21n-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#getting-started-application-on-samc21n-xplained-pro-evaluation-kit"
  },"476": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html"
  },"477": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "This application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to 1 second, 2 seconds, 4 seconds and back to 500 milliseconds every time you press the switch SW0 on the SAMC21N Xplained Pro Evaluation Kit. Also, an LED LED0 is toggled every time temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#description",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#description"
  },"478": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | RTC | PORTS | SERCOM(I2C) | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#modulestechnology-used"
  },"479": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAMC21N Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#hardware-used"
  },"480": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_c21n_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#softwaretools-used"
  },"481": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAMC21N Xplained Pro Evaluation Kit | The SAMC21N Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG ) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAMC21N Xplained Pro Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#setup",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#setup"
  },"482": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21N18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#programming-hex-file"
  },"483": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started\\firmware\\\\sam_c21n_xpro.X) in MPLAB X IDE | Ensure “SAM C21n Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#programmingdebugging-application-project"
  },"484": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAMC21N Xplained Pro Evaluation Kit to change the default sampling rate to 1 second . | Every subsequent pressing of switch SW0 on SAMC21N Xplained Pro Evaluation Kit changes the default sampling rate to 2 seconds, 4 seconds and 500 ms and back to 1 second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#running-the-demo"
  },"485": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#comments"
  },"486": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html#revision"
  },"487": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/samc21n_getting_started/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/samc21n_getting_started/readme.html"
  },"488": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "SDADC Conversion Interrupt Mode Application on SAMC21N Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#sdadc-conversion-interrupt-mode-application-on-samc21n-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#sdadc-conversion-interrupt-mode-application-on-samc21n-xplained-pro-evaluation-kit"
  },"489": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html"
  },"490": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Description:",
    "content": "This application demonstrates SDADC Conversion in interrupt mode. The application uses internal bandgap reference as the input voltage source. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#description",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#description"
  },"491": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SDADC | SUPC | EVSYS | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#modulestechnology-used"
  },"492": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Hardware Used:",
    "content": ". | SAMC21N Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#hardware-used",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#hardware-used"
  },"493": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | MPLAB XC32 C/C++ Compiler v3.01 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#softwaretools-used"
  },"494": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Setup:",
    "content": ". | Ensure that both the positive (INP) and negative (INN) pins on SAMC21N Xplained Pro Evaluation Kit are connected to a voltage source | The SAMC21N Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG ) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAMC21N Xplained Pro Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#setup",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#setup"
  },"495": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21N18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#programming-hex-file"
  },"496": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sdadc_conversion_interrupt\\firmware\\\\sam_c21n_xpro.X) in MPLAB X IDE | Ensure “SAM C21n Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#programmingdebugging-application-project"
  },"497": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | SDADC is configured to use the internal VREF and the range is set to 4.096 V full scale and the default setting of OSR is 64 | Pressing the ‘r’ key will read the result and display it, in a form scaled to mV | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#running-the-demo",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#running-the-demo"
  },"498": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Comments:",
    "content": ". | Reference Application Note: Using Sigma-Delta Analog-to-Digital Converter on SAMC MCU with MPLAB Harmony v3 | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#comments",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#comments"
  },"499": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#revision",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html#revision"
  },"500": {
    "doc": "SDADC Conversion Interrupt Mode",
    "title": "SDADC Conversion Interrupt Mode",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_interrupt/readme.html"
  },"501": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "SDADC Conversion Polling Mode Application on SAMC21N Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#sdadc-conversion-polling-mode-application-on-samc21n-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#sdadc-conversion-polling-mode-application-on-samc21n-xplained-pro-evaluation-kit"
  },"502": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html"
  },"503": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Description:",
    "content": "This application demonstrates SDADC Conversion in Polling mode. The application uses internal bandgap reference as the input voltage source. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#description",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#description"
  },"504": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SDADC | SUPC | EVSYS | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#modulestechnology-used"
  },"505": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Hardware Used:",
    "content": ". | SAMC21N Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#hardware-used",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#hardware-used"
  },"506": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | MPLAB XC32 C/C++ Compiler v3.01 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#softwaretools-used"
  },"507": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Setup:",
    "content": ". | Ensure that both the positive (INP) and negative (INN) pins on SAMC21N Xplained Pro Evaluation Kit are connected to a voltage source | The SAMC21N Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG ) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAMC21N Xplained Pro Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#setup",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#setup"
  },"508": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21N18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#programming-hex-file"
  },"509": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sdadc_conversion_interrupt\\firmware\\\\sam_c21n_xpro.X) in MPLAB X IDE | Ensure “SAM C21n Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#programmingdebugging-application-project"
  },"510": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | SDADC is configured to use the internal VREF and the range is set to 4.096 V full scale and the default setting of OSR is 64 | Pressing the ‘r’ key will read the result and display it, in a form scaled to mV | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#running-the-demo",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#running-the-demo"
  },"511": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Comments:",
    "content": ". | Reference Application Note: Using Sigma-Delta Analog-to-Digital Converter on SAMC MCU with MPLAB Harmony v3 | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#comments",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#comments"
  },"512": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#revision",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html#revision"
  },"513": {
    "doc": "SDADC Conversion Polling Mode",
    "title": "SDADC Conversion Polling Mode",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/sdadc_conversion_polling/readme.html"
  },"514": {
    "doc": "SAM C21N Xplained Pro Evaluation Kit",
    "title": "SAM C21N Xplained Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM C21N Xplained Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | SDADC Conversion Polling Mode | Click Here | . | 3 | SDADC Conversion Interrupt Mode | Click Here | . More Application Demos . For more application demos on SAM C21N Xplained Pro Evaluation Kit and other Development Boards/Kits having the same part number (ATSAMC21N18A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21n_xpro/readme.html",
    "relUrl": "/apps/sam_c21n_xpro/readme.html"
  },"515": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Getting Started with Harmony v3 Drivers on SAM C21 MCU Using FreeRTOS",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#getting-started-with-harmony-v3-drivers-on-sam-c21-mcu-using-freertos",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#getting-started-with-harmony-v3-drivers-on-sam-c21-mcu-using-freertos"
  },"516": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html"
  },"517": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM. When a character is entered on the console, the last five written temperature values are read from the EEPROM and displayed on the console. Also, an LED0 is toggled every time the temperature is displayed on the serial console . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#description",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#description"
  },"518": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | SERCOM(I2C) | SERCOM(USART) | . | Drivers . | I2C | USART | . | Third Party Libraries . | FreeRTOS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#modulestechnology-used"
  },"519": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Hardware Used:",
    "content": ". | SAM C21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#hardware-used",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#hardware-used"
  },"520": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_c21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#softwaretools-used"
  },"521": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM C21 Xplained Pro Evaluation Kit | The SAM C21 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM C21 Xplained Pro Evaluation Kit . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#setup",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#setup"
  },"522": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21J18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#programming-hex-file"
  },"523": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (samc21_getting_started/firmware/drivers_freertos_sam_c21_xpro.X) in MPLAB X IDE | Ensure “SAMC21 Xplained Pro (EDBG)” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#programmingdebugging-application-project"
  },"524": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °C) being displayed on the terminal every second, as shown below . | Also, notice the LED0 blinking at one second rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press any key to display the last five written temperature values from the EEPROM | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#running-the-demo",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#running-the-demo"
  },"525": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Drivers on SAM C21 MCUs Using FreeRTOS | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#comments",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#comments"
  },"526": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#revision",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html#revision"
  },"527": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Getting Started with Drivers using FreeRTOS",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_c21_xpro/samc21_getting_started_freertos/readme.html"
  },"528": {
    "doc": "Low Power",
    "title": "Low Power Application on SAM C21 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#low-power-application-on-sam-c21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#low-power-application-on-sam-c21-xplained-pro-evaluation-kit"
  },"529": {
    "doc": "Low Power",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html"
  },"530": {
    "doc": "Low Power",
    "title": "Description",
    "content": "The application demonstrates low power application on SAM C21 Xplained Pro evaluation kit. On power-up, the application is in sleep (standby) mode. The application wakes up from the sleep mode and enters active mode when you cover the light sensor (by placing a hand over it) on the I/O1 Xplained Pro extension kit. The application periodically prints room temperature on a serial terminal while the light sensor is covered. The application goes back to sleep (standby) mode when you uncover the light sensor. LED0 in the SAM C21 evaluation kit is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#description",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#description"
  },"531": {
    "doc": "Low Power",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | RTC | USART | DMAC | ADC | PM | SUPC | EIC | EVSYS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#modulestechnology-used"
  },"532": {
    "doc": "Low Power",
    "title": "Hardware Used:",
    "content": ". | SAM C21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | Power Debugger | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#hardware-used",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#hardware-used"
  },"533": {
    "doc": "Low Power",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_c21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#softwaretools-used"
  },"534": {
    "doc": "Low Power",
    "title": "Setup:",
    "content": ". | Connect the I/O1 Xplained Pro extension kit to Extension Header 2 (EXT2) of the SAMC21 Xplained Pro evaluation kit | Remove the current measurement jumper on the SAMC21 (highlighted in hardware setup with letter A) and connect to channel A of power debugger using burg connectors (highlighted in hardware setup with letter B) as shown in the Hardware Setup figure | Probe Pin #9 (PA28 - Switch pin) and Pin #10 (PA27 - wake-up test pin) on Extension Header 3 (EXT3) as highlighted in the Hardware Setup figure to measure wake-up time | Connect a USB cable to the DEBUG USB port for programming. | Connect a USB cable to the power debugger DEBUG USB port for current measurement. | . Note : . | Make sure common ground is connected with the board while using logic analyzer/CRO. | SAMC21 supports both 3.3 V and 5 V. The SAMC21 Xplained Pro kit operates at 3.3 V since the VCC-SEL jumper on board is set to 3.3 V | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#setup",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#setup"
  },"535": {
    "doc": "Low Power",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMC21J18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#programming-hex-file"
  },"536": {
    "doc": "Low Power",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (low_power\\firmware\\\\sam_c21_xpro.X) in MPLAB X IDE. | Ensure “SAMC21 Xplained Pro (EDBG)” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar. | Follow the steps in “Running the Demo” section below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#programmingdebugging-application-project"
  },"537": {
    "doc": "Low Power",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | Perform a reset by pressing the “RESET” switch | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to print the temperature and message on the terminal. You should see the following messages (containing the temperature value in °F) on the terminal every 500 milliseconds for the duration the light sensor is covered | You should see the temperature values (in °F) getting printed on the terminal every 500 milliseconds for the duration the light sensor is covered | Observe Current Consumption on Data Visualizer Note:The Data Visualizer is a program to process and visualize data. The Data Visualizer can receive data from various sources such as the Embedded Debugger Data Gateway Interface (EDBG DGI) and COM ports. It is possible to track an application in run-time using a terminal graph or oscilloscope. It analyzes the power consumption of an application through correlation of code execution and power consumption when used together with a supported probe or board. | Open Data Visualizer application from your PC and select Power Debugger Data Gateway on DGI Control Panel | Click on the Connect button to have the Data Visualizer ready to receive information from the Power Debugger Data Gateway | After the Data Visualizer is connected to the Power Debugger Data Gateway, select the Power interface and click on the Start button | On the right-hand side of the Power Analysis window, click on the Control Panel tab and Disable Channel B Below image shows the device in Standby mode, smaller peaks are the 500ms timer expiry peaks | Cover the light sensor on the IO Xplained Pro board (by placing your hand over it) to print the temperature on the terminal. The following image shows the power consumption values in Standby mode and CPU Active mode | Press Switch SW0 to switch from Standby mode to Idle mode. The following image shows the transition power consumption values from Standby to Idle mode. Idle mode consumes more power compared to Standby mode | Place your hand over the light sensor. The device will wake up on the next ADC window monitor interrupt, read and print data on serial and then re-enter Standby mode. The following image shows the transition of the power consumption by switching from Idle mode to Standby mode Note that the above results highlight the power consumption is lower in Standby mode than in Idle mode. | . | Wake-up Time Measurement Using Logic Analyzer/ Cathode-Ray Oscilloscope (CRO) To demonstrate the CPU wake up time, switch SW0 is configured to generate an interrupt. A General Purpose Input/Output (GPIO) is toggled in the Interrupt Service Routine (ISR) of the switch press event. The MCU comes out of Sleep mode when an interrupt occurs (in this case, the switch press interrupt). The time between the switch press and the GPIO toggle in the ISR is the wake up time. | Press the SW0 switch and capture the signals to measure the wake-up time in Standby and Idle mode. The following image shows the wake-up time from Standby mode | The following image shows the wake-up time from Idle mode By observing the outputs, you can conclude that the wake-up time is greater in Standby mode than in Idle mode | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#running-the-demo",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#running-the-demo"
  },"538": {
    "doc": "Low Power",
    "title": "Comments:",
    "content": ". | This application is developed by modifying the generated “eic.c” file. If you need to reconfigure or regenerate this demo using the MCC, make sure you don’t replace this file. This change is required to measure the instant wakeup time of the device. | Reference Training Module: Low Power Application on SAMC2x (Cortex M0+) MCUs Using MPLAB Harmony v3 Peripheral Libraries | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#comments",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#comments"
  },"539": {
    "doc": "Low Power",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 regenerated and tested the demo application | v1.0.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html#revision",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html#revision"
  },"540": {
    "doc": "Low Power",
    "title": "Low Power",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/samc21_low_power/readme.html",
    "relUrl": "/apps/sam_c21_xpro/samc21_low_power/readme.html"
  },"541": {
    "doc": "SAM C21 Xplained Pro Evaluation Kit",
    "title": "SAM C21 Xplained Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM C21 Xplained Pro evaluation kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started with Drivers using FreeRTOS | Click Here | . | 2 | Low Power | Click Here | . More Application Demos . For more application demos on SAM C21 Xplained Pro Evaluation Kit and other Development Boards/Kits having the same part number (ATSAMC21J18A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_c21_xpro/readme.html",
    "relUrl": "/apps/sam_c21_xpro/readme.html"
  },"542": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Application migration from 8-bit AVR to 32-bit SAM D21 on SAM D21 Curiosity Nano",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#application-migration-from-8-bit-avr-to-32-bit-sam-d21-on-sam-d21-curiosity-nano",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#application-migration-from-8-bit-avr-to-32-bit-sam-d21-on-sam-d21-curiosity-nano"
  },"543": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html"
  },"544": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Description:",
    "content": "This Applications acts as reference for migrating applications from 8-bit AVR Microcontroller (MCU) to 32- bit MCU. This example shows how to migrate an application from ATmega4809 MCU to SAMD21G17D MCU. This application uses the AVR ATMega4809 application which helps in Getting Started with UART on ATMega4809 . The AVR ATMega4809 application shows how to implement a command line interface. This way, the microcontroller can receive control commands via the USART. In this use case, an LED is controlled using commands sent from the MPLAB Data Visualizer. The application shows steps to get started migrating to SAMD21 and later extend the functionality by adding more peripherals. The migration application makes use of SAM D21 Curiosity Nano Evaluation Kit and MPLAB® Harmony v3 framework. The application sends “Hello World” message to serial terminal using (SERCOM) USART and utilizes STDIO library to receive the command from the serial terminal to control the LED0 on SAMD21 Curiosity Nano Evaluation Kit. Switch SW0 is configured with External Interrupt controller (EIC) to toggle the LED0, when switch is pressed. It allows demonstrates Serial Peripheral Interface(SPI) self loop back mode and Direct memory Address (DMA) to send SPI self loopback status to the serial terminal. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#description"
  },"545": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORT | EIC | SERCOM(SPI) | SERCOM(USART) | DMA | Systick | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#modulestechnology-used"
  },"546": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Connection wires | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#hardware-used"
  },"547": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | MPLAB XC32 C/C++ Compiler v3.01 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#softwaretools-used"
  },"548": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Setup:",
    "content": ". | Connect the SAM D21 Curiosity Nano Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Connect a wire from PA16 to PA19 on SAM D21 Curiosity Nano Development Kit for SPI Self Loopback testing. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#setup",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#setup"
  },"549": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#programming-hex-file"
  },"550": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (atmega4809_to_samd21_migration/firmware/atmega4809_to_samd21_migration.X) in MPLAB X IDE | Ensure On-Board Nano Debuggers selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#programmingdebugging-application-project"
  },"551": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term and configure it to 9600 baud rate and the standard 8-N-1 frame format | Enable Local echo and select carriage return + line feed for transmit | In Tera Term you should see Hello World message displayed | Below you will see a message Received SPI Valid Data indicating SPI self loopback test success | Type ON in serial terminal and press Enter to turn on LED0 on SAMD21 Curiosity Nano kit | Type OFF in serial terminal and press Enter to turn off LED0 on SAMD21 Curiosity Nano kit | Press Switch SW0 on the SAMD21 Curiosity Nano kit to toggle the LED0 twice with 500ms of delay. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#running-the-demo"
  },"552": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Comments:",
    "content": "| Reference Migration Guide: Application migration from 8-bit AVR to 32-bit SAM D21 on SAM D21 Curiosity Nano | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#comments"
  },"553": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#revision",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html#revision"
  },"554": {
    "doc": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "title": "Application migration from 8-bit AVR to 32-bit SAM D21",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html",
    "relUrl": "/apps/sam_d21_cnano/atmega4809_to_samd21_migration/readme.html"
  },"555": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "BLE based Weather Station and Motion Sensor Application on SAM D21 Curiosity Nano and Nano Base for Click boards",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#ble-based-weather-station-and-motion-sensor-application-on-sam-d21-curiosity-nano-and-nano-base-for-click-boards",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#ble-based-weather-station-and-motion-sensor-application-on-sam-d21-curiosity-nano-and-nano-base-for-click-boards"
  },"556": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html"
  },"557": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Description:",
    "content": "The application demonstrates a solution based on Microchip products for environmental or weather industry products. The application demonstrates posting of weather and motion sensor data collected from the various sensors to android mobile application via BLE (Bluetooth Low Energy). The PTH (Pressure, Temperature and Humidity) collected from BME680 sensor of the Mikro elektronika 13DOF click board and motion sensor data collected from BMI088 and BMM150 sensors of Mikro elektronika 13DOF Click are posted to the android application via BM71 Bluetooth module. The host microcntroller (SAM D21) is interfaced to the 13DOF click over the I2C interface and BM71 XPRO over UART. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#description"
  },"558": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Timer | SERCOM | . | Driver Modules . | BM71 Driver | . | STDIO Library | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#modulestechnology-used"
  },"559": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Curiosity Nano Base for click boards | 13DOF Click | BM71-XPRO | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#hardware-used"
  },"560": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/samd21_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Download and Install Microchip Bluetooth Data Android App in your android mobile | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#softwaretools-used"
  },"561": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Adding private characteristics to BM71:",
    "content": "Hardware Setup . | In BM71-XPRO, Change jumper J2 to select USB | In BM71-XPRO, Configure DIP switch SW2 with below configurations | All DIP switch ON | Power the BM71-XPRO from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J1) | Perform reset by pressing switch SW1 on BM71-XPRO and check blue LD1 is ON | . Programming private characteristics . | Download the manual configuration tool from BM70/71 Firmware &amp; Software Tools v1.11 | Extract and locate configuration tool from below location - Your_downloaded_folder \\\\Firmware &amp; Software Tools v1.11\\\\ConfigurationTool\\\\IS187x_102_BLEDK3v1.11_UI1.00 | Double click on IS187x_102_BLEDK3v1.11_UI1.00.exe | Click on “Load” button and select “Load Text File” | Select “bm71_environmental_private_service.txt” from bm71_configuration folder present in firmware folder | Click on “EDIT” option . | Select “0x01: BM71” in BLEDK and click ok . | Click on “Finish” . | Click on “Write” . | Select respective COM Port and set baud rate to 115200 then click on Write . | Click on Yes to successfully update the private characteristics on to BM71 module. | After successful update, click ok and remove the power from BM71-XPRO and change jumper J2 to select EXT . | Turn OFF DIP 1 switch | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#adding-private-characteristics-to-bm71",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#adding-private-characteristics-to-bm71"
  },"562": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Setup:",
    "content": ". | Mount SAM D21 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount the 13DOF Click on the mikro bus 1 connector of Curiosity Nano Base board | Connect the BM71-XPRO on to EXT 1 connector of Curiosity Nano Base board | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#setup",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#setup"
  },"563": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . Before proceeding with this step complete “Adding private characteristics to BM71” step. | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#programming-hex-file"
  },"564": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Programming/Debugging Application Project:",
    "content": "Before proceeding with this step complete “Adding private characteristics to BM71” step. | Open the project (ble_weather_station\\firmware\\\\sam_d21_cnano.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#programmingdebugging-application-project"
  },"565": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Running the Demo:",
    "content": "Before proceeding install Microchip Bluetooth Data android app in an Android Smartphone. | Enable Bluetooth and location from Smatphone settings | Perform reset by unplugging and re-plugging the power cable of SAM D21 Curiosity Nano | After power up, open “Microchip Bluetooth Data (MBD)” android app from your smartphone and tap on “BLE Sensor Node” icon on the dashboard. If prompted, allow the application to turn on Bluetooth. | Scan for Bluetooth devices by tapping START SCAN option. The BM71 device should appear as MCHP in the list of Bluetooth devices. | Stop the scan and connect using the MCHP BLE device. This will establish a connection between the MBD BLE application and the BM71 BLE device. | Once connected, the application shows the proximity screen and displays the Status of the Bluetooth link and using RSSI, the approximate range between the Android device and the SAM D21 Curiosity Nano Evaluation Kit . | Navigate to the Environment Sensor screen by swiping left on the proximity screen as shown in above figure . | Tap on the Graph button next to the Temperature, Humidity and Pressure to see the PTH values plotted on graphs . | Navigate to the Accelerometer Sensor screen by swiping twice on to left from Environment screen . | Click on start button to see the Accelerometer values plotted on graph . | Navigate to the Gyroscope Sensor screen by swiping left on the Accelerometer screen . | Click on start button to see the Gyroscope values plotted on graph . | Navigate to the 3D Plot screen by swiping left on the Gyroscope screen . | Keep finger on 13DOF click board to see PTH values changing and move the 13DOF click board to see accelerometer and gyroscope values changing. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#running-the-demo"
  },"566": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "Comments:",
    "content": ". | Other features on the application like the Step Count and Light are not supported by this demo. Navigating to these screens may lead to an undefined behavior. | Code related for custom private services are added manually, harmony v3 framework doesn’t generate code related to it. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . Revision: . | v1.6.0 - Replaced 10Dof click with 13DOF click, regenerated and tested application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Updated the demo application with click routines and added mcc support. | v1.3.0 - Regenerated and tested application. | v1.2.0 regenerated and tested the demo application | v1.1.0 regenerated and tested the demo application | v1.0.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html#comments"
  },"567": {
    "doc": "BLE based Weather Station and Motion Sensor Application",
    "title": "BLE based Weather Station and Motion Sensor Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/ble_weather_station/readme.html",
    "relUrl": "/apps/sam_d21_cnano/ble_weather_station/readme.html"
  },"568": {
    "doc": "Fitness Tracker",
    "title": "Fitness Tracker Application on SAM D21 Curiosity Nano Evaluation Kit and Nano Base for Click boards",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#fitness-tracker-application-on-sam-d21-curiosity-nano-evaluation-kit-and-nano-base-for-click-boards",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#fitness-tracker-application-on-sam-d21-curiosity-nano-evaluation-kit-and-nano-base-for-click-boards"
  },"569": {
    "doc": "Fitness Tracker",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html"
  },"570": {
    "doc": "Fitness Tracker",
    "title": "Description:",
    "content": "The application demonstrates a solution based on Microchip products for health care industry and wearable products. The application displays heart rate readings (in beats per minute - bpm) on a very low power consuming display. The Mikroelektronika Heart Rate 9 click board is used to read the heart pulse. Mikroelektronika Eink E-Paper display 2,9” 296x128 dots display is used for displaying heart rate. The Eink E-Paper display 2,9” 296x128 dots display contains the eINK click adapter board and the E-Paper display 2,9” 296x128 dots display. The Heart Rate 9 click introduces Microchip’s proprietary method of measuring multiple signals in a body using pseudorandom binary sequence generation and phase division multiplexing This algorithm for processing data from the sensor and it can send data for 3 different diodes (green, ir, red) who give out a diagram of the heartbeat and its frequency per minute. The Eink E-Paper display 2,9” 296x128 dots display is a very low power consumption display and it can retain the information, even after disconnecting from the power source. The host MCU SAM D21 is interfaced with the Heart Rate 9 click over the USART interface and eINK click over SPI Interface. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#description"
  },"571": {
    "doc": "Fitness Tracker",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Timer | EIC | SERCOM (SPI) | SERCOM (USART) | . | STDIO Library | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#modulestechnology-used"
  },"572": {
    "doc": "Fitness Tracker",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Curiosity Nano Base for click boards | Heart Rate 9 click | MikroElektronika eInk Click Without Display | MikroElektronika E-Paper display 2,9” 296x128 dots Display | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#hardware-used"
  },"573": {
    "doc": "Fitness Tracker",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html"
  },"574": {
    "doc": "Fitness Tracker",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#softwaretools-used"
  },"575": {
    "doc": "Fitness Tracker",
    "title": "Setup:",
    "content": ". | Mount SAM D21 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount Heart Rate 3 click board on mikro bus click 3 connector of Curiosity Nano Base board | Mount the Eink E-Paper display 2,9” 296x128 dots display (eINK click + E-Paper display 2,9” 296x128 dots Display) on the mikro bus 1 connector of Curiosity Nano Base board | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#setup",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#setup"
  },"576": {
    "doc": "Fitness Tracker",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#programming-hex-file"
  },"577": {
    "doc": "Fitness Tracker",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (fitness_tracker\\firmware\\\\sam_d21_cnano.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#programmingdebugging-application-project"
  },"578": {
    "doc": "Fitness Tracker",
    "title": "Running the Demo:",
    "content": ". | Perform a reset by unplugging and re-plugging the power cable of SAM D21 Curiosity Nano Evaluation Kit. | After power up, the application displays the “microchip logo” on the Eink E-Paper display 2,9” 296x128 dots Display and initializes the heart rate sensor. | After successful initialization, keep your finger on Pulse Detection Indicator on the heart rate 9 click sensor as shown in the figure below. Note: Place your index finger gently on the heart rate 9 click sensor as shown in the above figure . | Press switch “SW0” on SAM D21 Curiosity Nano Evaluation Kit, LED “LED0” on SAM D21 Curiosity Nano Evaluation Kit glows on | Wait till the LED “LED0” on SAM D21 Curiosity Nano Evaluation Kit goes off and then lift your finger | The heart rate value (in bpm - beats per minute) gets displayed on the Eink E-Paper display 2,9” 296x128 dots Display. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#running-the-demo"
  },"579": {
    "doc": "Fitness Tracker",
    "title": "Comments:",
    "content": ". | Place your index finger gently on the heart rate 3 click sensor, don’t push or put pressure on the sensor (the heart rate values may not be accurate) | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | Getting Started with Harmony v3 Drivers on SAM D21 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#comments"
  },"580": {
    "doc": "Fitness Tracker",
    "title": "Revision:",
    "content": ". | v1.6.0 - Replaced Eink Click Bundle with Eink E-Paper display 2,9” 296x128, regenerated and tested application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html#revision",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html#revision"
  },"581": {
    "doc": "Fitness Tracker",
    "title": "Fitness Tracker",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/fitness_tracker/readme.html",
    "relUrl": "/apps/sam_d21_cnano/fitness_tracker/readme.html"
  },"582": {
    "doc": "Location Tagged SOS",
    "title": "Location Tagged SOS Application on SAM D21 Curiosity Nano and Nano Base for Click boards",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#location-tagged-sos-application-on-sam-d21-curiosity-nano-and-nano-base-for-click-boards",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#location-tagged-sos-application-on-sam-d21-curiosity-nano-and-nano-base-for-click-boards"
  },"583": {
    "doc": "Location Tagged SOS",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html"
  },"584": {
    "doc": "Location Tagged SOS",
    "title": "Description:",
    "content": "The application demonstrates the solution based on Microchip products in a personal emergency or to communicate a distress signal by sending out a location-tagged SOS SMS. The Mikroelektronika GSM-GPS click board, used in this application, contains a hardware module that combines the GSM/GPRS and GPS functionality used to track the device and send out the emergency or distress signal. The MCU is interfaced with the GPS module over the UART interface to perform the GPS coordinates’ acquisition and tracking. It registers the event callbacks for location tracking of the GPS receiver. The application arranges the GSM/GPRS module for sending SMS to a configured mobile phone number. Once the GPS position is available, the application sends the following location-tagged SOS SMS to the configured mobile phone number when the emergency switch is pressed.. SAM D21 Curiosity Nano Location tagged SOS. Please attend emergency at: Latitude : xx.xxxxxx Longitude : xx.xxxxxx Altitude : xx.xxxxxx . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#description"
  },"585": {
    "doc": "Location Tagged SOS",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Timer | EIC | NVM | . | Driver Modules . | USART Driver | . | STDIO Library | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#modulestechnology-used"
  },"586": {
    "doc": "Location Tagged SOS",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Curiosity Nano Base for click boards | GSM-GPS click | Li-ion or Lipo Battery (optional) | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#hardware-used"
  },"587": {
    "doc": "Location Tagged SOS",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | MPLAB XC32 C/C++ Compiler v3.01 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#softwaretools-used"
  },"588": {
    "doc": "Location Tagged SOS",
    "title": "Setup 1: Uses Separate power supplies for SAMD21 Curiosity Nano and GSM-GPS Click",
    "content": ". | Mount SAM D21 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount GSM-GPS click board on mikro bus click 1 connector of Curiosity Nano Base and connect the GPS and GSM antennas on GSM-GPS click board connectors | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Wait for about 60 seconds | Power the GSM-GPS click board from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port of GSM-GPS click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#setup-1-uses-separate-power-supplies-for-samd21-curiosity-nano-and-gsm-gps-click",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#setup-1-uses-separate-power-supplies-for-samd21-curiosity-nano-and-gsm-gps-click"
  },"589": {
    "doc": "Location Tagged SOS",
    "title": "Setup 2: Uses Li-ion battery",
    "content": ". | Mount SAM D21 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board. | Mount GSM-GPS click board on mikro bus click 1 connector of Curiosity Nano Base and connect the GPS and GSM antennas on GSM-GPS click board connectors. | Connect Li-ion or Lipo Battery on J1 connector and make sure SW1 slider switch is moved to Battery on position in Curiosity Nano Base board. | Power the SAM D21 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105). | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#setup-2-uses-li-ion-battery",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#setup-2-uses-li-ion-battery"
  },"590": {
    "doc": "Location Tagged SOS",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#programming-hex-file"
  },"591": {
    "doc": "Location Tagged SOS",
    "title": "Configure Mobile Phone Number:",
    "content": ". | Open the project (location_sos\\firmware\\\\sam_d21_cnano.X) in MPLAB X IDE | Open header file loc_sos_update_task.h . | Define the macro to your mobile phone number preceded by country code. For example, Below is the macro definition to configure an Indian mobile phone number “1234567890” . Note: “+91” is the country code for India in the above screenshot and “1234567890” is a dummy phone number. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#configure-mobile-phone-number",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#configure-mobile-phone-number"
  },"592": {
    "doc": "Location Tagged SOS",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (location_sos\\firmware\\\\sam_d21_cnano.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#programmingdebugging-application-project"
  },"593": {
    "doc": "Location Tagged SOS",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port and reconnect it back | Change the baud rate to 115200 | Perform a reset by unplugging the power cable of SAM D21 Curiosity Nano | After power up, The LEDs on GSM-GPS click boards gives the following indications: . | LED marked STA is on; this indicates the GSM module is switching on | LED marked TXA is blinking, this indicates the GPS acquisition and position data is exchanged by the receiver | LED marked PPS is off. The PPS LED indicates pulse-per-second signal for precise timing. It glows on, after successful positioning | . | After one minute, the GPS achieves successful position as indicated by the blinking of LED PPS. Note: . | The GPS on the GSM-GPS click has a one second Time-To-First-Fix (TTFF) from a hot start and 30 seconds from cold start | If the position is not achieved after 1 minute, then: . | It could be because of non-availability of GPS signals. Make sure that you have placed the GPS antenna such that it can receive the signals from the GPS satellites. Try placing it under the open sky to be able to receive signals | After using the option above, if the device is still not receiving the position indication, try resetting the board by unplugging the power cable of SAM D21 Curiosity Nano board and turn off and turn on the battery supply by sliding SW1 switch on Curiosity Nano Base or unplug the power cable of GSM-GPS Click board | . | Once the GPS position is achieved, user can press switch SW0 on SAM D21 Curiosity Nano board to send SMS to configured mobile number with GPS location. | GSM module sends below message to configured mobile number SAM D21 Curiosity Nano Location tagged SOS Please attend emergency at: Latitude : xx.xxxxxx Longitude : xx.xxxxxx Altitude : xx.xxxxxx http://maps.google.com/maps?q=loc:xx.xxxxxx(Latitude),xx.xxxxxx(Longitude) | User can change the mobile number by long pressing (more than 4 seconds) switch SW0 on SAM D21 Curiosity Nano board. An option will be displayed on serial terminal to update the cell phone number | Updated cell phone number is stored in NVM memory, updated number will be used further to send SMS, even after power reset | If GPS position is not achieved, short pressing SW0 on SAM D21 Curiosity Nano board sends a blank SMS without GPS location. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#running-the-demo"
  },"594": {
    "doc": "Location Tagged SOS",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#comments"
  },"595": {
    "doc": "Location Tagged SOS",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 - Updated demo application to use click routines | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 regenerated and tested the demo application | v1.0.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html#revision",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html#revision"
  },"596": {
    "doc": "Location Tagged SOS",
    "title": "Location Tagged SOS",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/location_sos/readme.html",
    "relUrl": "/apps/sam_d21_cnano/location_sos/readme.html"
  },"597": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Application migration from 8-bit PIC18F to 32-bit SAM D21 on SAM D21 Curiosity Nano",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#application-migration-from-8-bit-pic18f-to-32-bit-sam-d21-on-sam-d21-curiosity-nano",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#application-migration-from-8-bit-pic18f-to-32-bit-sam-d21-on-sam-d21-curiosity-nano"
  },"598": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html"
  },"599": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Description:",
    "content": "This Applications acts as reference for migrating applications from 8-bit PIC Microcontroller (MCU) to 32- bit MCU. This example shows how to migrate an application from PIC18F47Q10 MCU to SAMD21G17D MCU. This application uses the PIC18 application which helps in Getting Started with UART Using EUSART on PIC18. The PIC18 application shows how to implement a command line interface. This way, the microcontroller can receive control commands via the EUSART. In this use case, an LED is controlled using commands sent from the MPLAB Data Visualizer. The application shows steps to get started migrating to SAMD21 and later extend the functionality by adding more peripherals. The migration application makes use of SAM D21 Curiosity Nano Evaluation Kit and MPLAB® Harmony v3 framework. The application sends “Hello World” message to serial terminal using (SERCOM) USART and utilizes STDIO library to receive the command from the serial terminal to control the LED0 on SAMD21 Curiosity Nano Evaluation Kit. Switch SW0 is configured with External Interrupt controller (EIC) to toggle the LED0, when switch is pressed. It allows demonstrates Serial Peripheral Interface(SPI) self loop back mode and Direct memory Address (DMA) to send SPI self loopback status to the serial terminal. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#description"
  },"600": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORT | EIC | SERCOM(SPI) | SERCOM(USART) | DMA | Systick | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#modulestechnology-used"
  },"601": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Connection wires | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#hardware-used"
  },"602": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | MPLAB XC32 C/C++ Compiler v3.01 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#softwaretools-used"
  },"603": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Setup:",
    "content": ". | Connect the SAM D21 Curiosity Nano Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Connect a wire from PA16 to PA19 on SAM D21 Curiosity Nano Development Kit for SPI Self Loopback testing. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#setup",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#setup"
  },"604": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#programming-hex-file"
  },"605": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic18f_to_samd21_migration\\firmware\\\\pic18f_to_samd21_migration.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#programmingdebugging-application-project"
  },"606": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term and configure it to 9600 baud rate and the standard 8-N-1 frame format | Enable Local echo and select carriage return + line feed for transmit | In Tera Term you should see Hello World message displayed | Below you will see a message Received SPI Valid Data indicating SPI self loopback test success | Type ON in serial terminal and press Enter to turn on LED0 on SAMD21 Curiosity Nano kit | Type OFF in serial terminal and press Enter to turn off LED0 on SAMD21 Curiosity Nano kit | Press Switch SW0 on the SAMD21 Curiosity Nano kit to toggle the LED0 twice with 500ms of delay. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#running-the-demo"
  },"607": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Comments:",
    "content": ". | Reference Migration Guide: Application migration from 8-bit PIC18F to 32-bit SAM D21 on SAM D21 Curiosity Nano | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | Getting Started with UART Using EUSART on PIC18 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#comments"
  },"608": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#revision",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html#revision"
  },"609": {
    "doc": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "title": "Application migration from 8-bit PIC18F to 32-bit SAM D21",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html",
    "relUrl": "/apps/sam_d21_cnano/pic18f_to_samd21_migration/readme.html"
  },"610": {
    "doc": "Getting Started",
    "title": "Getting Started Application on SAM D21 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#getting-started-application-on-sam-d21-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#getting-started-application-on-sam-d21-curiosity-nano-evaluation-kit"
  },"611": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html"
  },"612": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "This application demonstrates an LED (LED0) toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW0 on the SAM D21 Curiosity Nano Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#description"
  },"613": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | RTC | GPIO | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#modulestechnology-used"
  },"614": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#hardware-used"
  },"615": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#softwaretools-used"
  },"616": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Connect the SAM D21 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#setup",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#setup"
  },"617": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#programming-hex-file"
  },"618": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started\\firmware\\\\sam_d21_cnano.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#programmingdebugging-application-project"
  },"619": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | An LED (LED0) on the SAM D21 Curiosity Nano Evaluation Kit toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds | And also, the LED toggling rate is displayed on the serial terminal | Press the switch SW0 on the SAM D21 Curiosity Nano Evaluation Kit to change the default periodicity of the timeout to one second | Every subsequent pressing of the switch SW0 on the SAM D21 Curiosity Nano Evaluation Kit changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#running-the-demo"
  },"620": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#comments"
  },"621": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 regenerated and tested the demo application | v1.0.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html#revision"
  },"622": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21n_getting_started/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21n_getting_started/readme.html"
  },"623": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Amazon Alexa Connect Kit (ACK) Dash Replenishment Application on SAM D21 Curiosity Nano",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#amazon-alexa-connect-kit-ack-dash-replenishment-application-on-sam-d21-curiosity-nano",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#amazon-alexa-connect-kit-ack-dash-replenishment-application-on-sam-d21-curiosity-nano"
  },"624": {
    "doc": "ACK Dash Replenishment Application",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"625": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Description:",
    "content": "The application demonstrates an integration of Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21 and presenting dashboard replenishment on SAM D21 Curiosity Nano. This following bullet points provides links to the detailed topics: . | Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging Dash Replenishment Application Project | Register your device | Running the demo | Comments | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#description"
  },"626": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"627": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM | Systick | Port | NVMCTRL | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#modulestechnology-used"
  },"628": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"629": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Espressif Alexa Connect Kit - ACK Module | Connection wires | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#hardware-used"
  },"630": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"631": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#softwaretools-used"
  },"632": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"633": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Hardware Setup:",
    "content": "Hardware connections with ACK Module . | Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) . | . Note: Please contact Amazon for details on the other hardware/equipment required for this demo application. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#hardware-setup",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#hardware-setup"
  },"634": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"635": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Setting up the build platform",
    "content": ". | Download and extract ACK Device SDK 4.2 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt;/ACK_Device_SDK_4.2.202201251359/user/platform | . Note . | Make sure you create amazon.com account for downloading the SDK. You would use your Amazon credentials to register your development device (amazon.com account provides an option to register your development device.) | “ACK Module with Espressif chipset” is used in these demo’s. make sure you download proper ACK SDK from the Amazon website | Create Product and add device capablities to the product once product is created. | Download the product configuration file from created product and provision the Ack module using CLI command | For more information check Register your device | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#setting-up-the-build-platform",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#setting-up-the-build-platform"
  },"636": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"637": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Project file structure",
    "content": ". | ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt;\\\\ACK_Device_SDK_4.2.202201251359\\\\ | SAM D21 ACK port file/directory is as follows . | user/platform/samd21_amazon_ack/ . | applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#project-file-structure",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#project-file-structure"
  },"638": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#programming-hex-file"
  },"639": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": "Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"640": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"641": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Programming/Debugging Dash Replenishment Application Project:",
    "content": "Before proceeding with this step complete “Setting up the build platform” step. | Open the project (samd21_amazon_ack/applications/DashReplenishment/firmware/sam_d21_cnano.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#programmingdebugging-dash-replenishment-application-project",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#programmingdebugging-dash-replenishment-application-project"
  },"642": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"643": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Register your device",
    "content": ". | Create an account at developer.amazon.com website and Install the Amazon Alexa application with the same credentials on your Smartphone. | Select the Appropriate Marketplace and Create a Product. | . | Visit Alexa Connect Kit - Resources and download the latest ACK Device SDK, firmware, and Module Utility for ACK Module Espressif Chipset. | Download the product provisioning file of the created product. | Check and update the existing firmware using the below command: . | java -jar &lt;path&gt;/ackmoduleutility.jar updatemodule -p &lt;port&gt; --updatefile &lt;file path to the downloaded firmware&gt; | . | The above command updates a module over the wire with a new firmware package from Amazon. | Use the following command to provision a module with ACK Managed Services. | java -jar &lt;path&gt;/ackmoduleutility.jar provision -p &lt;port&gt; --provisionconfigfile &lt;path&gt;/ProvisioningInfo_[devicetypeid].conf | . | Create a Barcode using a unique UPC, which will be used to register the device. | The syntax to create the Barcode is: . | barcode --port &lt;port&gt; [--includedsndevice] --out &lt;output directory&gt; --upc &lt;upc&gt; | Note: The UPC can be any unused 12-digit number. Try giving random 12-digit number untill Barcode generation is success. | . | . | Make sure your mobile device is connected to a Wi-Fi network. | Go to Devices -&gt; Add New Device -&gt; Development Device -&gt; ACK | Scan the Barcode which got generated, i.e., DVC_XXXXXX.png. | Connect to the Wi-Fi network and observe the status LED on the Espressif Chipset. | If you successfully registered your device. you should see the status LED on your ACK development board change from WHITE to GREEN. | For more information refer Amazon ACK Module Utility Reference. | For more information refer Register ACK Module with Amazon by following the procedure | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#register-your-device",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#register-your-device"
  },"644": {
    "doc": "ACK Dash Replenishment Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"645": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Running the Demo:",
    "content": "Note: This demo does not have functional running/test steps as the other required hardware/equipment needs to be procured. Please contact Amazon for help on running this demo application. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#running-the-demo"
  },"646": {
    "doc": "ACK Dash Replenishment Application",
    "title": "Comments:",
    "content": ". | Dash Replenishment application is built as a standalone project, if you wish to implement OTA firmware upgrade feature to this application, follow the instructions in the bootloader application’s readme file. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. | . Revision: . | v1.6.0 Regenerated and tested the application | v1.5.0 Updated to support Amazon ACK SDK 4.2 and ACK module with Espressif chipset | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Updated to support Amazon ACK SDK 4.1 | v1.2.0 Updated to support Amazon ACK SDK 3.2 | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html#comments"
  },"647": {
    "doc": "ACK Dash Replenishment Application",
    "title": "ACK Dash Replenishment Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/DashReplenishment/readme.html"
  },"648": {
    "doc": "ACK Hello World Application",
    "title": "Amazon Alexa Connect Kit (ACK) Hello World Application on SAM D21 Curiosity Nano",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#amazon-alexa-connect-kit-ack-hello-world-application-on-sam-d21-curiosity-nano",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#amazon-alexa-connect-kit-ack-hello-world-application-on-sam-d21-curiosity-nano"
  },"649": {
    "doc": "ACK Hello World Application",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"650": {
    "doc": "ACK Hello World Application",
    "title": "Description:",
    "content": "The application demonstrates an integration of Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21 and controlling ON/OFF development kit(LED0) on SAM D21 Curiosity Nano Evaluation Kit. This following bullet points provides links to the detailed topics: . | Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging HelloWorld Application Project | Register your device | Running the demo | Comments | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#description"
  },"651": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"652": {
    "doc": "ACK Hello World Application",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM | Systick | Port | NVMCTRL | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#modulestechnology-used"
  },"653": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"654": {
    "doc": "ACK Hello World Application",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Espressif Alexa Connect Kit - ACK Module | Connection wires | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#hardware-used"
  },"655": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"656": {
    "doc": "ACK Hello World Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#softwaretools-used"
  },"657": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"658": {
    "doc": "ACK Hello World Application",
    "title": "Hardware Setup:",
    "content": "Hardware connections with ACK Module . | Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#hardware-setup",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#hardware-setup"
  },"659": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"660": {
    "doc": "ACK Hello World Application",
    "title": "Setting up the build platform",
    "content": ". | Download and extract ACK Device SDK 4.2 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt;/ACK_Device_SDK_4.2.202201251359/user/platform | . Note . | Make sure you create amazon.com account for downloading the SDK. You would use your Amazon credentials to register your development device (amazon.com account provides an option to register your development device.) | “ACK Module with Espressif chipset” is used in these demo’s. make sure you download proper ACK SDK from the Amazon website | Create Product and add device capablities to the product once product is created. | Download the product configuration file from created product and provision the Ack module using CLI command | For more information check Register your device | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#setting-up-the-build-platform",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#setting-up-the-build-platform"
  },"661": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"662": {
    "doc": "ACK Hello World Application",
    "title": "Project file structure",
    "content": ". | ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt;\\\\ACK_Device_SDK_4.2.202201251359\\\\ | SAM D21 ACK port file/directory is as follows . | user/platform/samd21_amazon_ack/ . | applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#project-file-structure",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#project-file-structure"
  },"663": {
    "doc": "ACK Hello World Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#programming-hex-file"
  },"664": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": "Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"665": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"666": {
    "doc": "ACK Hello World Application",
    "title": "Programming/Debugging Hello World Application Project:",
    "content": "Before proceeding with this step complete “Setting up the build platform” step. | Open the project (samd21_amazon_ack/applications/Helloworld/firmware/sam_d21_cnano.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#programmingdebugging-hello-world-application-project",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#programmingdebugging-hello-world-application-project"
  },"667": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"668": {
    "doc": "ACK Hello World Application",
    "title": "Register your device",
    "content": ". | Create an account at developer.amazon.com website and Install the Amazon Alexa application with the same credentials on your Smartphone. | Select the Appropriate Marketplace and Create a Product. | . | Visit Alexa Connect Kit - Resources and download the latest ACK Device SDK, firmware, and Module Utility for ACK Module Espressif Chipset. | Download the product provisioning file of the created product. | Check and update the existing firmware using the below command: . | java -jar &lt;path&gt;/ackmoduleutility.jar updatemodule -p &lt;port&gt; --updatefile &lt;file path to the downloaded firmware&gt; | . | The above command updates a module over the wire with a new firmware package from Amazon. | Use the following command to provision a module with ACK Managed Services. | java -jar &lt;path&gt;/ackmoduleutility.jar provision -p &lt;port&gt; --provisionconfigfile &lt;path&gt;/ProvisioningInfo_[devicetypeid].conf | . | Create a Barcode using a unique UPC, which will be used to register the device. | The syntax to create the Barcode is: . | barcode --port &lt;port&gt; [--includedsndevice] --out &lt;output directory&gt; --upc &lt;upc&gt; | Note: The UPC can be any unused 12-digit number. Try giving random 12-digit number untill Barcode generation is success. | . | . | Make sure your mobile device is connected to a Wi-Fi network. | Go to Devices -&gt; Add New Device -&gt; Development Device -&gt; ACK | Scan the Barcode which got generated, i.e., DVC_XXXXXX.png. | Connect to the Wi-Fi network and observe the status LED on the Espressif Chipset. | If you successfully registered your device. you should see the status LED on your ACK development board change from WHITE to GREEN. | For more information refer Amazon ACK Module Utility Reference. | For more information refer Register ACK Module with Amazon by following the procedure | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#register-your-device",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#register-your-device"
  },"669": {
    "doc": "ACK Hello World Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"670": {
    "doc": "ACK Hello World Application",
    "title": "Running the Demo:",
    "content": ". | Open Amazon Alexa App from smart phone. | Reset/power cycle the SAM D21 Curiosity Nano Evaluation Kit device and wait till status LED on ACK Module to green. | When you say “Alexa, turn on development device” or tap the power button in the Alexa app GUI. A LED0 on the SAM D21 Curiosity Nano Evaluation Kit board turns ON. | When you say “Alexa, turn off development device” or tap the power button in the Alexa app GUI. A LED0 on the SAM D21 Curiosity Nano Evaluation Kit turns Off. | . Note - To open Alexa app GUI for development device, In Amazon Alexa app navigate to Devices &gt; All devices and select Development device. it will provide the options to control the LED . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#running-the-demo"
  },"671": {
    "doc": "ACK Hello World Application",
    "title": "Comments:",
    "content": ". | HelloWorld application is built as standalone project, if you wish to use OTA feature, follow instructions in bootloader application’s readme file | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. | . Revision: . | v1.6.0 Regenerated and tested the application | v1.5.0 Updated to support Amazon ACK SDK 4.2 and ACK module with Espressif chipset | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Updated to support Amazon ACK SDK 4.1 | v1.2.0 Updated to support Amazon ACK SDK 3.2 | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html#comments"
  },"672": {
    "doc": "ACK Hello World Application",
    "title": "ACK Hello World Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/HelloWorld/readme.html"
  },"673": {
    "doc": "ACK Microwave Application",
    "title": "Amazon Alexa Connect Kit (ACK) Microwave Application on SAM D21 Curiosity Nano",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#amazon-alexa-connect-kit-ack-microwave-application-on-sam-d21-curiosity-nano",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#amazon-alexa-connect-kit-ack-microwave-application-on-sam-d21-curiosity-nano"
  },"674": {
    "doc": "ACK Microwave Application",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"675": {
    "doc": "ACK Microwave Application",
    "title": "Description:",
    "content": "The application demonstrates an integration of Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21 and controlling microwave on SAM D21 Curiosity Nano. This following bullet points provides links to the detailed topics: . | Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging Microwave Application Project | Register your device | Running the demo | Comments | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#description"
  },"676": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"677": {
    "doc": "ACK Microwave Application",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM | Systick | Port | NVMCTRL | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#modulestechnology-used"
  },"678": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"679": {
    "doc": "ACK Microwave Application",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Espressif Alexa Connect Kit - ACK Module | Connection wires | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#hardware-used"
  },"680": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"681": {
    "doc": "ACK Microwave Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#softwaretools-used"
  },"682": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"683": {
    "doc": "ACK Microwave Application",
    "title": "Hardware Setup:",
    "content": "Hardware connections with ACK Module . | Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) . | . Note: Please contact Amazon for details on the other hardware/equipment required for this demo application. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#hardware-setup",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#hardware-setup"
  },"684": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"685": {
    "doc": "ACK Microwave Application",
    "title": "Setting up the build platform",
    "content": ". | Download and extract ACK Device SDK 4.2 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt;/ACK_Device_SDK_4.2.202201251359/user/platform | . Note . | Make sure you create amazon.com account for downloading the SDK. You would use your Amazon credentials to register your development device (amazon.com account provides an option to register your development device.) | “ACK Module with Espressif chipset” is used in these demo’s. make sure you download proper ACK SDK from the Amazon website | Create Product and add device capablities to the product once product is created. | Download the product configuration file from created product and provision the Ack module using CLI command | For more information check Register your device | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#setting-up-the-build-platform",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#setting-up-the-build-platform"
  },"686": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"687": {
    "doc": "ACK Microwave Application",
    "title": "Project file structure",
    "content": ". | ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt;\\\\ACK_Device_SDK_4.2.202201251359\\\\ | SAM D21 ACK port file/directory is as follows . | user/platform/samd21_amazon_ack/ . | applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#project-file-structure",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#project-file-structure"
  },"688": {
    "doc": "ACK Microwave Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#programming-hex-file"
  },"689": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": "Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"690": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"691": {
    "doc": "ACK Microwave Application",
    "title": "Programming/Debugging Microwave Application Project:",
    "content": "Before proceeding with this step complete “Setting up the build platform” step. | Open the project (samd21_amazon_ack/applications/Microwave/firmware/sam_d21_cnano.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#programmingdebugging-microwave-application-project",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#programmingdebugging-microwave-application-project"
  },"692": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"693": {
    "doc": "ACK Microwave Application",
    "title": "Register your device",
    "content": ". | Create an account at developer.amazon.com website and Install the Amazon Alexa application with the same credentials on your Smartphone. | Select the Appropriate Marketplace and Create a Product. | . | Visit Alexa Connect Kit - Resources and download the latest ACK Device SDK, firmware, and Module Utility for ACK Module Espressif Chipset. | Download the product provisioning file of the created product. | Check and update the existing firmware using the below command: . | java -jar &lt;path&gt;/ackmoduleutility.jar updatemodule -p &lt;port&gt; --updatefile &lt;file path to the downloaded firmware&gt; | . | The above command updates a module over the wire with a new firmware package from Amazon. | Use the following command to provision a module with ACK Managed Services. | java -jar &lt;path&gt;/ackmoduleutility.jar provision -p &lt;port&gt; --provisionconfigfile &lt;path&gt;/ProvisioningInfo_[devicetypeid].conf | . | Create a Barcode using a unique UPC, which will be used to register the device. | The syntax to create the Barcode is: . | barcode --port &lt;port&gt; [--includedsndevice] --out &lt;output directory&gt; --upc &lt;upc&gt; | Note: The UPC can be any unused 12-digit number. Try giving random 12-digit number untill Barcode generation is success. | . | . | Make sure your mobile device is connected to a Wi-Fi network. | Go to Devices -&gt; Add New Device -&gt; Development Device -&gt; ACK | Scan the Barcode which got generated, i.e., DVC_XXXXXX.png. | Connect to the Wi-Fi network and observe the status LED on the Espressif Chipset. | If you successfully registered your device. you should see the status LED on your ACK development board change from WHITE to GREEN. | For more information refer Amazon ACK Module Utility Reference. | For more information refer Register ACK Module with Amazon by following the procedure | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#register-your-device",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#register-your-device"
  },"694": {
    "doc": "ACK Microwave Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"695": {
    "doc": "ACK Microwave Application",
    "title": "Running the Demo:",
    "content": "Note: This demo does not have functional running/test steps as the other required hardware/equipment needs to be procured. Please contact Amazon for help on running this demo application. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#running-the-demo"
  },"696": {
    "doc": "ACK Microwave Application",
    "title": "Comments:",
    "content": ". | Microwave application cannot support OTA feature because of limitation of code size. You can migrate to higher memory part in SAMD 21 MCU family. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. | . Revision: . | v1.6.0 Regenerated and tested the application | v1.5.0 Updated to support Amazon ACK SDK 4.2 and ACK module with Espressif chipset | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Updated to support Amazon ACK SDK 4.1 | v1.2.0 Updated to support Amazon ACK SDK 3.2 | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html#comments"
  },"697": {
    "doc": "ACK Microwave Application",
    "title": "ACK Microwave Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/Microwave/readme.html"
  },"698": {
    "doc": "ACK Smart Light Application",
    "title": "Amazon Alexa Connect Kit (ACK) Smart Light Application on SAM D21 Curiosity Nano",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#amazon-alexa-connect-kit-ack-smart-light-application-on-sam-d21-curiosity-nano",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#amazon-alexa-connect-kit-ack-smart-light-application-on-sam-d21-curiosity-nano"
  },"699": {
    "doc": "ACK Smart Light Application",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"700": {
    "doc": "ACK Smart Light Application",
    "title": "Description:",
    "content": "The application demonstrates an integration of Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21 and controlling of smart light (LED0) on SAM D21 Curiosity Nano. This following bullet points provides links to the detailed topics: . | Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging Smart Light Application Project | Register your device | Running the demo | Comments | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#description"
  },"701": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"702": {
    "doc": "ACK Smart Light Application",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM | Systick | Port | NVMCTRL | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#modulestechnology-used"
  },"703": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"704": {
    "doc": "ACK Smart Light Application",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Espressif Alexa Connect Kit - ACK Module | Connection wires | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#hardware-used"
  },"705": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"706": {
    "doc": "ACK Smart Light Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Python 3.8 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#softwaretools-used"
  },"707": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"708": {
    "doc": "ACK Smart Light Application",
    "title": "Hardware Setup:",
    "content": "Hardware connections with ACK Module . | Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#hardware-setup",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#hardware-setup"
  },"709": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"710": {
    "doc": "ACK Smart Light Application",
    "title": "Setting up the build platform",
    "content": ". | Download and extract ACK Device SDK 4.2 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt;/ACK_Device_SDK_4.2.202201251359/user/platform | . Note . | Make sure you create amazon.com account for downloading the SDK. You would use your Amazon credentials to register your development device (amazon.com account provides an option to register your development device.) | “ACK Module with Espressif chipset” is used in these demo’s. make sure you download proper ACK SDK from the Amazon website | Create Product and add device capablities to the product once product is created. | Download the product configuration file from created product and provision the Ack module using CLI command | For more information check Register your device | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#setting-up-the-build-platform",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#setting-up-the-build-platform"
  },"711": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"712": {
    "doc": "ACK Smart Light Application",
    "title": "Project file structure",
    "content": ". | ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt;\\\\ACK_Device_SDK_4.2.202201251359\\\\ | SAM D21 ACK port file/directory is as follows . | user/platform/samd21_amazon_ack/ . | applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#project-file-structure",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#project-file-structure"
  },"713": {
    "doc": "ACK Smart Light Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#programming-hex-file"
  },"714": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": "Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"715": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"716": {
    "doc": "ACK Smart Light Application",
    "title": "Programming/Debugging Smart Light Application Project:",
    "content": "Before proceeding with this step complete “Setting up the build platform” step. | Open the project (samd21_amazon_ack/applications/SmartLight/firmware/sam_d21_cnano.X) in MPLAB X IDE | Ensure “SAM D21 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#programmingdebugging-smart-light-application-project",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#programmingdebugging-smart-light-application-project"
  },"717": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"718": {
    "doc": "ACK Smart Light Application",
    "title": "Register your device",
    "content": ". | Create an account at developer.amazon.com website and Install the Amazon Alexa application with the same credentials on your Smartphone. | Select the Appropriate Marketplace and Create a Product. | . | Visit Alexa Connect Kit - Resources and download the latest ACK Device SDK, firmware, and Module Utility for ACK Module Espressif Chipset. | Download the product provisioning file of the created product. | Check and update the existing firmware using the below command: . | java -jar &lt;path&gt;/ackmoduleutility.jar updatemodule -p &lt;port&gt; --updatefile &lt;file path to the downloaded firmware&gt; | . | The above command updates a module over the wire with a new firmware package from Amazon. | Use the following command to provision a module with ACK Managed Services. | java -jar &lt;path&gt;/ackmoduleutility.jar provision -p &lt;port&gt; --provisionconfigfile &lt;path&gt;/ProvisioningInfo_[devicetypeid].conf | . | Create a Barcode using a unique UPC, which will be used to register the device. | The syntax to create the Barcode is: . | barcode --port &lt;port&gt; [--includedsndevice] --out &lt;output directory&gt; --upc &lt;upc&gt; | Note: The UPC can be any unused 12-digit number. Try giving random 12-digit number untill Barcode generation is success. | . | . | Make sure your mobile device is connected to a Wi-Fi network. | Go to Devices -&gt; Add New Device -&gt; Development Device -&gt; ACK | Scan the Barcode which got generated, i.e., DVC_XXXXXX.png. | Connect to the Wi-Fi network and observe the status LED on the Espressif Chipset. | If you successfully registered your device. you should see the status LED on your ACK development board change from WHITE to GREEN. | For more information refer Amazon ACK Module Utility Reference. | For more information refer Register ACK Module with Amazon by following the procedure | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#register-your-device",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#register-your-device"
  },"719": {
    "doc": "ACK Smart Light Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"720": {
    "doc": "ACK Smart Light Application",
    "title": "Running the Demo:",
    "content": ". | Open Amazon Alexa App from your phone if you closed it. | Reset/power cycle the SAM D21 Curiosity Nano Evaluation Kit and wait till the status LED on ACK development board turns to green. | When you say “Alexa, turn on development device” or tap the power button in the Alexa app GUI. A LED0 on the SAM D21 Curiosity Nano Evaluation Kit turns ON. | When you say “Alexa, turn off development device” or tap the power button in the Alexa app GUI. A LED0 on the SAM D21 Curiosity Nano Evaluation Kit turns Off. | To turn off the LED after a specific timeout, use option “Turnoff timer” in Alexa app GUI and select the required timeout. | To Toggle the LED and change the toggling speed, use option “Speed” in Alexa app GUI and select the required speed. | . Note . | To open Alexa app GUI for development device, In Amazon Alexa app navigate to Devices &gt; All devices and select Development device. it will provide the options to control the smart lights | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#running-the-demo"
  },"721": {
    "doc": "ACK Smart Light Application",
    "title": "Comments:",
    "content": ". | Brightness option using PWM is not implemented, trying to control brightness will result in OFF if value is less than 128. | Smart Light application is built as a standalone project, if you wish to implement OTA firmware upgrade feature to this application, follow the instructions in the bootloader application’s readme file. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. | . Revision: . | v1.6.0 Regenerated and tested the application | v1.5.0 Updated to support Amazon ACK SDK 4.2 and ACK module with Espressif chipset | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Updated to support Amazon ACK SDK 4.1 | v1.2.0 Updated to support Amazon ACK SDK 3.2 | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html#comments"
  },"722": {
    "doc": "ACK Smart Light Application",
    "title": "ACK Smart Light Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/applications/SmartLight/readme.html"
  },"723": {
    "doc": "ACK OTA Bootloader",
    "title": "Amazon Alexa Connect Kit (ACK) OTA Bootloader Application on SAM D21 Curiosity Nano",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#amazon-alexa-connect-kit-ack-ota-bootloader-application-on-sam-d21-curiosity-nano",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#amazon-alexa-connect-kit-ack-ota-bootloader-application-on-sam-d21-curiosity-nano"
  },"724": {
    "doc": "ACK OTA Bootloader",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"725": {
    "doc": "ACK OTA Bootloader",
    "title": "Description:",
    "content": "The Application demonstrates the usage OTA upgrade feature on SAMD21 Curiosity Nano evaluation kit using Amazon Alexa connect kit(ACK) SDK. The communication between SAM D21 Curiosity Nano and ACK Module is through UART interface. This following bullet points provides links to the detailed topics: . | Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | OTA Architecture | Setting up environment for OTA update | Building and upgrading the latest application firmware | Comments | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#description"
  },"726": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"727": {
    "doc": "ACK OTA Bootloader",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM | Systick | Port | NVMCTRL | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#modulestechnology-used"
  },"728": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"729": {
    "doc": "ACK OTA Bootloader",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Espressif Alexa Connect Kit - ACK Module | Connection wires | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#hardware-used"
  },"730": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"731": {
    "doc": "ACK OTA Bootloader",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Python 3.8 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#softwaretools-used"
  },"732": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"733": {
    "doc": "ACK OTA Bootloader",
    "title": "Hardware Setup:",
    "content": "Hardware connections for Validation . | Connect Pin “PB02(ACK HOST INTERRUPT Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “INT”(INST) pin of ACK Module | Connect Pin “PB03(ACK MODULE RESET Pin)” of SAM D21 Curiosity Nano Evaluation Kit to “RESET”(RES) pin of ACK Module | Connect Pin “PA20(Host MCU TX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK RX” pin of ACK Module | Connect Pin “PA21(Host MCU RX)” of SAM D21 Curiosity Nano Evaluation Kit to “ACK TX” pin of ACK Module | Connect Pin “VTG(Voltage Target)” of SAM D21 Curiosity Nano Evaluation Kit to “IOREF” pin of ACK Module | Connect common ground between SAM D21 Curiosity Nano Evaluation Kit and ACK Module | Power the SAM D21 Curiosity Nano Evaluation Kit Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) | Power the ACK Module from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (DEBUG) | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#hardware-setup",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#hardware-setup"
  },"734": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"735": {
    "doc": "ACK OTA Bootloader",
    "title": "Setting up the build platform",
    "content": ". | Download and extract ACK Device SDK 4.2 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt;/ACK_Device_SDK_4.2.202201251359/user/platform | . Note . | Make sure you create amazon.com account for downloading the SDK. You would use your Amazon credentials to register your development device (amazon.com account provides an option to register your development device.) | “ACK Module with Espressif chipset” is used in these demo’s. make sure you download proper ACK SDK from the Amazon website | Create Product and add device capablities to the product once product is created. | Download the product configuration file from created product and provision the Ack module using CLI command | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#setting-up-the-build-platform",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#setting-up-the-build-platform"
  },"736": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"737": {
    "doc": "ACK OTA Bootloader",
    "title": "Project file structure",
    "content": ". | ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt;\\\\ACK_Device_SDK_4.2.202201251359\\\\ | SAM D21 ACK port file/directory is as follows . | user/platform/samd21_amazon_ack/ . | applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#project-file-structure",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#project-file-structure"
  },"738": {
    "doc": "ACK OTA Bootloader",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#programming-hex-file"
  },"739": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": "Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21G17D” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"740": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": "OTA architecture . | The SAM D21 Curiosity Nano Evaluation Kit has SAMD21G17D microcontroller mounted on it. | The SAMD21G17D has 128 KB of flash memory. For the implementation of OTA, the flash memory is divided into 4 sections/regions namely Bootloader, Status , Primary and Staging partition . | Bootloader : This section starts from the top of the flash and has a size of 3KB. It is used to store the bootloader application. The bootloader checks whether a new version of the application firmware is present or not in the staging region. if present, the bootloader upgrades the application firmware from the staging region to primary memory region and runs the latest application firmware from the primary memory region; if not present, the bootloader runs the existing application firmware in the primary memory region. | Status : This section starts from end of the bootloader region and has a size of 1KB. It stores known pattern to indicate that a new version of application firmware is present in staging region. | Primary : It starts from end of the status region and has a size of 62KB. The primary region holds the application firmware. | Staging: It starts from end of the primary partition and has a size of 62KB. The staging region holds a new version of the application firmware which needs to be upgraded. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"741": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": "Setting up environment for OTA update . | Open the project (samd21_amazon_ack\\bootloader\\firmware\\\\sam_d21_cnano.X) in MPLAB X IDE | Build the code by clicking on the “Clean and Build project” button in MPLAB X IDE tool bar, but do not program | Open the project (samd21_amazon_ack/applications/HelloWorld/firmware/sam_d21_cnano.X) in MPLAB X IDE | Open the MPLAB Harmony 3 Configurator (MHC) from Tools &gt; MPLAB Harmony 3 Configurator for HelloWorld project | After successful opening of MHC, in Project Graph select System and disable Generate Fuse Settings as shown below and generate the code | Change the memory configuration in project properties (Right click on HelloWorld_sam_d21_cnano project &gt; select properties &gt; select xc32-ld &gt; Symbols &amp; Macros) | Change the Preprocessor macro definitions as below to place the code in primary region ROM_ORIGIN=0x1000; ROM_LENGTH=0xF800 | Define “ACK_HOST_FIRMWARE_UPDATE” in HelloWorld application file “ack_user_config.h” | Increase Memory pool size macro “ACK_MEMORY_POOL_SIZE” value to 684 in ack_user_configh.h | Build the code by clicking on the “Clean and Build project” button in MPLAB X IDE tool bar, but do not program. | Navigate to ota &gt; utility folder inside ‘Your ACK SDK Downloaded folder’ and run “hexmerge.py” script to merge bootloader and HelloWorld project’s hex file . python hexmerge.py -o bootloader_helloworld_combined.hex -f your_sdk_folder/user/platform/samd21_amazon_ack/bootloader/firmware/sam_d21_cnano.X/dist/default/production/sam_d21_cnano.X.production.hex your_sdk_folder/user/platform/samd21_amazon_ack/applications/HelloWorld/firmware/sam_d21_cnano.X/dist/default/production/sam_d21_cnano.X.production.hex . | Program “bootloader_helloworld_combined.hex” to SAM D21 Curiosity Nano Evaluation Kit by following steps in Steps to program the hex file section. | . Note . | Output file “bootloader_helloworld_combined.hex” will be present in utility folder if specific path is not specified while running script. | The fuse settings are not programmable through firmware and enabling the fuse settings increases the size of the binary when generated through the Hex file, So disabling it. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"742": {
    "doc": "ACK OTA Bootloader",
    "title": " ",
    "content": "Building and upgrading the latest application firmware . | Open the project (samd21_amazon_ack/applications/HelloWorld/firmware/sam_d21_cnano.X) in MPLAB X IDE | Change the firmware version from 1 to 2 in “ACKUser_GetFirmwareVersion” function in file ‘ack_user_device.c’ | Build the code by clicking on the “Clean and Build project” button in MPLAB X IDE tool bar, but do not program | Navigate to ota &gt; utility folder inside ‘Your ACK SDK Downloaded folder’ and run “hex2ota.py” script to create a file suitable for uploading as latest application image from a hex file that was created by building the HelloWorld application. python hex2ota.py --device-type ACKTESTDEVICE &lt;Your ACK SDK Downloaded folder&gt;/user/platform/samd21_amazon_ack/applications/HelloWorld/firmware/sam_d21_cnano.X/dist/default/production/sam_d21_cnano.X.production.hex SecondOtaFirmware.ota . | ”–device-type” : USER Device Type should be enterted, for example here it is used as “ACKTESTDEVICE” | . | Upgrade the firmware using amazon portal | once successfully completed, click on Switch SW0 on SAMD21 Curiosity Nano to reset the device. | . Note . | The Switch SW0 is implemented to reset the device on press. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"743": {
    "doc": "ACK OTA Bootloader",
    "title": "Comments:",
    "content": ". | If you wish to remove the firmware update feature from your application undefine “ACK_HOST_FIRMWARE_UPDATE” Macro in “ack_user_config.h” and change Preprocessor macro definitions settings to default. | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . Revision: . | v1.6.0 Regenerated and tested the application | v1.5.0 Updated to support Amazon ACK SDK 4.2 and ACK module with Espressif chipset | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Updated to support Amazon ACK SDK 4.1 | v1.2.0 Updated to support Amazon ACK SDK 3.2 | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html#comments"
  },"744": {
    "doc": "ACK OTA Bootloader",
    "title": "ACK OTA Bootloader",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/bootloader/readme.html"
  },"745": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Amazon Alexa Connect Kit (ACK) SDK port, Smart Applications and Over the Air (OTA) firmware upgrade on SAM D21 Curiosity Nano",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#amazon-alexa-connect-kit-ack-sdk-port-smart-applications-and-over-the-air-ota-firmware-upgrade-on-sam-d21-curiosity-nano",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#amazon-alexa-connect-kit-ack-sdk-port-smart-applications-and-over-the-air-ota-firmware-upgrade-on-sam-d21-curiosity-nano"
  },"746": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Description:",
    "content": "This folder contains the SAM D21 microcontroller port for Amazon’s Alexa Connect Kit (ACK) Software Development Kit (SDK) and smart applications demonstrating the port. The folder also contains Over the Air (OTA) firmware upgrade feature for the smart Applications. SAM D21 is an low-power, high-performance Microchip’s ARM® Cortex®-M0+ based flash microcontroller, it is ideal for a wide range of home automation, consumer, metering, and industrial applications. Microchip offers a low cost SAM D21 Curiosity Nano evaluation kit to evaluate SAMD21G17D microcontroller. Alexa Connect Kit (ACK) is Amazon’s managed service that makes it easy to integrate Alexa into your product With ACK, you don’t need to write an Alexa skill, manage a cloud service, or develop complex network and security firmware to connect your product to Alexa. Instead, you integrate the ACK module into your product. ACK provides the managed services, software, and tools you can use to develop and manage your Alexa-connected products on an ongoing basis. Users can benefit from Alexa device control and other features, such as Amazon’s Wi-fi Simple Setup (WSS). The communication interface between SAM D21 and ACK module is through UART. | This folder contains a set of applications (under folder “applications) which uses Amazon Alexa connect kit (ACK) SDK with host microcontroller SAM D21. | The Application “HelloWorld” demonstrates turning ON/OFF of the development device (SAM D21 Curiosity Nano evaluation kit) | The Application “SmartLight” demonstrates controlling of smart light (LED0) on development device (SAM D21 Curiosity Nano evaluation kit) | The Application “Microwave” demonstrates controlling of a Microwave oven | The Application “DashReplenishment” demonstrates dashboard replenishment | . | The folder contains a folder “bootloader”. The bootloader helps demonstrate OTA firmware upgrade feature. | . This following bullet points provides links to the detailed topics: . | Modules/Technology Used | Hardware Used | Software/Tools Used | Hardware Setup | Setting up the build platform | Project file structure | Steps to program the hex file | Programming/Debugging Application Projects | Register your device | Running the demo | OTA Architecture | Setting up environment for OTA update | Building and upgrading the OTA application | Comments | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#description",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#description"
  },"747": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"748": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Modules/Technology Used:",
    "content": "Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#modulestechnology-used"
  },"749": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"750": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Curiosity Nano Evaluation Kit | Espressif Alexa Connect Kit - ACK Module | Connection wires | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#hardware-used"
  },"751": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"752": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Demo Application specific Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#softwaretools-used"
  },"753": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"754": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Hardware Setup:",
    "content": "Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#hardware-setup",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#hardware-setup"
  },"755": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"756": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Setting up the build platform",
    "content": ". | Download and extract ACK Device SDK 4.2 from Amazon developer website. | Copy and paste extracted SAM D21 ACK port folder “samd21_amazon_ack” into ACK device SDK’s user platform folder &lt;Your ACK SDK Downloaded folder&gt;/ACK_Device_SDK_4.2.202201251359/user/platform | . Note . | Make sure you create amazon.com account for downloading the SDK. You would use your Amazon credentials to register your development device (amazon.com account provides an option to register your development device.) | “ACK Module with Espressif chipset” is used in these demo’s. make sure you download proper ACK SDK from the Amazon website | Create Product and add device capablities to the product once product is created. | Download the product configuration file from created product and provision the Ack module using CLI command | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#setting-up-the-build-platform",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#setting-up-the-build-platform"
  },"757": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"758": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Project file structure",
    "content": ". | ACK SDK file/directory structure, refer “Readme.txt” in &lt;Your ACK SDK Downloaded folder&gt;\\\\ACK_Device_SDK_4.2.202201251359\\\\ | SAM D21 ACK port file/directory is as follows . | user/platform/samd21_amazon_ack/ . | applications : Contains all the ACK host sample applications built on MPLABX Tools and xc32 compiler | bootloader : Contains bootloader for over-the-air(OTA) firmware upgrade feature | hmcu_port : Contains shared host specific platform and OTA files | ota : Contains OTA source, config and header files | ack_samd21_cutom_loader.c : Contains bootloader specific code | ack_samd21_platform.c : Contains SAMD21 platform specific code | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#project-file-structure",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#project-file-structure"
  },"759": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"760": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Programming hex file:",
    "content": "Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#programming-hex-file"
  },"761": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"762": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Programming/Debugging Application Projects:",
    "content": "Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#programmingdebugging-application-projects",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#programmingdebugging-application-projects"
  },"763": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"764": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Register your device",
    "content": "Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#register-your-device",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#register-your-device"
  },"765": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"766": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Running the Demo:",
    "content": "Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#running-the-demo"
  },"767": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": "OTA architecture . Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"768": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": "Setting up environment for OTA update . Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"769": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": " ",
    "content": "Building and upgrading the OTA application . Refer the documentation in individual application folder . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"770": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | This solution is currently available only in US, Canada, and Mexico. Other regions contact Amazon. | . Revision: . | v1.6.0 Regenerated and tested the application | v1.5.0 Updated to support Amazon ACK SDK 4.2 and ACK module with Espressif chipset | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Updated to support Amazon ACK SDK 4.1 | v1.2.0 Updated to support Amazon ACK SDK 3.2 | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#comments",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html#comments"
  },"771": {
    "doc": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "title": "Amazon Alexa Connect (ACK) kit port OTA and Applications",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/samd21_amazon_ack/readme.html",
    "relUrl": "/apps/sam_d21_cnano/samd21_amazon_ack/readme.html"
  },"772": {
    "doc": "SAM D21 Curiosity Nano Evaluation Kit",
    "title": "SAM D21 Curiosity Nano Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM D21 Curiosity Nano Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | Fitness Tracker | Click Here | . | 3 | Location Tagged SOS | Click Here | . | 4 | BLE Weather Station and Motion Sensor | Click Here | . | 5 | Amazon Alexa Connect (ACK) kit port, OTA and Applications | Download Package Click Here | . |   | ACK Hello World |   | . |   | ACK Microwave |   | . |   | ACK Smart Light |   | . |   | ACK Dash Replenishment |   | . |   | ACK OTA Bootloader |   | . | 6 | Application migration from 8-bit PIC18F to 32-bit SAM D21 | Click Here | . | 7 | Application migration from 8-bit AVR to 32-bit SAM D21 | Click Here | . More Application Demos . For more application demos on SAM D21 Curiosity Nano Evaluation Kit and other Development Boards/Kits having the same part number (ATSAMD21G17D) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_cnano/readme.html",
    "relUrl": "/apps/sam_d21_cnano/readme.html"
  },"773": {
    "doc": "Serial Bridge Application",
    "title": "Serial Bridge Application to upgrade ATWINC1510 Firmware and Root Certificates",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#serial-bridge-application-to-upgrade-atwinc1510-firmware-and-root-certificates",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#serial-bridge-application-to-upgrade-atwinc1510-firmware-and-root-certificates"
  },"774": {
    "doc": "Serial Bridge Application",
    "title": "Description:",
    "content": "This application hex file acts as a serial bridge between the PC utility (winc_provisioner) and the ATWINC1510 module on SAM IOT board. The application interfaces with the PC over UART and with the ATWINC1510 module over the SPI lines. The application receives the ATWINC1510 firmware and root certificate bundle from the PC, and programs it into the ATWINC1510 module. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#description",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#description"
  },"775": {
    "doc": "Serial Bridge Application",
    "title": "Modules/Technology Used:",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#modulestechnology-used"
  },"776": {
    "doc": "Serial Bridge Application",
    "title": "Hardware Used:",
    "content": ". | SAM-IoT WX Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#hardware-used"
  },"777": {
    "doc": "Serial Bridge Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | MPLAB X IDE v5.50 | MPLAB XC32 Compiler v3.01 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#softwaretools-used"
  },"778": {
    "doc": "Serial Bridge Application",
    "title": "Setup:",
    "content": ". | Connect a USB cable to the DEBUG USB port for programming | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#setup",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#setup"
  },"779": {
    "doc": "Serial Bridge Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file in “winc_provisioner/hex” folder | Select Device has “ATSAMD21G18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#programming-hex-file"
  },"780": {
    "doc": "Serial Bridge Application",
    "title": "Running the Demo",
    "content": ". | Ensure the board is powered on (a USB cable is connected to the DEBUG USB port) | Refer the “Running the utility” section in the documentation under utilities/readme file | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#running-the-demo"
  },"781": {
    "doc": "Serial Bridge Application",
    "title": "Comments:",
    "content": ". | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . Revision: . | v1.6.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#comments",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html#comments"
  },"782": {
    "doc": "Serial Bridge Application",
    "title": "Serial Bridge Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/winc_provisioner/readme.html"
  },"783": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "ATWINC1510 Firmware upgrade and Root certificate upgrade Guide",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#atwinc1510-firmware-upgrade-and-root-certificate-upgrade-guide",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#atwinc1510-firmware-upgrade-and-root-certificate-upgrade-guide"
  },"784": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "Description:",
    "content": "The SAM-IoT WA V2 Development Application uses ATWINC1510-MR210PB IEEE 802.11 b/g/n module to enable cloud connectivity. The application’s functioning requires the ATWINC1510 module to have firmware compatible with the WiFi software stack running on the SAM-IoT microcontroller. To enable this compatibility, the ATWINC1510 module is updated with the firmware compatible with WiFi software running in the latest released demo. The root certificates to identify the IoT node to the AWS cloud platform are programmed in the non-volatile memory of the ATWINC1510 module. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#description",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#description"
  },"785": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": " If you are following readme other than TPDS, please complete below step before proceeding ",
    "content": "Serial Bridge Application to upgrade ATWINC1510 Firmware . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#-if-you-are-following-readme-other-than-tpds-please-complete-below-step-before-proceeding-",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#-if-you-are-following-readme-other-than-tpds-please-complete-below-step-before-proceeding-"
  },"786": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": " Complete the above highlighted step before proceeding further ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#-complete-the-above-highlighted-step-before-proceeding-further-",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#-complete-the-above-highlighted-step-before-proceeding-further-"
  },"787": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "Running the utility",
    "content": ". | Click on winc_provisioner.bat, It automatically downloads WINC firmware package and runs a command using a command prompt. | Select SAM IoT V2 COM PORT from the drop down and click OK . | Wait till verify passed message comes up as shown below and then click on enter to close he command prompt, if fails, reconnect the board and try . | . Revision: . | v1.6.0 released utility | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#running-the-utility",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html#running-the-utility"
  },"788": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "ATWINC1510 Firmware upgrade",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/utilities/readme.html"
  },"789": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " AWS Cloud IoT Core Application on SAM-IoT Wx v2 Development Board ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html"
  },"790": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html"
  },"791": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Description:",
    "content": "The SAM-IoT Wx v2 Development board based on the SAM D21 microcontroller (MCU) is a small and easily expandable demonstration and development platform for Wi-Fi-based IoT Node applications. This specific development board can be pre-provisioned for AWS IoT Core; The application demonstrates MQTT data transfer of onboard light and temperature sensor data to AWS IoT core. The board is referred to as SAM-IoT WA v2 Development Board when provisioned for AWS cloud IoT. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#description",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#description"
  },"792": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Key Highlights of SAM-IoT WA v2 Development Board:",
    "content": ". | On-board Light and Temperature Sensors. | Additional sensors can be interfaced using “click boards” through an on-board mikroBUS connector. | On-board nEDBG debugger. Hence, no external debugger is needed. | Virtual COM and USB Mass Storage for Drag &amp; Drop programming. | Dual power supply options. USB or Battery. | On-board Li-Po battery charging circuitry. | ATECC608B based secure cloud connectivity | USB HID interface to provision the ECC608B through the SAMD21 MCU. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#key-highlights-of-sam-iot-wa-v2-development-board",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#key-highlights-of-sam-iot-wa-v2-development-board"
  },"793": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Features of SAM-IoT WA v2 Development Board:",
    "content": ". | Drag &amp; Drop of application hex files. Hence, no need for IDE to program the SAM D21 microcontroller. | Microcontroller peripheral libraries and Middleware are based on the MPLAB Harmony v3 Software framework. | MPLAB X IDE-based project. | Command Line Interface (CLI) support for Wi-Fi credentials configuration. | 4 LED indicators to indicate the operating status. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#features-of-sam-iot-wa-v2-development-board",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#features-of-sam-iot-wa-v2-development-board"
  },"794": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Components Used:",
    "content": ". | ATSAMD21G18A microcontroller | ATWINC1510 Wi-FI module | ATECC608B secure element | MCP9808 digital temperature sensor | MCP73871 Battery Charger | MIC33050 Voltage Regulator | TEMT6000 ambient light sensor | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#components-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#components-used"
  },"795": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/samd21_wa_iot_v2 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#softwaretools-used"
  },"796": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html"
  },"797": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "AWS Account Setup",
    "content": "Details . To run the AWS Cloud IoT core solution, an AWS account is required. The following are the steps to configure an AWS account. Amazon Web Services (AWS) provides computing services for a fee. Some are offered for free on a trial or small-scale basis. By signing up for your AWS account, you are establishing an account to access a wide range of computing services. Think of your AWS account as your root account for AWS services. It is very powerful and gives you complete access. Be sure to protect your username and password. You control access to your AWS account by creating individual users and groups using the Identity and Access Management (IAM) Console. You also assign policies (permissions) to the group from the IAM Console. Create your own AWS account . | Create AWS account. Go to AWS website and follow instructions to create your own AWS account. Additional details can be found at create and activate a new AWS account. | Secure root account with MFA (multi-factor authentication) This is an important step to better secure your root account against attackers. Anyone logging in not only needs to know the password, but also a constantly changing code generated by an MFA device. AWS recommends a number of MFA device options at the following link: https://aws.amazon.com/iam/details/mfa/ The quickest solution is a virtual MFA device running on a phone. These apps provide the ability to scan the QR code AWS will generate to set up the MFA device. a. Return to https://aws.amazon.com/ and click the Sign In to the Console. b. If it asks for an IAM user name and password, select the Sign-in using root account credentials link. c. Enter the email and password for your AWS account. d. Under Find Services search for IAM and select it to bring up the Identity and Access Management options. e. Click on Activate MFA (Multi-factor Authentication) on your root account. f. Create an admin IAM user AWS best practices recommend not using your root account for standard administrative tasks, but to create a special admin user for those tasks. See https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#lock-away-credentials . | Follow the instructions at https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html for creating an admin user. | Enable MFA (multi-factor authentication) for the admin user. See https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#enable-mfa-for-privileged-users . | . Configuring the account using CloudFormation Templates . The usage of a custom PKI with TrustFLEX devices uses the Just-In-Time Registration (JITR) feature of AWS IoT Core. This feature requires a number of resources setup with an AWS account to work. The creation of these resources is automated through the AWS CloudFormation service. | Sign into the AWS console using the admin user created in the previous section. | Change to region to US East (Ohio) (a.k.a. us-east-2). This is done from a dropdown in the top right of the console webpage after logging in. | Under Find Services search for CloudFormation and select it to bring up that service. | Click Create Stack button. | Select Upload a template file from the page of the stack creation. | Click Choose file and upload the aws-zero-touch-full-setup.yaml file. Note: If running from a China region, you’ll need to select the aws-zero-touch-full- setup-cn.yaml instead. These files are available in ~/.trustplatform folder. | Click Next to move on to the stack details. | Enter TrustFLEX as the stack name. Actual name isn’t important, just has to be unique. | Enter a password for the user that will be created to run the demo under UserPassword. | Click Next to move on to the stack options. Nothing needs to be changed here. | Click Next to move on to the stack review. | Check the acknowledgement box regarding IAM resources at the bottom of the page. | Click Create Stack to start the resource creation. | Wait until the stack creation completes. This can take a few minutes. Once done, the stack you created will show as CREATE_COMPLETE. | Save demo credentials. Click the Outputs tab for the stack to see the credentials to be saved. | Save the credentials to aws_credentials.yaml file in ”~/.trustplatform/aws_credentials.yaml” folder. Note: ~ Indicates windows home directory is /user/username . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#aws-account-setup",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#aws-account-setup"
  },"798": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html"
  },"799": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "AWS Cloud IoT Provisioning Guide",
    "content": "Details . If this is the first time you are building/running this version of the demo, you must complete this step before proceeding further. Otherwise, you may skip this step. | Install Trust Platform Design Suite version 2 TPDSv2 . | Launch Trust Platform Design Suite v2 from windows search bar, a window launches as shown below . | Select “Trust Platform Design Suite” in webviews and Click on Usecases . | In Select Security Solution, Under Use Cases select AWS IoT Authentication . | Scroll Down and in Available solution by provisioning flow select AWS IoT Authentication under TrustFLEX . | A Usecase gets launched. click on AWS Connect-IoT Auth-TFLEX from the Usescases . | AWS Cloud Connect – IoT Authentication page launches as shown below . | Scroll down and select EV62V87A Development board . | Connect SAM-IoT Wx v2 Development Board to PC running Trust Platform Design Suite . | Ensure MPLAB X Path is set in File -&gt; Preference under System Settings in TPDS. This helps to program the provisioner kit firmware to the SAM-IoT Wx v2 Development Board . | Scroll down to transaction diagram . | Click on Icon 1 and wait till a green right mark appears. | Sequentially Click on Icon 2, 3 and 4 . | Note the output in the output window on the right side . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#aws-cloud-iot-provisioning-guide",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#aws-cloud-iot-provisioning-guide"
  },"800": {
    "doc": "AWS Cloud IoT Core Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html"
  },"801": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "ATWINC1510 Wi-Fi controller module firmware and AWS Root certificates upgrade Guide",
    "content": "Details . If the SAM-IoT Wx v2 development board is glowing RED LED (Indicates ATWINC1510 Wi-Fi controller module firmware is not up to date), follow the below steps to upgrade the ATWINC1510 firmware. Otherwise(if it glows GREEN ), you may skip this step. | Click on C Source Folder in TPDS transaction diagram . | In windows explorer, Application folder gets open . | Click on utilities folder . | Click on winc_provisioner.bat, It automatically downloads the ATWINC1510 firmware package and runs the necessary commands using the command prompt. | Select the communication (COM) port identified for “SAM-IoT Wx v2” development board from the drop down list and click OK . | Wait till verify passed message comes up, as shown below, and then click on enter to close the command prompt; if it fails, reconnect the board and try again. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#atwinc1510-wi-fi-controller-module-firmware-and-aws-root-certificates-upgrade-guide",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#atwinc1510-wi-fi-controller-module-firmware-and-aws-root-certificates-upgrade-guide"
  },"802": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Application Demonstration",
    "content": "Details . The following sections describes the steps to run the application. 1. How to setup the SAM-IoT WA v2 Development Board . | Connect the SAM-IoT WA v2 Development board to the host PC’s USB port to power-up the board. | Alternatively, the board can be powered using a Li-Po battery. The board must be connected through a USB port to perform a firmware upgrade or Wi-Fi configuration. | Once connected to a PC, a mass storage drive icon by the name CURIOSITY will appear. | Drag and Drop the hex file present in the samiot2_aws_cloud_core\\\\hex folder or use MPLAB X IDE to Program. Check section Firmware upgrade and Wi-Fi configuration process below for more detail . | Configure the Wi-Fi Credentials using Wi-Fi configuration through CLI method explained Below. | . 2. Firmware upgrade and Wi-Fi configuration process . Firmware upgrade through TPDS and MPLAB X IDE . | Click on MPLAB X Project. A project opens in MPLAB X IDE. Build and program the firmware . | . Firmware upgrade through Drag &amp; Drop . | Download the latest version of the hex file from the hex folder. | Drag &amp; Drop the downloaded .hex file onto the CURIOSITY drive. | This will automatically program the microcontroller with the provided .hex file. There is no need to open the MPLAB X IDE to program the .hex file. | . Firmware upgrade through MPLAB X IDE . | Most developers usually follow this method to program the .hex file from the MPLAB X IDE environment. | . Wi-Fi configuration through CLI . | Open a terminal application on the host PC for the virtual COM port of the connected SAM-IoT WA v2 Development board, with 9600-8-None-1 settings. | Just enter the below command to set the Wi-Fi credentials. wifi &lt; SSID &gt;,&lt; PASSWORD &gt;,&lt; SECURITY TYPE &gt; example : wifi microchip,microchip@123,2 . Note : No need of repeating this step every time while running the demo, Device remembers last used WiFi credentials and tries to connect to it. If WiFi credentials changes, this step should be performed. | . 3. Running the demo application . | If the Wi-Fi network is active, then the SAM-IoT WA v2 Development board establishes connectivity with the Wi-Fi network, sets the Blue LED, securely connects to the AWS IoT cloud, and sets the Green LED. | After a successful connection, the SAM-IoT WA v2 Development board pushes the real-time light and temperature sensors data to the AWS IoT cloud page and toggles the Yellow LED. If not, Red LED glows, indicating ERROR. Note : AWS cloud path to visualize the data pushed from the device “AWS IOT &gt; Manage &gt; Things &gt; ThingNAME (ThingNAME = device_serialnumber) &gt; classic Shadow” . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#application-demonstration",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#application-demonstration"
  },"803": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "The AWS Lambda service",
    "content": "Details . AWS Lambda is a service that enables code to be run in the cloud without worrying about things like provisioning, server management, and scalability. It natively supports many different programming languages, and interfaces with a wide range of other AWS services to facilitate cloud development. we will use AWS Lambda to transfer temperature and light sensor data from SAM-IoT Development Board to cloud watch. The main concept that we will focus on is how to route data between AWS Lambda and AWS IoT Core. | Sensor data is sent from connected devices to the AWS Cloud as MQTT messages. | The data is forwarded from AWS IoT Core to AWS Lambda, where it is routed to cloud watch for plotting the graph. | . Creating a Role in AWS IAM . | Sign in to the AWS Management Console and select the IAM service. | Select Roles under Access Management in the menu on the left-hand side . | Click Create role. | Select AWS service as the trusted entity. | Select Lambda as the use case. | Click Next: Permissions. | Attach the AWSIoTDataAccess, CloudWatchFullAccess and AWSLambdaBasicExecutionRole permission policies by using the search bar and ticking the relevant boxes. This will allow our Lambda function to send data to the AWS IoT Core and use Amazon CloudWatch logs. We will not cover Amazon CloudWatch in this tutorial, but it could be a useful tool for debugging your application later on. | Click Next: Tags. | Click Next: Review. | Enter Lambda_IoT_role as the Role name. | Click Create role . | . Designing an AWS Lambda function . Creating an empty Lambda function . AWS Lambda is a service that enables us to run code in the cloud without worrying about server management. It can be set up to send and receive data from many different services, such as AWS IoT Core, which we will make use of in this tutorial. To create an AWS Lambda function: . | Sign in to the AWS Management Console and select the Lambda service. | Select Functions in the menu on the left-hand side. | Click on Create function. | Choose Author from scratch. | Enter iot_Core_to_CwMetrics as the Function name. | Select Python 3.8 as the Runtime. | Expand Choose or create an execution role under Permissions and select Use an existing role. | Select the Lambda_IoT_role that we defined earlier . | Click on Create function. | . When the AWS Lambda function has been successfully created, the user should be redirected to the Configuration page for the iot_Core_to_CwMetrics function. This page can also be found by selecting Functions in the menu on the left-hand side in AWS Lambda and then selecting the function from the list. Triggering the Lambda function for relevant MQTT packages . The next step is to configure the Lambda function to trigger when messages containing sensor data are published over MQTT in AWS IoT Core: . | On the Lambda function’s configuration page, expand the Designer panel. | Click on Add trigger. | Select AWS IoT as the trigger in the dropdown menu. | Select Custom IoT rule. | In the Rule dropdown, select Create new rule. | Enter RouteSensorData as the Rule name. | Enter SELECT * FROM “$aws/things/ThingName/shadow/#” as the Rule query statement. NOTE : ThingName is the unique serial number of the device . | Click Add. | . Implementing the Lambda function . | Ensure that the iot_Core_to_CwMetrics function is selected in the Designer panel. | Paste the following Python code in the editor in the Function code panel . import json # Python library for dealing with JSON objects import boto3 # boto3 is the AWS SDK for Python cloudwatch = boto3.client('cloudwatch') #Define payload attributes that may be changed based on device message schema ATTRIBUTES = ['temperature','light','state','reported'] # Define CloudWatch namespace CLOUDWATCH_NAMESPACE = \\\"thing2/MonitorMetrics\\\" # Define function to publish the metric data to CloudWatch def cw(topic, metricValue, metricName): metric_data = { 'MetricName': metricName, 'Dimensions': [{'Name': 'topic', 'Value': topic}], 'Unit': 'None', 'Value': metricValue, 'StorageResolution': 1 } cloudwatch.put_metric_data(MetricData=[metric_data],Namespace=CLOUDWATCH_NAMESPACE) return # Define the handler to loop through all the messages and looks to see if the message attributes # include light or temp and calls the cw() function if so to publish the custom metrics to Amazon CloudWatch def lambda_handler(event, context): my = list(event.values()) my_list = list(my[0].values()) print(my_list[0]) for e in my_list[0]: print(\\\"Received a message: {}\\\".format(str(e))) print(e) # Potential test point # Iterate through each attribute we'd like to publish for attribute in ATTRIBUTES: # Validate the event payload contains the desired attribute if attribute in e: print(\\\"publishing {} to CloudWatch\\\".format(attribute)) cw(\\\"SAM-IoT\\\", my_list[0][attribute], attribute) return event . | Click Save . | . Visualizing sensor data in cloudwatch . | Search CloudWatch in AWS search box and open it . | Click on Dashboard on the right side of the window under CloudWatch . | Click on Create Dashboard . | Enter Dashboard name as samiotv2_dashboard and click on Create Dashboard . | Under Add widget Select Number . | Under Add metric graph, select thing2/MonitorMetrics and then topic . | Under Metrics, select BOTH SAM-IoT temperature and light metrics . | Navigate to Graphed metrics and change the period to 1 second in both temperature and light metrics. Then click on Create widget . | Click Save dashboard . | This Dashboard page refreshes every 10 seconds and update the sensor data. Note : ** Your custom dashboard can be found in **CloudWatch &gt; Dashboards &gt; your dash board name (here it is samiotv2_dashboard) . &lt;/details&gt; . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#the-aws-lambda-service",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#the-aws-lambda-service"
  },"804": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Reference:",
    "content": ". | For more details on the application usage, functionality and other details, refer to the SAM-IoT Wx v2 Development Board User Guide | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#reference",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#reference"
  },"805": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#comments",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#comments"
  },"806": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "Revision:",
    "content": ". | v1.6.0 - released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#revision",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html#revision"
  },"807": {
    "doc": "AWS Cloud IoT Core Application",
    "title": "AWS Cloud IoT Core Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_aws_cloud_core/readme.html"
  },"808": {
    "doc": "Serial Bridge Application",
    "title": "Serial Bridge Application to upgrade ATWINC1510 Firmware and Root Certificates",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#serial-bridge-application-to-upgrade-atwinc1510-firmware-and-root-certificates",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#serial-bridge-application-to-upgrade-atwinc1510-firmware-and-root-certificates"
  },"809": {
    "doc": "Serial Bridge Application",
    "title": "Description:",
    "content": "This application hex file acts as a serial bridge between the PC utility (winc_provisioner) and the ATWINC1510 module on SAM IOT board. The application interfaces with the PC over UART and with the ATWINC1510 module over the SPI lines. The application receives the ATWINC1510 firmware and root certificate bundle from the PC, and programs it into the ATWINC1510 module. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#description",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#description"
  },"810": {
    "doc": "Serial Bridge Application",
    "title": "Modules/Technology Used:",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#modulestechnology-used"
  },"811": {
    "doc": "Serial Bridge Application",
    "title": "Hardware Used:",
    "content": ". | SAM-IoT WX Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#hardware-used"
  },"812": {
    "doc": "Serial Bridge Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | MPLAB X IDE v6.00 | MPLAB XC32 Compiler v4.10 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#softwaretools-used"
  },"813": {
    "doc": "Serial Bridge Application",
    "title": "Setup:",
    "content": ". | Connect a USB cable to the DEBUG USB port for programming | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#setup",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#setup"
  },"814": {
    "doc": "Serial Bridge Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file in “winc_provisioner/hex” folder | Select Device has “ATSAMD21G18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#programming-hex-file"
  },"815": {
    "doc": "Serial Bridge Application",
    "title": "Running the Demo",
    "content": ". | Ensure the board is powered on (a USB cable is connected to the DEBUG USB port) | Refer the “Running the utility” section in the documentation under utilities/readme file | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#running-the-demo"
  },"816": {
    "doc": "Serial Bridge Application",
    "title": "Comments:",
    "content": ". | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . Revision: . | v1.6.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#comments",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html#comments"
  },"817": {
    "doc": "Serial Bridge Application",
    "title": "Serial Bridge Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/winc_provisioner/readme.html"
  },"818": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "ATWINC1510 Firmware upgrade and Root certificate upgrade Guide",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#atwinc1510-firmware-upgrade-and-root-certificate-upgrade-guide",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#atwinc1510-firmware-upgrade-and-root-certificate-upgrade-guide"
  },"819": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "Description:",
    "content": "The SAM-IoT WZ V2 Development Application uses ATWINC1510-MR210PB IEEE 802.11 b/g/n module to enable cloud connectivity. The application’s functioning requires the ATWINC1510 module to have firmware compatible with the WiFi software stack running on the SAM-IoT microcontroller. To enable this compatibility, the ATWINC1510 module is updated with the firmware compatible with WiFi software running in the latest released demo. The root certificates to identify the IoT node to the Azure cloud platform are programmed in the non-volatile memory of the ATWINC1510 module. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#description",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#description"
  },"820": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": " If you are following readme other than TPDS, please complete below step before proceeding ",
    "content": "Serial Bridge Application to upgrade ATWINC1510 Firmware . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#-if-you-are-following-readme-other-than-tpds-please-complete-below-step-before-proceeding-",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#-if-you-are-following-readme-other-than-tpds-please-complete-below-step-before-proceeding-"
  },"821": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": " Complete the above highlighted step before proceeding further ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#-complete-the-above-highlighted-step-before-proceeding-further-",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#-complete-the-above-highlighted-step-before-proceeding-further-"
  },"822": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "Running the utility",
    "content": ". | Click on winc_provisioner.bat, It automatically downloads WINC firmware package and runs a command using a command prompt. | Select SAM IoT V2 COM PORT from the drop down and click OK . | Wait till verify passed message comes up as shown below and then click on enter to close he command prompt, if fails, reconnect the board and try | . Revision: . | v1.6.0 released utility | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#running-the-utility",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html#running-the-utility"
  },"823": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "ATWINC1510 Firmware upgrade",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/utilities/readme.html"
  },"824": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Microsoft Azure Cloud IoT Core Application on SAM-IoT Wx v2 Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#microsoft-azure-cloud-iot-core-application-on-sam-iot-wx-v2-development-board",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#microsoft-azure-cloud-iot-core-application-on-sam-iot-wx-v2-development-board"
  },"825": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html"
  },"826": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Description:",
    "content": "The SAM-IoT Wx v2 Development board based on the SAM D21 microcontroller (MCU) is a small and easily expandable demonstration and development platform for Wi-Fi-based IoT Node applications. This specific development board can be provisioned for Azure IoT Core; The application demonstrates MQTT data transfer of onboard light and temperature sensor data to Microsoft Azure IoT core. The board is referred to as SAM-IoT WZ v2 Development Board when provisioned for Microsoft Azure cloud IoT. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#description",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#description"
  },"827": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Key Highlights of SAM-IoT WX v2 Development Board:",
    "content": ". | On-board Light and Temperature Sensors. | Additional sensors can be interfaced using “click boards” through an on-board mikroBUS connector. | On-board nEDBG debugger. Hence, no external debugger is needed. | Virtual COM and USB Mass Storage for Drag &amp; Drop programming. | Dual power supply options. USB or Battery. | On-board Li-Po battery charging circuitry. | ATECC608B based secure cloud connectivity | USB HID interface to provision the ECC608B through the SAMD21 MCU. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#key-highlights-of-sam-iot-wx-v2-development-board",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#key-highlights-of-sam-iot-wx-v2-development-board"
  },"828": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Features of SAM-IoT WA v2 Development Board:",
    "content": ". | Drag &amp; Drop of application hex files. Hence, no need for IDE to program the SAM D21 microcontroller. | Microcontroller peripheral libraries and Middleware are based on the MPLAB Harmony v3 Software framework. | MPLAB X IDE-based project. | Command Line Interface (CLI) support for Wi-Fi credentials configuration. | 4 LED indicators to indicate the operating status. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#features-of-sam-iot-wa-v2-development-board",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#features-of-sam-iot-wa-v2-development-board"
  },"829": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Components Used:",
    "content": ". | ATSAMD21G18A microcontroller | ATWINC1510 Wi-FI module | ATECC608B secure element | MCP9808 digital temperature sensor | MCP73871 Battery Charger | MIC33050 Voltage Regulator | TEMT6000 ambient light sensor | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#components-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#components-used"
  },"830": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/samd21_wz_iot_v2 . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#softwaretools-used"
  },"831": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html"
  },"832": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Microsoft Azure Account Setup",
    "content": "Details . In order to run the Azure demo an Azure account is required. This document describes the steps required to obtain and configure an Azure account for the demo. Azure provides computing services for a fee. Some are offered for free on a trial or small-scale basis. By signing up for your own Azure account, you are establishing an account to gain access to a wide range of computing services. Create your own Azure account . | Create Azure account Go to Azure Portal and follow instructions to create your own Azure account. If you already have an azure account, enter the credentials and log in. | Click Create a resource in the azure portal. If prompted for Create a Free account, Start Free account by clicking on Start Free. Once the account creation is complete, it starts over with above step. Select Create a resource again and continue with next steps. | Click Internet of Things and from that select IoT Hub . | The new window prompts to select the subscription, Resource Group, Region and IoT Hub Name. | Select the Subscription as Free Trial. | In the resource group, click Create new and enter any name of your choice. | In the Region, Select any region of your choice. | In the IoT Hub Name, enter a unique name to identify the Hub. | . | Click Review + create after entering all the details. | It will take you to the Review + create Tab, click Create to create an IoT Hub . | It will start the IoT hub deployment process and it will take a while to create the IoT hub. | Click Go to resource and it will take you to the IoT Hub overview page. | Note down only your IoT Hub Hostname(exclude .azure-devices.net) and Subscription ID as highlighted below. The Hostname should be same as one created in Step 4.4 . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#microsoft-azure-account-setup",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#microsoft-azure-account-setup"
  },"833": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html"
  },"834": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Azure Cloud IoT Provisioning Guide",
    "content": "Details . If this is the first time you are building/running this version of the demo, you must complete this step before proceeding further. Otherwise, you may skip this step. | Install TPDSv2(Trust Platform Design Suite version 2) . | Launch Trust Platform Design Suite v2 from windows search bar, a window launches as shown below . | Select “Trust Platform Design Suite” in webviews and Click on Usecases . | In Select Security Solution, Under Use Cases select Azure IoT Authentication . | Scroll Down and in Available solution by provisioning flow select Azure IoT Authentication under TrustFLEX . | A Usecase gets launched. click on Azure Connect-IoT Auth-TFLEX from the Usescases . | Azure Cloud Connect – IoT Authentication page launches as shown below . | Scroll down and select EV62V87A Development board. | Connect SAM-IoT Wx v2 Development Board to PC running Trust Platform Design Suite . | Ensure MPLAB X Path is set in File -&gt; Preference under System Settings in TPDS. This helps to program the provisioner kit firmware to the SAM-IoT Wx v2 Development Board . | Scroll down to transaction diagram . | Click on Icon 1 and wait till a green right mark appears. | Click on Icon 2, This step takes you to Azure Login page.Choose you Azure account and Login. After this you can see the meesage Authentication completed. You can close this window now in the browser. | Enter your subscription ID in the dialog box. | Enter the resource group in the dialog box(created in step 2 of create your own Azure account).If the entered resource group does not exists a new one is automatically created. | Enter your presviously created Azure IOT hub name .A new hub name is created when the entered hub name doesnt exists.This may take a few minutes. | The device is successfully registered into azure account after step 2 . | Proceed with step 3 and 4 to complete the usecase . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#azure-cloud-iot-provisioning-guide",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#azure-cloud-iot-provisioning-guide"
  },"835": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html"
  },"836": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "ATWINC1510 Wi-Fi controller module firmware and Azure Root certificates upgrade Guide",
    "content": "Details . If the SAM-IoT Wx v2 development board is glowing RED LED (Indicates ATWINC1510 Wi-Fi controller module firmware is not up to date), follow the below steps to upgrade the ATWINC1510 firmware. Otherwise(if it glows GREEN ), you may skip this step. | Click on C Source Folder in TPDS transcation diagram . | In windows explorer, Applcation folder gets open . | Click on utilities folder . | Click on winc_provisioner.bat, It automatically downloads the ATWINC1510 firmware package and runs the necessary commands using the command prompt. | Select the communication (COM) port identified for “SAM-IoT Wx v2” development board from the drop down list and click OK . | Wait till verify passed message comes up, as shown below, and then click on enter to close the command prompt; if it fails, reconnect the board and try again. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#atwinc1510-wi-fi-controller-module-firmware-and-azure-root-certificates-upgrade-guide",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#atwinc1510-wi-fi-controller-module-firmware-and-azure-root-certificates-upgrade-guide"
  },"837": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Application Demonstration",
    "content": "Details . The following sections describes the steps to run the application. 1. How to setup the SAM-IoT WZ v2 Development Board . | Connect the SAM-IoT WZ v2 Development board to the host PC’s USB port to power-up the board. | Alternatively, the board can be powered using a Li-Po battery. The board must be connected through a USB port to perform a firmware upgrade or Wi-Fi configuration. | Once connected to a PC, a mass storage drive icon by the name CURIOSITY will appear. | Drag and Drop the hex file present in the samiot2_azure_cloud_core\\\\hex folder or use MPLAB X IDE to Program. Check section Firmware upgrade and Wi-Fi configuration process below for more detail . | Configure the Wi-Fi Credentials using Wi-Fi configuration through CLI method explained Below . | . 2. Firmware upgrade and Wi-Fi configuration process . Firmware upgrade through TPDS and MPLAB X IDE . | Click on MPLAB X Project. A project opens in MPLAB X IDE. Build and program the firmware . | . Firmware upgrade through Drag &amp; Drop . | Download the latest version of the hex file from the hex folder. | Drag &amp; Drop the downloaded .hex file onto the CURIOSITY drive. | This will automatically program the microcontroller with the provided .hex file. There is no need to open the MPLAB X IDE to program the .hex file. | . Firmware upgrade through MPLAB X IDE . | Most developers usually follow this method to program the .hex file from the MPLAB X IDE environment. | . Wi-Fi configuration through CLI . | Open a terminal application on the host PC for the virtual COM port of the connected SAM-IoT WA v2 Development board, with 9600-8-None-1 settings. | Just enter the below command to set the Wi-Fi credentials. wifi &lt; SSID &gt;,&lt; PASSWORD &gt;,&lt; SECURITY TYPE &gt; example : wifi microchip,microchip@123,2 . Note : No need of repeating this step every time while running the demo, Device remembers last used WiFi credentials and tries to connect to it. If WiFi credentials changes, this step should be performed. | . 3. Running the demo application . | If the Wi-Fi network is active, then the SAM-IoT WZ v2 Development board establishes connectivity with the Wi-Fi network, sets the Blue LED, securely connects to the Azure IoT cloud, and sets the Green LED. | After a successful connection, the SAM-IoT WZ v2 Development board pushes the real-time light and temperature sensors data to the Azure IoT cloud page and toggles the Yellow LED. If not, Red LED glows, indicating ERROR. &lt;/details&gt; . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#application-demonstration",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#application-demonstration"
  },"838": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Fetching data from Azure Cloud and displaying on Device explorer",
    "content": "Details . | Download and install Device Explorer application . | Run Device Explorer from windows search bar . | From the Azure Portal: click on your IoT Hub &gt; Shared access polices &gt; iothubowner &gt; connection string-primary key &gt; Copy to clipboard . | Paste copied connection string-primary key to IoT Hub Connection String tab on device explorer. | Then click on Update . | Click on Data Tab and press Monitor button . | The real-time light and temperature sensors data from the Azure IoT cloud is fetched and displayed as shown below . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#fetching-data-from-azure-cloud-and-displaying-on-device-explorer",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#fetching-data-from-azure-cloud-and-displaying-on-device-explorer"
  },"839": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Reference:",
    "content": ". | For more details on the application usage, functionality and other details, refer to the SAM-IoT Wx v2 Development Board User Guide | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#reference",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#reference"
  },"840": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#comments",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#comments"
  },"841": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Revision:",
    "content": ". | v1.6.0 - released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#revision",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html#revision"
  },"842": {
    "doc": "Microsoft Azure Cloud IoT Core Application",
    "title": "Microsoft Azure Cloud IoT Core Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/samiot2_azure_cloud_core/readme.html"
  },"843": {
    "doc": "SAM D21 IoT v2 Development Board",
    "title": "SAM D21 IoT v2 Development Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM D21 IoT Wx v2 Development Board. | SI No | Demo Name | Download Link | . | 1 | AWS Cloud IoT Core | Click Here | . | 2 | Microsoft Azure Cloud IoT Core | Click Here | . For more application demos on SAM D21 IoT Wx v2 Development Board and other Development Boards/Kits having the same part number (ATSAMD21G18A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_iot_v2/readme.html",
    "relUrl": "/apps/sam_d21_iot_v2/readme.html"
  },"844": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "AC Sleepwalking Application built with GCC Toolchain on SAM D21 Xplained Pro Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#ac-sleepwalking-application-built-with-gcc-toolchain-on-sam-d21-xplained-pro-kit",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#ac-sleepwalking-application-built-with-gcc-toolchain-on-sam-d21-xplained-pro-kit"
  },"845": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html"
  },"846": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Description:",
    "content": "This application demonstrates how to use the AC (Analog Comparators) Peripheral library to perform a single-shot conversion when the peripheral is triggered by the RTC (Real-Time Counter) compare event. The generation of a trigger and compare operation is done while the CPU is in the standby sleep mode. The AC generates the interrupt at the end of the comparison which wakes the CPU. The application demonstrates to build an MPLAB Harmony v3 project with ARM GNU Toolchain in MPLABX IDE. The page demonstrates configuring, building, and running an MPLAB Harmony v3 peripheral library (PLIB) based application with the ARM GCC toolchain developed on the SAM D21 Xplained Pro Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#description",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#description"
  },"847": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | AC | PORTS | RTC | PM (Power Manager) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#modulestechnology-used"
  },"848": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#hardware-used"
  },"849": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#softwaretools-used"
  },"850": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Setting up SAM D21 Xplained Pro Evaluation Kit:",
    "content": ". | Connect a voltage below VDD to pin 17 of the EXT1 connector | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#setting-up-sam-d21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#setting-up-sam-d21-xplained-pro-evaluation-kit"
  },"851": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Prerequisite:",
    "content": ". | Download and install ARM GNU Toolchain v6.3.1. | Note: If Atmel Studio is already installed in PC, then installing ARM GCC toolchain is not required as Atmel Studio is already bundled with ARM GNU Toolchain. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#prerequisite",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#prerequisite"
  },"852": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Configure the project to use ARM GCC Toolchain:",
    "content": "This can be done with two methods, either automatically or manually. | Automatic Detection: If Atmel Studio is installed in PC, By default, MPLAB X IDE detects the ARM GCC toolchain (installed as a part of Atmel Studio) and shows it in the MPLAB X IDE’s Project properties. Since the ARM GCC toolchain is already available, switch to the ARM GCC toolchain from the project properties. | Manual: If Atmel Studio is not installed, install the ARM GCC toolchain manually. Go to MPLAB X IDE -&gt; Tools -&gt; Options -&gt; Embedded -&gt; Build Tools -&gt; Add -&gt; give the base directory -&gt; Enter the path of “xx/xxx/toolchain/arm/arm-gnu-toolchain\\bin”. Save it. | | Now, select the ARM GCC toolchain in the project properties. Select the Project -&gt; Right Click -&gt; Properties -&gt; select the ARM GCC toolchain in compiler options and save. | | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#configure-the-project-to-use-arm-gcc-toolchain",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#configure-the-project-to-use-arm-gcc-toolchain"
  },"853": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file: . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21J18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#programming-hex-file"
  },"854": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sam_d21_xpro\\\\samd21_ac_sleepwalk_singleshot_gcc\\firmware\\\\sam_d21_xpro.X) in MPLAB X IDE | Ensure “SAM D21 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#programmingdebugging-application-project"
  },"855": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Running the Demo:",
    "content": ". | Perform Prerequisite, Configure the project to use ARM GCC Toolchain and Setting up SAM D21 Xplained Pro Evaluation Kit steps mentioned above, if not done already. | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Connect to the EDBG Virtual COM port and configure the baud rate to 115200 | Build and Program the application using the MPLAB X IDE. | The console displays the message stating whether voltage at PA04 is lower or greater than the internal bandgap voltage (1.1 V) | LED0 toggles when comparison is done. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#running-the-demo"
  },"856": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Comments:",
    "content": ". | Reference Guide: Build MPLAB Harmony v3 project with ARM GCC toolchain in MPLAB X IDE | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#comments",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#comments"
  },"857": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "Revision:",
    "content": ". | v1.6.0 Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 regenerated and tested demo application | v1.2.0 regenerated and tested demo application | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#revision",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html#revision"
  },"858": {
    "doc": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "title": "AC Sleepwalking Application built with ARM GCC Toolchain",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_ac_sleepwalk_singleshot_gcc/readme.html"
  },"859": {
    "doc": "Getting Started",
    "title": "Getting Started Application on SAM D21 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#getting-started-application-on-sam-d21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#getting-started-application-on-sam-d21-xplained-pro-evaluation-kit"
  },"860": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html"
  },"861": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to 1 second, 2 seconds, 4 seconds and back to 500 milliseconds every time you press the switch SW0 on the SAM D21 Xplained Pro Evaluation Kit. Also, an LED0 is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#description",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#description"
  },"862": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | RTC | DMAC | SERCOM(I2C) | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#modulestechnology-used"
  },"863": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#hardware-used"
  },"864": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#softwaretools-used"
  },"865": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM D21 Xplained Pro Evaluation Kit | The SAM D21 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM D21 Xplained Pro Evaluation Kit . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#setup",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#setup"
  },"866": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21J18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#programming-hex-file"
  },"867": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (samd21_getting_started\\firmware\\\\sam_d21_xpro.X) in MPLAB X IDE | Ensure “SAM D21 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#programmingdebugging-application-project"
  },"868": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM D21 Xplained Pro Evaluation Kit to change the default sampling rate to one second | Every subsequent pressing of switch SW0 on SAM D21 Xplained Pro Evaluation Kit changes the default sampling rate to two seconds, four seconds and 500 ms and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#running-the-demo"
  },"869": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#comments"
  },"870": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html#revision"
  },"871": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started/readme.html"
  },"872": {
    "doc": "Getting Started",
    "title": "Getting Started with Harmony v3 Drivers on SAM D21 MCU Using FreeRTOS",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#getting-started-with-harmony-v3-drivers-on-sam-d21-mcu-using-freertos",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#getting-started-with-harmony-v3-drivers-on-sam-d21-mcu-using-freertos"
  },"873": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html"
  },"874": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM. When a character is entered on the console, the last five written temperature values are read from the EEPROM and displayed on the console. Also, an LED0 is toggled every time the temperature is displayed on the serial console . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#description",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#description"
  },"875": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | SERCOM(I2C) | SERCOM(USART) | . | Drivers . | SERCOM(I2C) | USART | . | Third Party Libraries . | FreeRTOS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#modulestechnology-used"
  },"876": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#hardware-used"
  },"877": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#softwaretools-used"
  },"878": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM D21 Xplained Pro Evaluation Kit | The SAM D21 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM D21 Xplained Pro Evaluation Kit . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#setup",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#setup"
  },"879": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21J18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#programming-hex-file"
  },"880": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (samd21_getting_started/firmware/drivers_freertos_sam_d21_xpro.X) in MPLAB X IDE | Ensure “SAM D21 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#programmingdebugging-application-project"
  },"881": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every second, as shown below . | Also, notice the LED0 blinking at one second rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press any key to display the last five written temperature values from the EEPROM | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#running-the-demo"
  },"882": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Drivers on SAM D21 MCUs Using FreeRTOS | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#comments",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#comments"
  },"883": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#revision",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html#revision"
  },"884": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_getting_started_freertos/readme.html"
  },"885": {
    "doc": "Low Power",
    "title": "Low Power Application on SAM D21 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#low-power-application-on-sam-d21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#low-power-application-on-sam-d21-xplained-pro-evaluation-kit"
  },"886": {
    "doc": "Low Power",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html"
  },"887": {
    "doc": "Low Power",
    "title": "Description",
    "content": "On power-up, the application prints a menu on a PC serial terminal. The menu provides options to measure the device power consumption in sleep modes or to measure wake-up time when the device is wake-up from one of the sleep modes. Once the option is selected, the application sets up EIC peripheral clock source and goes to standby sleep mode to enable measurement modes. In this training module, . | The power consumption of the SAM D21 Xplained Pro board is measured using two tools . | External Power Debugger - A hardware tool | Data Visualizer - A software tool | . | . The steps to connect and measure the power consumption using these tools are provided in the following sections. | Device wake-up time is measured using the Logic Analyzer. The steps to connect and measure the wake-up time are provided in the following sections. | . Power Measurement Mode: By default, the application is running with the device in standby sleep mode; while the device is in standby sleep mode, the user can measures the device’s power consumption in standby sleep mode by following the instructions provided in the following sections. The device wakes up from standby mode and enters active mode when you cover the light sensor (by placing a hand over it, for example) on the I/O1 Xplained Pro Extension kit. Here, the user can observe the transition of device power consumption from standby sleep mode to active mode on the Data Visualizer tool. The application prints the room temperature on a serial terminal, and the device goes back to standby sleep mode. The LED0 on the SAM D21 Xplained Pro Evaluation Kit is toggled every time the serial console displays the temperature. When the user presses the switch button SW0, the application switches from standby sleep mode to idle sleep mode; here, the user can observe the transition of device power consumption from standby sleep mode to active mode and from active mode to idle Sleep mode. At this point, the user can measure the device’s power consumption in idle sleep mode by following the instructions provided in the following sections. The device wakes up from idle mode and enters active mode when you cover the light sensor (by placing a hand over it, for example) on the I/O1 Xplained Pro extension kit. Here, the user can observe the transition of device power consumption from idle sleep mode to active mode on the Data Visualizer tool. The application prints the room temperature on a serial terminal, and the device goes back to standby sleep mode. The LED0 on the SAM D21 Xplained Pro Evaluation Kit is toggled every time the serial console displays the temperature. Wake-up Time Measurement Mode: By default, the application is running with the device in standby sleep mode, and the device wakes up from standby sleep mode when you press a switch on the development board. The application toggles the Wake-up GPIO pin on the device wake-up and then goes to the idle sleep mode. The user can measure the wake-up time by monitoring the switch SW0 pin and Wake-up GPIO pin on the Logic Analyzer tool. In the next switch press, the user can measure the wake-up time from idle sleep mode by monitoring the same switch SW0 pin and Wake-up GPIO pin on the Logic Analyzer tool. The application switches the device sleep mode between standby sleep mode and idle sleep mode whenever the user presses a switch SW0. Therefore, the user can measure the wake-up time from these sleep modes by monitoring the switch SW0 on the Logic Analyzer tool. Also, the device wakes up from standby mode or idle mode when you cover the light sensor by placing your hand, prints the wake-up reason message, and goes back to sleep mode. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#description",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#description"
  },"888": {
    "doc": "Low Power",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | RTC | USART | AC | PM | EIC | EVSYS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#modulestechnology-used"
  },"889": {
    "doc": "Low Power",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#hardware-used"
  },"890": {
    "doc": "Low Power",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | MPLAB XC32 C/C++ Compiler v3.01 | Any Serial Terminal application like Tera Term terminal application. | Data Visualizer | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#softwaretools-used"
  },"891": {
    "doc": "Low Power",
    "title": "Setup:",
    "content": ". | Connect the I/O1 Xplained Pro extension kit to the Extension Header 1 (EXT1) of the SAMD21 Xplained Pro evaluation kit. | Sort Ext1 Pin 3 (Light Sensor Analog output from I/O1 Xplained board) to Ext1 Pin 17 (AC AIN0 pin - PA04) as highlighted in the hardware setup figure. | Connect the wires between power measurement pin header of the target MCU and Atmel power debugger channel A, as highlighted in the hardware setup figure to measure the power values. | Probe PA15 (SW0 pin) and PA27 (wake-up test pin) on Extension Header 3 (EXT3) as highlighted in the Hardware Setup figure to measure wake-up time. | Connect a USB cable to the DEBUG USB port for programming. Note: Make sure to keep the complete hardware setup or the light sensor on the I/O1 Xplained Pro board under proper lighting when testing the application, this will help to wake-up the device when you keep the hand on the light sensor. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#setup",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#setup"
  },"892": {
    "doc": "Low Power",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21J18A” | Ensure “SAM D21 Xplained Pro” is selected as hardware tool to program/debug the application | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#programming-hex-file"
  },"893": {
    "doc": "Low Power",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (samd21_low_power\\firmware\\\\sam_d21_xpro.X) in MPLAB X IDE. | Ensure “SAM D21 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#programmingdebugging-application-project"
  },"894": {
    "doc": "Low Power",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 4800 | Perform reset by pressing the “RESET” switch | Verify the application displayed the Measurement Menu along with application . | Select the Power Measurement Mode by entering option ‘a’. | Cover the light sensor on the IO Xplained Pro board (by placing your hand over it) to print the temperature on the terminal and remove the hand. Repeat this step to print the temperature on the terminal. You should see the temperature values (in °F) getting printed on the terminal when the light sensor is covered, as shown above. | Observe Current Consumption on Data Visualizer Note: The Data Visualizer is a program to process and visualize data. The Data Visualizer can receive data from various sources such as the Embedded Debugger Data Gateway Interface (EDBG DGI) and COM ports. It is possible to track an application in run-time using a terminal graph or oscilloscope. It analyzes the power consumption of an application through correlation of code execution and power consumption when used together with a supported probe or board. Note: Before start measuring the power consumption, power on reset the device and select the Power Measurement Mode by entering option ‘a’ on the Serial terminal. | Open the Data Visualizer application from your PC and select the connected Power Debugger Data Gateway board on the DGI Control Panel, then click on Connect. The Data Visualizer will then start searching for protocols from the Power Debugger board. | Once the Data Visualizer is connected to the Power Debugger, different interfaces will appear. Select the Power interface and click on the Start button to start measuring the power consumption of the device. | Ensure that the hardware setup connected as mentioned in the Setup section. Note: The Power Analysis window will appear on the Data Visualizer tool interface. | The image below shows the device in Standby mode with its measured power consumption. You can observe small peaks that illustrate the 500 milliseconds Real-Time Clock (RTC) timer expiry. Note: The average value is considered when measuring the power consumption of the device because the instant value is not stable. Then, the power consumption of the device in Standby mode is 11.4 µA. | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element) to print the temperature on the terminal and observe the power consumption of the device. Note: The power consumption of the device in Active mode is 11.3 mA and the power consumption of the same device in Standby mode is 10.5 µA. This shows the device in Standby mode will consume less power. The message printed on serial terminal when you have done this step. | Press the SW0 button to switch from Standby mode to Idle mode. The following image shows the transition of the power consumption from Standby Sleep mode to Idle Sleep mode. The power consumption of the device in Standby Sleep mode is in uA and the power consumption of the same device in Idle Sleep mode is ~2.7 mA. This shows the device in Idle Sleep mode will consume little higher power than Standby Sleep mode. The message printed on serial terminal when you have done this step. | Place your hand nearer to the light sensor. Device wakes up, reads and prints temperature value on serial console, and re-enters the Standby mode. The following image shows the transition power consumption values from Idle to Standby mode. The message printed on serial terminal when you have done this step. The following image shows the device in Idle mode with a measured power consumption of 2680 µA. | You can observe that the small peaks coming from RTC timer expiry disappeared because the power consumption in Idle mode is higher than the power required to start AC conversion. Note that the above results highlight the power consumption is lower in Standby mode than in Idle mode. | Wake-up Time Measurement Using Logic Analyzer/ Cathode-Ray Oscilloscope (CRO) To demonstrate the CPU wake up time, switch SW0 is configured to generate an interrupt. A General Purpose Input/Output (GPIO) is toggled in the Interrupt Service Routine (ISR) of the switch press event. The MCU comes out of Sleep mode when an interrupt occurs (in this case, the switch press interrupt). The time between the switch press and the GPIO toggle in the ISR is the wake-up time. Before start measuring the Wake-up Time, power on reset the device and select the Wake-up Time Measurement Mode by entering option ‘b’ on the Serial terminal. | Connect your logic analyzer or your CRO to the board as mentioned in the Setup section. | Now, press the SW0 switch and capture the signals to measure the wake-up time from Standby Sleep to Active. The following image shows the wake-up time for the device Standby Sleep mode to Active Mode: . The message printed on serial terminal when you have done this step. | Press the SW0 switch and capture the signals to measure the wake-up time from Idle Sleep to Active. The following image shows the wake-up time for the device Idle Sleep mode to Active Mode: . The message printed on serial terminal when you have done this step. | When you repeat the switch SW0 pressing, the device sleep state will switch between Standby to Idle and Idle to Standby, the message printed on serial terminal when you have done this step. | By observing the outputs, you can conclude that the wake-up time is greater in Standby mode than in Idle mode. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#running-the-demo"
  },"895": {
    "doc": "Low Power",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Drivers on SAM D21 MCUs Using FreeRTOS | Low Power Application on SAM D21 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#comments",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#comments"
  },"896": {
    "doc": "Low Power",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html#revision",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html#revision"
  },"897": {
    "doc": "Low Power",
    "title": "Low Power",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_low_power/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_low_power/readme.html"
  },"898": {
    "doc": "SD Card USB Data Logger Application",
    "title": "SD Card, USB Data Logger Application on SAM D21 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#sd-card-usb-data-logger-application-on-sam-d21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#sd-card-usb-data-logger-application-on-sam-d21-xplained-pro-evaluation-kit"
  },"899": {
    "doc": "SD Card USB Data Logger Application",
    "title": "  Download  ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html"
  },"900": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Description",
    "content": "This application shows an example of using the MPLAB Harmony v3 File System to store the sensor data (light intensity values) into a SD card using the SDSPI and a SPI driver. The SD card is also enumerated as a MSD(Mass Storage Device) device on the PC(USB Host) enabling logged data viewing. The SDSPI driver uses an instance of the SPI driver to communicate to the SD card over the SPI bus. The application creates a directory named Dir1 in the root directory and creates a new file named LS_LOG.txt. The application writes the light sensor values into this newly created file when the user presses the switch button SW0. If the directory and file already exists the values are logged into the existing file itself. The logged light intensity values are read via USB with the SD card enumerated as an MSD( Mass Storage Device). The application parallelly continues to log the sensor data with the SD card enumerated as an MSD. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#description",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#description"
  },"901": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Timer | DMAC | ADC . | PORTS | EVENT SYSTEM | SERCOM (USART) | SERCOM (SPI) | RTC | . | . | Drivers . | SDSPI Driver . | USB Full Speed Driver | SPI Driver | . | . | Libraries . | USB MSD Library | File System Library | Debug System service Library | STDIO Library | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#modulestechnology-used"
  },"902": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Hardware Used:",
    "content": ". | SAM D21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | Micro-SD card formatted to FAT32 filesystem. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#hardware-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#hardware-used"
  },"903": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_d21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version.Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#softwaretools-used"
  },"904": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Setup:",
    "content": ". | Verify that the Light sensor (in I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM D21 Xplained Pro Evaluation Kit . | Insert microSD(upto 32GB) card on to the I/O1 Xplained Pro Extension Kit . | The SAM D21 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM D21 Xplained Pro Evaluation Kit . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#setup",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#setup"
  },"905": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAMD21J18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#programming-hex-file"
  },"906": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (samd21_sdcard_usb_datalogger/firmware/sam_d21_xpro.X) in MPLAB X IDE | Ensure “SAM D21 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#programmingdebugging-application-project"
  },"907": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Running the Demo:",
    "content": ". | Press the switch button SW0 to log light intensity values from the light sensor into the SD card. | To read the logged light intensity values, connect the Target USB port on the board to the computer using a micro USB cable. | LED0 is illuminated when SD card is enumerated as a Mass Storage Device by the USB host.(see below image) . | Access the LS_LOG.txt via USB inside the Dir1 folder.(see below image) . | The sample log file looks as below. | Always eject the USB drive before removing it. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#running-the-demo",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#running-the-demo"
  },"908": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D21 MCUs | Getting Started with Harmony v3 Drivers on SAM D21 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#comments",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#comments"
  },"909": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested application. | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Released demo application . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#revision",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html#revision"
  },"910": {
    "doc": "SD Card USB Data Logger Application",
    "title": "SD Card USB Data Logger Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html",
    "relUrl": "/apps/sam_d21_xpro/samd21_sdcard_usb_datalogger/readme.html"
  },"911": {
    "doc": "SAM D21 Xplained Pro Evaluation Kit",
    "title": "SAM D21 Xplained Pro Evaluation Kit",
    "content": ". This repository contains the MPLAB® Harmony 3 reference applications developed on SAM D21 Xplained Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | Getting Started with Harmony v3 Drivers on SAM D21 MCU Using FreeRTOS | Click Here | . | 3 | AC Sleepwalking Application built with ARM GCC Toolchain | Click Here | . | 4 | Low Power | Click Here | . | 5 | SD Card USB Data Logger | Click Here | . More Application Demos . For more application demos on SAM D21 Xplained Pro Evaluation Kit and other Development Boards/Kits having the same part number (ATSAMD21J18A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_d21_xpro/readme.html",
    "relUrl": "/apps/sam_d21_xpro/readme.html"
  },"912": {
    "doc": "BLE Fitness Tracker",
    "title": "BLE Fitness Tracker Application on SAM E51 Curiosity Nano Evaluation Kit and Nano Base for Click boards",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#ble-fitness-tracker-application-on-sam-e51-curiosity-nano-evaluation-kit-and-nano-base-for-click-boards",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#ble-fitness-tracker-application-on-sam-e51-curiosity-nano-evaluation-kit-and-nano-base-for-click-boards"
  },"913": {
    "doc": "BLE Fitness Tracker",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html"
  },"914": {
    "doc": "BLE Fitness Tracker",
    "title": "Description:",
    "content": "The application demonstrates a solution based on Microchip products for the health care industry and wearable products. The application displays heart rate readings (in beats per minute - bpm) on a very low power consuming display and posts this Heart Rate data to Microchip Bluetooth Data (MBD) android mobile application via BLE (Bluetooth Low Energy). The Mikro Elektronika Heart Rate 9 click board is used to read the heart pulse. Mikroelektronika Eink E-Paper display 2,9” 296x128 dots display is used for displaying heart rate. The Eink E-Paper display 2,9” 296x128 dots display device contains the eINK click adapter board and the Eink E-Paper display 2,9” 296x128 dots display. BM71 Bluetooth module is used to send the heart rate data over BLE. The Heart Rate 9 click introduces Microchip’s proprietary method of measuring multiple signals in a body using pseudorandom binary sequence generation and phase division multiplexing This algorithm for processing data from the sensor and it can send data for 3 different diodes (green, ir, red) who give out a diagram of the heartbeat and its frequency per minute. The Eink E-Paper display 2,9” 296x128 dots display is a very low power consumption display and it can retain the information, even after disconnecting from the power source. The host MCU SAM E51 is interfaced with the Heart Rate 9 click over the USART interface and eINK click over SPI Interface. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#description"
  },"915": {
    "doc": "BLE Fitness Tracker",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Timer | EIC | SERCOM (SPI) | SERCOM (USART) | . | BM71 Driver | STDIO Library | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#modulestechnology-used"
  },"916": {
    "doc": "BLE Fitness Tracker",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | Heart Rate 9 click | MikroElektronika Eink Click Without Display | MikroElektronika E-Paper display 2,9” 296x128 dots | BM71-XPRO | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#hardware-used"
  },"917": {
    "doc": "BLE Fitness Tracker",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Install Microchip Bluetooth Data Android App in your Android mobile or | Install Microchip Bluetooth Data iOS App in your iOS mobile | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#softwaretools-used"
  },"918": {
    "doc": "BLE Fitness Tracker",
    "title": "Adding private characteristics to BM71:",
    "content": "Hardware Setup . | In BM71-XPRO, Change jumper J2 to select USB | In BM71-XPRO, Configure DIP switch SW2 with the below configurations . | All DIP switch ON | . | Power the BM71-XPRO from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J1) | Perform reset by pressing switch SW1 on BM71-XPRO and check blue LD1 is ON | . Programming private characteristics . | Download the manual configuration tool from BM70/71 Firmware &amp; Software Tools v1.11 | Extract and locate configuration tool from below location - Your_downloaded_folder \\\\Firmware &amp; Software Tools v1.11\\\\ConfigurationTool\\\\IS187x_102_BLEDK3v1.11_UI1.00 | Double click on “IS187x_102_BLEDK3v1.11_UI1.00.exe “ | Click on “Load” button and select “Load Text File” | Select “bm71_heart_rate_service_chars_config.txt” from bm71_configuration folder present in firmware folder | Click on “EDIT” option . | Select “0x01: BM71” in BLEDK and click ok . | Click on “Finish” . | Click on “Write” . | Select respective COM Port and set baud rate to 115200 then click on Write . | Click on Yes to successfully update the private characteristics on to BM71 module . | After successful update, click OK and remove the power from BM71-XPRO and change jumper J2 to select EXT . | Turn OFF DIP 1 switch | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#adding-private-characteristics-to-bm71",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#adding-private-characteristics-to-bm71"
  },"919": {
    "doc": "BLE Fitness Tracker",
    "title": "Setup:",
    "content": ". | Mount SAM E51 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN” (U3) connector of Curiosity Nano Base board | Mount Heart Rate 9 click board on mikro bus 3 connector of Curiosity Nano Base board | Mount the eink_epaper_2_9_296_128 (eINK click + eink_epaper_2_9_296_128 dispaly) on the mikro bus 1 connector of Curiosity Nano Base board | Connect the BM71-XPRO on to EXT 1 connector of Curiosity Nano Base board | Power the SAM E51 Curiosity Nano Evaluation Kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#setup"
  },"920": {
    "doc": "BLE Fitness Tracker",
    "title": "Programming hex file:",
    "content": "The prebuilt hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#programming-hex-file"
  },"921": {
    "doc": "BLE Fitness Tracker",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (ble_fitness_tracker\\firmware\\\\sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#programmingdebugging-application-project"
  },"922": {
    "doc": "BLE Fitness Tracker",
    "title": "Running the Demo:",
    "content": "Before proceeding, install the Microchip Bluetooth Data android app in an Android Smartphone. | Enable Bluetooth and location from Smartphone settings | Perform reset by unplugging and re-plugging the power cable of SAM E51 Curiosity Nano Evaluation Kit | Parallelly, open the “Microchip Bluetooth Data (MBD)” android app from your smartphone and tap on “Bluetooth Smart” icon on the dashboard. If prompted, allow the application to turn on Bluetooth. | After power-up, the application displays the Microchip logo on the Eink E-Paper display 2,9” 296x128 dots display and initializes the heart rate sensor | After successful initialization of the heart rate sensor, two integrated LEDs on the heart rate 9 click lights up . | Now, scan for Bluetooth devices by tapping START SCAN option on the MBD APP. The BM71 device should appear as MCHP_SAM_E51_HR in the list of Bluetooth devices. | Stop the scan and connect the MCHP BLE device by clicking on MCHP_SAM_E51_HR. This will establish a connection between the MBD BLE application and the BM71 BLE device. | Once BLE device is connected, the application shows the different services screen. Scrolll down and tap on the Heart Rate Service, it will redirect to Sensor Location screen. | Keep your finger on Pulse Detection Indicator on the heart rate 9 click sensor as shown in the figure below. | In the bottom right corner of the Sensor Location screen, disable and enable the Notify Button. | LED0 on SAM E51 Curiosity Nano Evaluation Kit will glow on. | Wait till the LED “LED0” on SAM E51 Curiosity Nano Evaluation Kit goes off. Once the LED is off, lift your finger. Note: Make sure smartphone screens are not turned off and don’t switch to any other App(s) on your smartphone. | The heart rate value (in bpm - beats per minute) gets displayed on the Sensor Loaction screen as shown in the figure below. Also, the same heart rate value gets displayed on the Eink E-Paper display 2,9” 296x128 dots display. | . Running the Demo without BLE: . Note: To test the demo without BLE, disconnect the BM71-XPRO from EXT 1 connector of the Curiosity Nano Base board. | Perform reset by unplugging and re-plugging the power cable of SAM E51 Curiosity Nano Evaluation Kit | After power-up, the application displays the Microchip logo on the Eink E-Paper display 2,9” 296x128 dots display and initializes the heart rate sensor | After successful initialization of the heart rate sensor, two integrated LEDs on the heart rate 9 click lights up | Press the switch “SW0” on SAM E51 Curiosity Nano Evaluation Kit, LED “LED0” on SAM E51 Curiosity Nano Evaluation Kit glows on | Place your index finger gently on the heart rate 9 click sensor as shown in the figure below | Wait till the LED “LED0” on SAM E51 Curiosity Nano Evaluation Kit goes off and then lift your finger | The heart rate value (in bpm - beats per minute) gets displayed on the Eink E-Paper display 2,9” 296x128 dots display | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#running-the-demo"
  },"923": {
    "doc": "BLE Fitness Tracker",
    "title": "Comments:",
    "content": ". | Place your index finger gently on the heart rate 9 click sensor, don’t push or put pressure on the sensor (the heart rate values may not be accurate) | Make sure the smartphone screen is not turned off when reading Heart Rate Sensor data using the MBD smartphone APP and also, don’t switch to any other smartphone App(s) | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of the box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to set up and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | Code related for Heart Rate services are added manually. Harmony v3 framework doesn’t generate code about it. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#comments"
  },"924": {
    "doc": "BLE Fitness Tracker",
    "title": "Revision:",
    "content": ". | v1.6.0 - Replaced Eink Bundle with eink_epaper_2_9_296_128 Display, regenerated and tested application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html#revision"
  },"925": {
    "doc": "BLE Fitness Tracker",
    "title": "BLE Fitness Tracker",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/ble_fitness_tracker/readme.html",
    "relUrl": "/apps/sam_e51_cnano/ble_fitness_tracker/readme.html"
  },"926": {
    "doc": "Getting Started",
    "title": "Getting Started Application on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#getting-started-application-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#getting-started-application-on-sam-e51-curiosity-nano-evaluation-kit"
  },"927": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html"
  },"928": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "This application demonstrates an LED (LED0) toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#description"
  },"929": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | RTC | GPIO | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#modulestechnology-used"
  },"930": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#hardware-used"
  },"931": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#softwaretools-used"
  },"932": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#setup"
  },"933": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#programming-hex-file"
  },"934": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same51n_getting_started\\firmware\\\\sam_e51_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#programmingdebugging-application-project"
  },"935": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | An LED (LED0) on the SAM E51 Curiosity Nano Evaluation Kit toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds | And also, the LED toggling rate is displayed on the serial terminal | Press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to change the default periodicity of the timeout to one second | Every subsequent pressing of the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#running-the-demo"
  },"936": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#comments"
  },"937": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html#revision"
  },"938": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_getting_started/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_getting_started/readme.html"
  },"939": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Low Power Application on SAM E51 Curiosity Nano Evaluation Kit with OLED C click board for display using MPLAB Harmony Legato Graphics",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#low-power-application-on-sam-e51-curiosity-nano-evaluation-kit-with-oled-c-click-board-for-display-using-mplab-harmony-legato-graphics",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#low-power-application-on-sam-e51-curiosity-nano-evaluation-kit-with-oled-c-click-board-for-display-using-mplab-harmony-legato-graphics"
  },"940": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html"
  },"941": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Description",
    "content": "In this application demonstration, the SAM E51 MCU is configured to operate in low power standby sleep mode on power-up. The device wakes up from standby mode and enters active mode when the user covers the light sensor (placing a hand over it, for example) on the I/O1 Xplained Pro extension kit. When the light sensor is covered, the device reads the room temperature using temperature sensor on the I/O1 Xplained Pro extension kit and displays it on the OLED C Click display board. The application periodically prints room temperature on a serial terminal while the light sensor is covered. The device goes back to standby mode when the user uncovers the light sensor. The temperature read is displayed on the OLED C Click and also on the serial console. LED0 in the SAM E51 Curiosity Nano Evaluation Kit is toggled every time the temperature is displayed on the OLED C Click. When the user presses the switch button SW0, the application switches Sleep mode from Standby to Idle mode. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#description"
  },"942": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | RTC | USART | DMAC | ADC0 | PM | SUPC | EIC | EVSYS | SPI | SysTick | Timer | Legato graphics | LE External controller | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#modulestechnology-used"
  },"943": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | I/O1 Xplained Pro Extension Kit | OLED C Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#hardware-used"
  },"944": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#softwaretools-used"
  },"945": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Setup:",
    "content": ". | Mount SAM E51 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount OLED C Click board on mikro bus click 1 connector of Curiosity Nano Base board | Connect the I/O1 Xplained Pro extension kit to the Extension Header 1 (EXT1) connector of Curiosity Nano Base board | Connect a USB cable to the DEBUG USB port for programming | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#setup"
  },"946": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#programming-hex-file"
  },"947": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same51n_low_power_with_oled_c_click/firmware/sam_e51_cnano.X) in MPLAB X IDE. | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#programmingdebugging-application-project"
  },"948": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | After power up, the application displays the temperature on OLED C Click board | Verify the application title message with the current temperature value displayed on Serial Console . | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to print the temperature and message on the terminal. You should see the following messages (containing the temperature value in °F) on the terminal every 500 milliseconds for the duration the light sensor is covered . | Press the switch button SW0, the application switches Sleep mode from Standby mode to Idle mode. Cover the light sensor on the I/O Xplained Pro board by placing your hand over it to wakeup and print the temperature and message on the terminal. | . Note: . | When the device reads the room temperature and prints it on the serial terminal, the temperature is also displayed on the OLED C Click board. | This application demo does not provide the power consumption values of SAM E51 MCU in standby or idle sleep mode. Interested users could refer “Low Power Application on SAM E54 (Cortex M4) MCUs Using MPLAB Harmony v3 Peripheral Libraries” for power consumption numbers presented for an MCU (SAM E54) of the same family as SAM E51. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#running-the-demo"
  },"949": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#comments"
  },"950": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html#revision"
  },"951": {
    "doc": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "Low Power Application with OLED C Click on SAM E51 Curiosity Nano Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_low_power_with_oled_c_click/readme.html"
  },"952": {
    "doc": "10DOF Click Example",
    "title": "10DOF Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#10dof-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#10dof-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"953": {
    "doc": "10DOF Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html"
  },"954": {
    "doc": "10DOF Click Example",
    "title": "Description:",
    "content": "This example demonstrates the reading of weather parameters (Temperature and pressure), Motion parameters (Gyroscope, Accelerometer, Quaternion) from 10DOF Click and displays it on a serial terminal when the switch on SAM E51 Curiosity Nano Evaluation Kit is pressed. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#description"
  },"955": {
    "doc": "10DOF Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | SYSTICK | GPIO | SERCOM (I2C) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#modulestechnology-used"
  },"956": {
    "doc": "10DOF Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika 10DOF Click 10dof click is not in production anymore, for any new design/development use the following hardware | MikroElektronika 13DOF Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#hardware-used"
  },"957": {
    "doc": "10DOF Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#softwaretools-used"
  },"958": {
    "doc": "10DOF Click Example",
    "title": "Setup:",
    "content": ". | Mount SAM E51 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount 10DOF Click board on mikroBUS click 1 connector of Curiosity Nano Base board | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#setup"
  },"959": {
    "doc": "10DOF Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#programming-hex-file"
  },"960": {
    "doc": "10DOF Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (10dof/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#programmingdebugging-application-project"
  },"961": {
    "doc": "10DOF Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to print the weather (Temperature and Pressure) and motion parameters (Gyroscope, Accelerometer, Quaternion). | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit prints the latest weather and motion parameters. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#running-the-demo"
  },"962": {
    "doc": "10DOF Click Example",
    "title": "Instructions to add 10dof functionality to your application:",
    "content": "You could use this demonstration as an example to add 10dof functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the 10dof demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder 10dof/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The 10dof click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The 10dof click example source files gets added to your project . | . | The 10dof click example uses the I2C and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the 10dof click board Example: The 10dof click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the 10dof click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The 10dof click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of 10dof click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The 10dof click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file 10dof_example.c. You could use 10dof_example.c as a reference to add 10dof functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#instructions-to-add-10dof-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#instructions-to-add-10dof-functionality-to-your-application"
  },"963": {
    "doc": "10DOF Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#comments"
  },"964": {
    "doc": "10DOF Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Build Tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Created application example | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html#revision"
  },"965": {
    "doc": "10DOF Click Example",
    "title": "10DOF Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/10dof/readme.html"
  },"966": {
    "doc": "13DOF Click Example",
    "title": "13DOF Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#13dof-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#13dof-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"967": {
    "doc": "13DOF Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html"
  },"968": {
    "doc": "13DOF Click Example",
    "title": "Description:",
    "content": "This example demonstrates the reading of weather parameters (Temperature, Pressure , Humidity and Gas Resistance) from BME680 sensor, Motion parameters (Gyroscope, Accelerometer) in X , Y and Z axes from BMI088 sensor,Geomagnetic data in X , Y and Z axes from BMM150 sensor.These three sensors are integrated sensors on 13DOF Click board, these parameters are displayed on a serial terminal when the switch on SAM E51 Curiosity Nano Evaluation Kit is pressed. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#description"
  },"969": {
    "doc": "13DOF Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | SYSTICK | GPIO | SERCOM (I2C) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#modulestechnology-used"
  },"970": {
    "doc": "13DOF Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika 13DOF Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#hardware-used"
  },"971": {
    "doc": "13DOF Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#softwaretools-used"
  },"972": {
    "doc": "13DOF Click Example",
    "title": "Setup:",
    "content": ". | Mount SAM E51 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount 13DOF Click board on mikroBUS click 1 connector of Curiosity Nano Base board | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#setup"
  },"973": {
    "doc": "13DOF Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#programming-hex-file"
  },"974": {
    "doc": "13DOF Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (13dof/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#programmingdebugging-application-project"
  },"975": {
    "doc": "13DOF Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to print the weather (Temperature, Pressure, Gas Resistance and Humidity), motion parameters (Gyroscope, Accelerometer) and geomagnetic data. | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit prints the latest weather, motion and geomagnetic data parameters. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#running-the-demo"
  },"976": {
    "doc": "13DOF Click Example",
    "title": "Instructions to add 13dof functionality to your application:",
    "content": "You could use this demonstration as an example to add 13dof functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the 13dof demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder 13dof/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The 13dof click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The 13dof click example source files gets added to your project . | . | The 13dof click example uses the I2C and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the 13dof click board Example: The 13dof click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the 13dof click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The 13dof click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of 13dof click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The 13dof click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file 13dof_example.c. You could use 13dof_example.c as a reference to add 13dof functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#instructions-to-add-13dof-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#instructions-to-add-13dof-functionality-to-your-application"
  },"977": {
    "doc": "13DOF Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#comments"
  },"978": {
    "doc": "13DOF Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html#revision"
  },"979": {
    "doc": "13DOF Click Example",
    "title": "13DOF Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/13dof/readme.html"
  },"980": {
    "doc": "BLE 2 Click Example",
    "title": "BLE 2 Click board example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#ble-2-click-board-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#ble-2-click-board-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"981": {
    "doc": "BLE 2 Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html"
  },"982": {
    "doc": "BLE 2 Click Example",
    "title": "Description:",
    "content": "This example demonstrates the BLE capability of BLE 2 Click board on SAM E51 Curiosity Nano Evaluation Kit. This application connects to the MBD (Microchip Bluetooth Data) android application running on an Android Smartphone over Bluetooth low energy using the BLE 2 click board and sends a battery charge indicator (in percentage) message through a custom profile. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#description"
  },"983": {
    "doc": "BLE 2 Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | GPIO | SERCOM (USART) | EIC | SYSTICK | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#modulestechnology-used"
  },"984": {
    "doc": "BLE 2 Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika BLE 2 CLICK | MBD Android app | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#hardware-used"
  },"985": {
    "doc": "BLE 2 Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#softwaretools-used"
  },"986": {
    "doc": "BLE 2 Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Mount the BLE2 click board on mikroBUS connector 1 of Curiosity Nano Base . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#setup"
  },"987": {
    "doc": "BLE 2 Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#programming-hex-file"
  },"988": {
    "doc": "BLE 2 Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (ble2/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#programmingdebugging-application-project"
  },"989": {
    "doc": "BLE 2 Click Example",
    "title": "Running the Demo:",
    "content": "Before proceeding, install the Microchip Bluetooth Data android app in an Android Smartphone. | Enable Bluetooth and location from Smartphone settings | Perform reset by unplugging and re-plugging the power cable of SAM E51 Curiosity Nano | Open the “Microchip Bluetooth Data (MBD)” android app from your smartphone and tap on “BLE Connect” icon on the dashboard. If prompted, allow the application to turn on Bluetooth. | Now, scan for Bluetooth devices by tapping “START SCAN” options on the MBD APP. | The BLE 2 device should appear as BLE2CLICK in the list of Bluetooth devices. | Tap on the “BLE2CLICK” device to connect to the device. | Once the device is connected, under “Service List” select battery service . | A battery service screen appears and you can observe the battery percentage getting updated | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#running-the-demo"
  },"990": {
    "doc": "BLE 2 Click Example",
    "title": "Instructions to add ble2 functionality to your application:",
    "content": "You could use this demonstration as an example to add ble functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the ble2 demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder ble2/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The ble2 click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The ble2 click example source files gets added to your project . | . | The ble2 click example uses the USART and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure USART: - Add the SERCOM(USART) peripheral block to the MCC project graph . | Configure USART Pins using MCC Pin configuration Window The USART configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the ble2 click board Example: The ble2 click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the ble2 click board. The USART lines from MCU coming to this socket are from the SERCOM4 peripheral on the MCU. MCC Project Graph - USART configuration | . MCC Pin Configurator - USART pin configuration . | BLE 2 click board need 3 additional GPIO pins | . MCC Pin Configurator - BLE Connect, BLE Wake up and BLE CMD/MLDP pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The ble2 click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of ble2 click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The ble2 click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file ble2_example.c. You could use ble2_example.c as a reference to add ble2 functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#instructions-to-add-ble2-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#instructions-to-add-ble2-functionality-to-your-application"
  },"991": {
    "doc": "BLE 2 Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#comments"
  },"992": {
    "doc": "BLE 2 Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application | v1.5.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html#revision"
  },"993": {
    "doc": "BLE 2 Click Example",
    "title": "BLE 2 Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ble2/readme.html"
  },"994": {
    "doc": "EEPROM 4 Click Example",
    "title": "EEPROM 4 Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#eeprom-4-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#eeprom-4-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"995": {
    "doc": "EEPROM 4 Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html"
  },"996": {
    "doc": "EEPROM 4 Click Example",
    "title": "Description:",
    "content": "This example demonstrates writing and reading known data to EEPROM 4 memory location when the switch is pressed on SAM E51 Curiosity Nano Evaluation Kit. The data read is matched with written data and printed on a serial terminal when the EEPROM test is successful. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#description"
  },"997": {
    "doc": "EEPROM 4 Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | GPIO | SERCOM (SPI) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#modulestechnology-used"
  },"998": {
    "doc": "EEPROM 4 Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika EEPROM 4 Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#hardware-used"
  },"999": {
    "doc": "EEPROM 4 Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#softwaretools-used"
  },"1000": {
    "doc": "EEPROM 4 Click Example",
    "title": "Setup:",
    "content": ". | Mount SAM E51 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount EEPROM 4 Click board on mikroBUS click 1 connector of Curiosity Nano Base board | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#setup"
  },"1001": {
    "doc": "EEPROM 4 Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#programming-hex-file"
  },"1002": {
    "doc": "EEPROM 4 Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (eeprom4/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#programmingdebugging-application-project"
  },"1003": {
    "doc": "EEPROM 4 Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to test the EEPROM 4 by writing and reading know data . | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit tests the EEPROM 4. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#running-the-demo"
  },"1004": {
    "doc": "EEPROM 4 Click Example",
    "title": "Instructions to add eeprom4 functionality to your application:",
    "content": "You could use this demonstration as an example to add eeprom4 functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the eeprom4 demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder eeprom4/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The eeprom4 click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The eeprom4 click example source files gets added to your project . | . | The eeprom4 click example uses the SPI peripheral. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure SPI: - Add the SPI peripheral block to the MCC project graph . | Configure SPI Pins using MCC Pin configuration Window The SPI configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the eeprom4 click board Example: The eeprom4 click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the eeprom4 click board. The SPI lines from MCU coming to this socket are from the SERCOM1 peripheral on the MCU. MCC Project Graph - SPI configuration | . MCC Pin Configurator - SPI Chip select pin configuration . MCC Pin Configurator - EEPROM write protect and Hold pin configuration . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The eeprom4 click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file eeprom4_example.c. You could use eeprom4_example.c as a reference to add eeprom4 functionality in your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#instructions-to-add-eeprom4-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#instructions-to-add-eeprom4-functionality-to-your-application"
  },"1005": {
    "doc": "EEPROM 4 Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#comments"
  },"1006": {
    "doc": "EEPROM 4 Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Created application example | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html#revision"
  },"1007": {
    "doc": "EEPROM 4 Click Example",
    "title": "EEPROM 4 Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eeprom4/readme.html"
  },"1008": {
    "doc": "Eink Click display bundle Example",
    "title": "Eink Click display bundle example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#eink-click-display-bundle-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#eink-click-display-bundle-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1009": {
    "doc": "Eink Click display bundle Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html"
  },"1010": {
    "doc": "Eink Click display bundle Example",
    "title": "Description:",
    "content": "This example demonstrates the display capability of Eink click bundle board on SAM E51 Curiosity Nano Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#description"
  },"1011": {
    "doc": "Eink Click display bundle Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SYSTICK | GPIO | SERCOM (SPI) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#modulestechnology-used"
  },"1012": {
    "doc": "Eink Click display bundle Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika Eink Click Bundle Eink Click Bundle is not in production anymore, for any new design/development use the following hardware | MikroElektronika Eink Click Without Display | MikroElektronika E-Paper display 2,9” 296x128 dots ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#hardware-used"
  },"1013": {
    "doc": "Eink Click display bundle Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#softwaretools-used"
  },"1014": {
    "doc": "Eink Click display bundle Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#setup"
  },"1015": {
    "doc": "Eink Click display bundle Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#programming-hex-file"
  },"1016": {
    "doc": "Eink Click display bundle Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (eink_bundle/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#programmingdebugging-application-project"
  },"1017": {
    "doc": "Eink Click display bundle Example",
    "title": "Running the Demo:",
    "content": ". | After power up, when the demo is running, The Eink display shows as below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#running-the-demo"
  },"1018": {
    "doc": "Eink Click display bundle Example",
    "title": "Instructions to add Eink display functionality to your application:",
    "content": "You could use this demonstration as an example to add Eink display functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the Eink Click display demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder eink_bundle/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The Eink display click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The Eink display click example source files gets added to your project . | . | The Eink display click example uses the SPI, Timer peripherals and PORT pins . The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure SPI: - Add the SPI peripheral block to the MCC project graph . | Configure SPI Pins using MCC Pin configuration Window The SPI configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the Eink click bundle board Example: The Eink display click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the Eink Click Bundle board. The SPI lines from MCU coming to this socket are from the SERCOM1 peripheral on the MCU. MCC Project Graph - SPI configuration | . MCC Pin Configurator - SPI pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The Eink display click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of Eink display click routines. MCC Project Graph - SysTick configuration | . | Configure PORT Pins: . | The Eink click bundle needs three additional pins for configuration and data exchange. These parent . | Data/Config pin | Busy indicator pin | Reset pin | . | Configure PORT pins needed by Eink click bundle in the MCC Pin Configurator The PORT pin configuration depends on . | 32-bit MCU | 32-bit MCU development board | The socket on which you have mounted the Eink bundle click board Example: The PORT pin configuration for the Eink display click example on SAM E51 Curiosity Nano Evaluation Kit is below. MCC Pin Configurator - PORT pin configuration | . | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The Eink display click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file eink_bundle_example.c. You could use eink_bundle_example.c as a reference to add Eink display functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#instructions-to-add-eink-display-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#instructions-to-add-eink-display-functionality-to-your-application"
  },"1019": {
    "doc": "Eink Click display bundle Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#comments"
  },"1020": {
    "doc": "Eink Click display bundle Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Build Tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html#revision"
  },"1021": {
    "doc": "Eink Click display bundle Example",
    "title": "Eink Click display bundle Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_bundle/readme.html"
  },"1022": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Eink E-Paper display 2,9” 296x128 dots display example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#eink-e-paper-display-29-296x128-dots-display-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#eink-e-paper-display-29-296x128-dots-display-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1023": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html"
  },"1024": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Description:",
    "content": "This example demonstrates the display capability of Eink E-Paper display 2,9” 296x128 dots display board on SAM E51 Curiosity Nano Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#description"
  },"1025": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SYSTICK | GPIO | SERCOM (SPI) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#modulestechnology-used"
  },"1026": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika Eink Click Without Display | MikroElektronika E-Paper display 2,9” 296x128 dots ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#hardware-used"
  },"1027": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#softwaretools-used"
  },"1028": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#setup"
  },"1029": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#programming-hex-file"
  },"1030": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (eink_epaper_2_9_296_128/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#programmingdebugging-application-project"
  },"1031": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Running the Demo:",
    "content": ". | After power up, when the demo is running, The Eink E-Paper display 2,9” 296x128 dots display shows as below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#running-the-demo"
  },"1032": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Instructions to add Eink E-Paper display 2,9” 296x128 dots display functionality to your application:",
    "content": "You could use this demonstration as an example to add Eink E-Paper display 2,9” 296x128 dots display functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the Eink E-Paper display 2,9” 296x128 dots display demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder eink_epaper_2_9_296_128/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The eink_epaper_2_9_296_128 display example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The eink_epaper_2_9_296_128 display example source files gets added to your project . | . | The eink_epaper_2_9_296_128 display example uses the SPI, Timer peripherals and PORT pins . The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure SPI: - Add the SPI peripheral block to the MCC project graph . | Configure SPI Pins using MCC Pin configuration Window The SPI configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the Eink E-Paper display 2,9” 296x128 dots click board Example: The Eink E-Paper display 2,9” 296x128 dots example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the Eink Click board. The SPI lines from MCU coming to this socket are from the SERCOM1 peripheral on the MCU. MCC Project Graph - SPI configuration | . MCC Pin Configurator - SPI pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The Eink E-Paper display 2,9” 296x128 dots display example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of Eink E-Paper display 2,9” 296x128 dots click routines. MCC Project Graph - SysTick configuration | . | Configure PORT Pins: . | The Eink E-Paper display 2,9” 296x128 dots needs three additional pins for configuration and data exchange. These parent . | Data/Config pin | Busy indicator pin | Reset pin | . | Configure PORT pins needed by Eink E-Paper display 2,9” 296x128 dots in the MCC Pin Configurator The PORT pin configuration depends on . | 32-bit MCU | 32-bit MCU development board | The socket on which you have mounted the Eink click board Example: The PORT pin configuration for the Eink E-Paper display 2,9” 296x128 dots example on SAM E51 Curiosity Nano Evaluation Kit is below. MCC Pin Configurator - PORT pin configuration | . | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The Eink E-Paper display 2,9” 296x128 dots display routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file eink_epaper_2_9_296_128_example.c. You could use eink_epaper_2_9_296_128_example.c as a reference to add Eink E-Paper display 2,9” 296x128 dots display functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#instructions-to-add-eink-e-paper-display-29-296x128-dots-display-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#instructions-to-add-eink-e-paper-display-29-296x128-dots-display-functionality-to-your-application"
  },"1033": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#comments"
  },"1034": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html#revision"
  },"1035": {
    "doc": "eink_epaper_2_9_296_128 display  Example",
    "title": "eink_epaper_2_9_296_128 display  Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/eink_epaper_2_9_296_128/readme.html"
  },"1036": {
    "doc": "Fan Click Example",
    "title": "Fan Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#fan-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#fan-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1037": {
    "doc": "Fan Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html"
  },"1038": {
    "doc": "Fan Click Example",
    "title": "Description:",
    "content": "This example application demonstrates DC fan control (on, off and speed control) on SAM E51 Curiosity Nano Evaluation Kit using Fan Click board . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#description"
  },"1039": {
    "doc": "Fan Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SYSTICK | GPIO | SERCOM (I2C) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#modulestechnology-used"
  },"1040": {
    "doc": "Fan Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika Fan Click | 5V DC Fan | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#hardware-used"
  },"1041": {
    "doc": "Fan Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#softwaretools-used"
  },"1042": {
    "doc": "Fan Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#setup"
  },"1043": {
    "doc": "Fan Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#programming-hex-file"
  },"1044": {
    "doc": "Fan Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (apps/sam_e51_cnano/same51n_mikroe_click/fan/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#programmingdebugging-application-project"
  },"1045": {
    "doc": "Fan Click Example",
    "title": "Running the Demo:",
    "content": ". | After power up, by default when the application runs, the fan is switched off. | When the user presses the switch on the board, the fan is turned on at default speed. | When the user presses the switch on the board for second time, the fan is run at low speed. | When the user presses the switch on the board for third time, the fan is run at medium speed. | When the user presses the switch on the board for fourth time, the fan is turned off. | . | The above steps are repeated for subsequent switch press events | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#running-the-demo"
  },"1046": {
    "doc": "Fan Click Example",
    "title": "Instructions to add Fan functionality to your application:",
    "content": "You could use this demonstration as an example to add motion sensor functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the Fan example demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder fan/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The Fan click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The Fan click example source files gets added to your project . | . | The Fan click example uses the I2C and Timer peripherals . The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the Fan click board Example: The Fan click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the Fan Click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The Fan click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of Fan click example. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines and example to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The Fan click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file fan_example.c. You could use fan_example.c as a reference to add fan functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#instructions-to-add-fan-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#instructions-to-add-fan-functionality-to-your-application"
  },"1047": {
    "doc": "Fan Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#comments"
  },"1048": {
    "doc": "Fan Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html#revision"
  },"1049": {
    "doc": "Fan Click Example",
    "title": "Fan Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/fan/readme.html"
  },"1050": {
    "doc": "GRID EYE Click Example",
    "title": "GRID EYE Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#grid-eye-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#grid-eye-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1051": {
    "doc": "GRID EYE Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html"
  },"1052": {
    "doc": "GRID EYE Click Example",
    "title": "Description:",
    "content": "The application senses the absolute surface temperature without any contact or can be used to detect the movement of people and objects, renders it in real-time, and prints the decoded colors on a serial terminal on PC in an 8x8 heat map matrix. The sensor detecting distance is 5m, and the viewing angle is 60 degrees. The application has two major tasks: acquiring and processing the data from the Grid-EYE click and printing the frame of colors based on the temperature values measured at the previous task. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#description"
  },"1053": {
    "doc": "GRID EYE Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SYSTICK | GPIO | SERCOM (USART) | SERCOM (I2C) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#modulestechnology-used"
  },"1054": {
    "doc": "GRID EYE Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika GRID-EYE Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#hardware-used"
  },"1055": {
    "doc": "GRID EYE Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#softwaretools-used"
  },"1056": {
    "doc": "GRID EYE Click Example",
    "title": "Setup:",
    "content": ". | Mount GRID-EYE Click to mikroBUS connector 1 of the Curiosity Nano Base for Click Board. | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#setup"
  },"1057": {
    "doc": "GRID EYE Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#programming-hex-file"
  },"1058": {
    "doc": "GRID EYE Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sam_e51_cnano/same51n_mikroe_click/grid_eye/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#programmingdebugging-application-project"
  },"1059": {
    "doc": "GRID EYE Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | The application starts printing the GRID-EYE values on the terminal for every 500 milliseconds. The code converts the grid array sensor data to temperature in Celsius(°C) and fills the 8x8 grid array matrix by the appropriate color, depending on the temperature detected. | The GRID-EYE values changes when an object or a hand is moved over the sensor or when touching the fingure on the sensor. The following table shows the Color representation based on the temperature(T) range. | See the following image for the output. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#running-the-demo"
  },"1060": {
    "doc": "GRID EYE Click Example",
    "title": "Instructions to add GRID EYE functionality to your application:",
    "content": "You could use this demonstration as an example to add GRID EYE functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the GRID EYE demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder grid_eye/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The GRID EYE click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The GRID EYE click example source files gets added to your project . | . | The GRID EYE click example uses the I2C and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the GRID EYE click board Example: The GRID EYE click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the GRID EYE click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The GRID EYE click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of GRID EYE click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The GRID EYE click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file grid_eye_example.c. You could use grid_eye_example.c as a reference to add GRID EYE functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#instructions-to-add-grid-eye-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#instructions-to-add-grid-eye-functionality-to-your-application"
  },"1061": {
    "doc": "GRID EYE Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#comments"
  },"1062": {
    "doc": "GRID EYE Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html#revision"
  },"1063": {
    "doc": "GRID EYE Click Example",
    "title": "GRID EYE Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/grid_eye/readme.html"
  },"1064": {
    "doc": "GSM GPS Click Example",
    "title": "GSM GPS Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#gsm-gps-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#gsm-gps-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1065": {
    "doc": "GSM GPS Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html"
  },"1066": {
    "doc": "GSM GPS Click Example",
    "title": "Description:",
    "content": "The application demonstrates sending out a location-tagged SMS on SAM E51 Curiosity Nano Evaluation Kit using GSM GPS Click board. ## Modules/Technology Used: . | Peripheral Modules . | EIC | SYSTICK | GPIO | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#description"
  },"1067": {
    "doc": "GSM GPS Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika GSM GPS Click | GSM Antenna | Active GPS Antenna | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#hardware-used"
  },"1068": {
    "doc": "GSM GPS Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#softwaretools-used"
  },"1069": {
    "doc": "GSM GPS Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#setup"
  },"1070": {
    "doc": "GSM GPS Click Example",
    "title": "Programming hex file:",
    "content": "Note: The prebuilt hex file is configured to send SMS to a mobile phone number mentioned in gsm_gps_example.h (Macro - GSM_GPS_EXAMPLE_USER_MOBILE_NUMBER) . The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#programming-hex-file"
  },"1071": {
    "doc": "GSM GPS Click Example",
    "title": "Configure Mobile Phone Number:",
    "content": ". | Open the project (gsm_gps/firmware/sam_e51_cnano.X) in MPLAB X IDE | Open header file gsm_gps_example.h . | Define the macro to your mobile phone number preceded by country code. For example, Below is the macro definition to configure an Indian mobile phone number “1234567890” . Note: “+91” is the country code for India in the above screenshot and “1234567890” is a dummy phone number. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#configure-mobile-phone-number",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#configure-mobile-phone-number"
  },"1072": {
    "doc": "GSM GPS Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Ensure the project (gsm_gps/firmware/sam_e51_cnano.X) is open in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#programmingdebugging-application-project"
  },"1073": {
    "doc": "GSM GPS Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Follow instructions on the screen to send SMS to the configured mobile phone . | . Note: The message “Location information not found yet! Try Again” appears when the GPS receiver hasn’t yet acquired and tracked satellites to provide position information. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#running-the-demo"
  },"1074": {
    "doc": "GSM GPS Click Example",
    "title": "Instructions to add GSM GPS functionality to your application:",
    "content": "You could use this demonstration as an example to add GSM GPS functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the GSM GPS demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder gsm_gps/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The GSM GPS click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The GSM GPS click example source files gets added to your project . | . | The GSM GPS click example uses the USART and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure USART: - Add the USART peripheral block to the MCC project graph . | Configure USART Pins using MCC Pin configuration Window The USART configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the Heart Rate 9 click board Example: The GSM GPS click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the GSM GPS click board. The USART lines from MCU coming to this socket are from the SERCOM4 peripheral on the MCU. MCC Project Graph - USART configuration | . MCC Pin Configurator - USART pin configuration . | Configure GSM GPS Click Reset Pin: - Configure GSM GPS Click Reset Pin using MCC Pin configuration Window The Power Pin configuration depends on - The socket on which you have mounted the GSM GPS click board Example: The GSM GPS click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the GSM GPS click board. The Power Pin line from the GSM GPS Click coming to this socket is PA07 on the MCU. MCC Pin Configurator - Power pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The GSM GPS click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of GSM GPS click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The GSM GPS click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file gsm_gps_example.c. You could use gsm_gps_example.c as a reference to add GSM GPS functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#instructions-to-add-gsm-gps-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#instructions-to-add-gsm-gps-functionality-to-your-application"
  },"1075": {
    "doc": "GSM GPS Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#comments"
  },"1076": {
    "doc": "GSM GPS Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 - Created application example | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html#revision"
  },"1077": {
    "doc": "GSM GPS Click Example",
    "title": "GSM GPS Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/gsm_gps/readme.html"
  },"1078": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Heart Rate 9 Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#heart-rate-9-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#heart-rate-9-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1079": {
    "doc": "Heart Rate 9 Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html"
  },"1080": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Description:",
    "content": "This example demonstrates the reading of Heart Rate and displays it on a serial terminal on SAM E51 Curiosity Nano Evaluation Kit using Heart Rate 9 Click board. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#description"
  },"1081": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | SYSTICK | GPIO | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#modulestechnology-used"
  },"1082": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika Heart Rate 9 Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#hardware-used"
  },"1083": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#softwaretools-used"
  },"1084": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#setup"
  },"1085": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#programming-hex-file"
  },"1086": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sam_e51_cnano/same51n_mikroe_click/heartrate9/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#programmingdebugging-application-project"
  },"1087": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Keep your finger on Pulse Detection Indicator as shown here. Note: Cover the Heart Rate Sensor by placing your finger on Pulse Detection Indicator as shown below . | Now, press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to print the Heart Rate. | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit prints the Heart Rate. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#running-the-demo"
  },"1088": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Instructions to add Heart Rate functionality to your application:",
    "content": "You could use this demonstration as an example to add Heart Rate functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the Heart Rate 9 demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder heartrate9/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The Heart Rate 9 click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The Heart Rate 9 click example source files gets added to your project . | . | The Heart Rate 9 click example uses the USART and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure USART: - Add the USART peripheral block to the MCC project graph . | Configure USART Pins using MCC Pin configuration Window The USART configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the Heart Rate 9 click board Example: The Heart Rate 9 click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the Heart Rate 9 click board. The USART lines from MCU coming to this socket are from the SERCOM4 peripheral on the MCU. MCC Project Graph - USART configuration | . MCC Pin Configurator - USART pin configuration . | Configure Heart Rate 9 Click Reset Pin: - Configure Heart Rate 9 Click Reset Pin using MCC Pin configuration Window The Reset Pin configuration depends on - The socket on which you have mounted the Heart Rate 9 click board Example: The Heart Rate 9 click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the Heart Rate 9 click board. The Reset Pin line from the Heart Rate 9 Click coming to this socket is PA07 on the MCU. MCC Pin Configurator - Reset pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The Heart Rate 9 click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of Heart Rate 9 click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The Heart Rate 9 click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . Note: Define the value of CLICK_HEARTRATE9_USART_READ_BUFFER_SIZE same as USART_READ_BUFFER_SIZE defined in the respective USART PLIB ‘.c’ file . | . | The click_routines folder contain an example C source file heartrate9_example.c. You could use heartrate9_example.c as a reference to add Heart Rate 9 functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#instructions-to-add-heart-rate-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#instructions-to-add-heart-rate-functionality-to-your-application"
  },"1089": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#comments"
  },"1090": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html#revision"
  },"1091": {
    "doc": "Heart Rate 9 Click Example",
    "title": "Heart Rate 9 Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/heartrate9/readme.html"
  },"1092": {
    "doc": "IR Thermo 2 Click Example",
    "title": "IR Thermo 2 Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#ir-thermo-2-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#ir-thermo-2-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1093": {
    "doc": "IR Thermo 2 Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html"
  },"1094": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Description:",
    "content": "This example demonstrates contactless reading of object temperature and displays it on a serial terminal on SAM E51 Curiosity Nano Evaluation Kit using IR Thermo 2 click board. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#description"
  },"1095": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | GPIO | SERCOM (I2C) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#modulestechnology-used"
  },"1096": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika IR Thermo 2 Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#hardware-used"
  },"1097": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#softwaretools-used"
  },"1098": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#setup"
  },"1099": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#programming-hex-file"
  },"1100": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sam_e51_cnano/same51n_mikroe_click/ir_thermo2/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#programmingdebugging-application-project"
  },"1101": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | To measure the object temperature, keep a hot object / cold object facing the Infrared Thermopile Sensor on IR Thermo 2 click with a 8 : 1 distance ratio. For example, if you need to measure the object surface temperature of a 4-inch area with the IR thermo 2 click that has a Distance/Surface ratio of 8:1, the maximum distance from where you can accurately measure the temperature will be 32 inches (8:1 x 4) | Now, press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to print the object temperature. Note: Here, the above object temperature values measured by keeping Cold and Hot water on top of the IR Thermo 2 Click of a 1 inch object surface. | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit prints the object temperature. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#running-the-demo"
  },"1102": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Instructions to add contactless object temperature functionality to your application:",
    "content": "You could use this demonstration as an example to add IR Thermo 2 functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the IR Thermo 2 demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder ir_thermo2/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The IR Thermo 2 click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The IR Thermo 2 click example source files gets added to your project . | . | The IR Thermo 2 click example uses the I2C peripheral. The configuration of this peripheral for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the IR Thermo 2 click board Example: The IR Thermo 2 click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the IR Thermo 2 click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The IR Thermo 2 click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file ir_thermo2_example.c. You could use ir_thermo2_example.c as a reference to add contactless object temperature functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#instructions-to-add-contactless-object-temperature-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#instructions-to-add-contactless-object-temperature-functionality-to-your-application"
  },"1103": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#comments"
  },"1104": {
    "doc": "IR Thermo 2 Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html#revision"
  },"1105": {
    "doc": "IR Thermo 2 Click Example",
    "title": "IR Thermo 2 Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/ir_thermo2/readme.html"
  },"1106": {
    "doc": "LED DRIVER3 Click Example",
    "title": "LED DRIVER 3 Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#led-driver-3-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#led-driver-3-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1107": {
    "doc": "LED DRIVER3 Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html"
  },"1108": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Description:",
    "content": "This example demonstrates RGB color (Red/Green/Blue) one by one with a 500ms delay on the LED Driver 3 click board when the switch is pressed on the SAM E51 Curiosity Nano Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#description"
  },"1109": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | SYSTICK | GPIO | SERCOM (I2C) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#modulestechnology-used"
  },"1110": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika LED Driver 3 Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#hardware-used"
  },"1111": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#softwaretools-used"
  },"1112": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Setup:",
    "content": ". | Mount SAM E51 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount LED Driver 3 Click board on mikroBUS click 1 connector of Curiosity Nano Base board | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#setup"
  },"1113": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#programming-hex-file"
  },"1114": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (leddriver3/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “PKOB nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#programmingdebugging-application-project"
  },"1115": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to display the RGB color (Red/Green/Blue) one by one with 500ms delay on LED Driver 3 click board | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit displays RGB. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#running-the-demo"
  },"1116": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Instructions to add led driver3 functionality to your application:",
    "content": "You could use this demonstration as an example to add led driver3 functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the led driver3 demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder leddriver3/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The led driver3 click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The led driver3 click example source files gets added to your project . | . | The led driver3 click example uses the I2C and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the led driver3 click board Example: The led driver3 click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the led driver3 click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The led driver3 click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of led driver3 click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The led driver3 click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file leddriver3_example.c. You could use leddriver3_example.c as a reference to add led driver3 functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#instructions-to-add-led-driver3-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#instructions-to-add-led-driver3-functionality-to-your-application"
  },"1117": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#comments"
  },"1118": {
    "doc": "LED DRIVER3 Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application. | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Created application example | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html#revision"
  },"1119": {
    "doc": "LED DRIVER3 Click Example",
    "title": "LED DRIVER3 Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/leddriver3/readme.html"
  },"1120": {
    "doc": "LR Click Example",
    "title": "LR Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#lr-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#lr-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1121": {
    "doc": "LR Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html"
  },"1122": {
    "doc": "LR Click Example",
    "title": "Description:",
    "content": "This example demonstrates the communication with LR (Lora) click. The application is designed to communicate with LR click by sending and receiving messages. The application reads the parameters firmware version, radio mode, and radio frequency from the LR click and displays it on a serial terminal of SAM E51 Curiosity Nano Evaluation Kit. The RN2483 module’s architecture has three types of commands that can be used, and each allows access to different module functions: . | LoRaWAN Class A and Class C configuration and control, using the mac group of commands | Low-level radio configuration and control, using the radio group of commands | Other module functions, using the sys group of commands | . In order to communicate with a LoRa network, a specific number of parameters need to be configured. Since two distinctive methods are offered for a device to become part of the network, each of these requires different parameters: . 1. Over-the-Air Activation (OTAA) . where a device negotiates network encryption keys at the time it joins the network. For this, the device EUI (devEUI), application EUI (appEUI) and application key (appKey) need to be configured and then the OTAA procedure can start. All these keys will be provided by Lora gateway network providers, these keys can be loaded into RN2483 device using below commands . | mac set deveui (devEUI) | mac set appeui (appEUI) | mac set appkey (appKey) Once keys are loaded into RN2483, LR click can join the network using below command | mac join otaa Once the connection is succesful, data can be transmitted using below command | mac tx (type) (portno) (data) | . 2. Activation by Personalization (ABP) . where the device already contains the network keys and can directly start communication with the network. Configuring the device address (address), network session key (nwkSessKey) and application session key (appSesskey) is sufficient for this type of initialization.All these keys will be provided by Lora gateway network providers, these keys can be loaded into RN2483 device using below commands . | mac set devaddr (address) | mac set nwkskey (nwkSessKey) | mac set appskey (appSesskey) Once keys are loaded into RN2483, LR click can join the network using below command | mac join abp Once the connection is succesful, data can be transmitted using below command | mac tx (type) (portno) (data) | . Refer RN2483 LoRa Technology Module Command Reference User’s Guide for full command list and details. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#description"
  },"1123": {
    "doc": "LR Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | SYSTICK | GPIO | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#modulestechnology-used"
  },"1124": {
    "doc": "LR Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika LR Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#hardware-used"
  },"1125": {
    "doc": "LR Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#softwaretools-used"
  },"1126": {
    "doc": "LR Click Example",
    "title": "Setup:",
    "content": ". | Mount the LR click board on mikroBUS connector 1 of Curiosity Nano Base | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#setup"
  },"1127": {
    "doc": "LR Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#programming-hex-file"
  },"1128": {
    "doc": "LR Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sam_e51_cnano/same51n_mikroe_click/lr/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#programmingdebugging-application-project"
  },"1129": {
    "doc": "LR Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit prints the parameters of LR click. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#running-the-demo"
  },"1130": {
    "doc": "LR Click Example",
    "title": "Instructions to add LR functionality to your application:",
    "content": "You could use this demonstration as an example to add LR functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the LR demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder lr/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The LR click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The LR click example source files gets added to your project . | . | The LR click example uses the USART and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure USART: - Add the USART peripheral block to the MCC project graph . | Configure USART Pins using MCC Pin configuration Window The USART configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the LR click board Example: The LR click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the LR click board. The USART lines from MCU coming to this socket are from the SERCOM4 peripheral on the MCU. MCC Project Graph - USART configuration | . MCC Pin Configurator - USART pin configuration . | Configure LR Click Reset Pin: - Configure LR Click Reset Pin using MCC Pin configuration Window The Reset Pin configuration depends on - The socket on which you have mounted the LR click board Example: The LR click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the LR click board. The Reset Pin line from the LR Click coming to this socket is PA07 on the MCU. MCC Pin Configurator - Reset pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The LR click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of LR click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The LR click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file lr_example.c. You could use lr_example.c as a reference to add LR functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#instructions-to-add-lr-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#instructions-to-add-lr-functionality-to-your-application"
  },"1131": {
    "doc": "LR Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#comments"
  },"1132": {
    "doc": "LR Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html#revision"
  },"1133": {
    "doc": "LR Click Example",
    "title": "LR Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/lr/readme.html"
  },"1134": {
    "doc": "MCP25625 Click Example",
    "title": "MCP25625 Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#mcp25625-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#mcp25625-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1135": {
    "doc": "MCP25625 Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html"
  },"1136": {
    "doc": "MCP25625 Click Example",
    "title": "Description:",
    "content": "This example demonstrates the transmitting and receiving of CAN data using the MCP25625 CAN click board and displays the transmit/receive CAN message on a serial terminal on SAM E51 Curiosity Nano Evaluation Kit using the MCP25625 Click board. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#description"
  },"1137": {
    "doc": "MCP25625 Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORT | SERCOM (SPI) | SYSTICK | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#modulestechnology-used"
  },"1138": {
    "doc": "MCP25625 Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit - 2 Units | Curiosity Nano Base for Click Boards - 2 Units | MikroElektronika MCP25625 Click - 2 Units Note: One of the two hardware setups is required for the CAN message transmission (Setup-1) and the other for reception(Setup-2). Parallelly both the setups demonstrate CAN data transmission and reception. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#hardware-used"
  },"1139": {
    "doc": "MCP25625 Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download the original version of MPLAB Harmony v3 packages, refer to the document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#softwaretools-used"
  },"1140": {
    "doc": "MCP25625 Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Mount MikroElektronika MCP25625 Click over mikroBUS socket #1 on the SAM E51 Curiosity Nano Evaluation Kit (Setup-1). | Repeat the above steps with the other hardware units (Setup-2). | Short the CANH and CANL lines of one DB9 connector with the CANH and CANL line of another DB9 connector using jumper wires as shown below image. | CANH - Pin 7 of the DB9 connector | CANL - Pin 2 of the DB9 connector | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#setup"
  },"1141": {
    "doc": "MCP25625 Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on the Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select the appropriate project name and folder | Click on the Finish button | In MPLAB X IDE, click on the “Make and Program Device” button. The device gets programmed in sometime | Follow the steps in the “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#programming-hex-file"
  },"1142": {
    "doc": "MCP25625 Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano Evaluation Kit” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . Note: Repeat the above Setup, Programming Hex File, Programming/Debugging Application Project on the second hardware setup (Setup-2). ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#programmingdebugging-application-project"
  },"1143": {
    "doc": "MCP25625 Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Repeat the above two steps for the second hardware setup (Setup-2). | Enter a character ‘a’ on one Tera terminal application to initiate the CAN Message Transmit. | Also, enter a character ‘b’ on another Tera terminal application to wait for the CAN Message Receive. | Now, in both the Tera terminal windows, you will see the CAN message transmission and reception continuously. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#running-the-demo"
  },"1144": {
    "doc": "MCP25625 Click Example",
    "title": "Instructions to add MCP25625 functionality to your application:",
    "content": "You could use this demonstration as an example to add MCP25625 functionality to your MPLAB Harmony v3-based application. Follow the below steps. | If you haven’t downloaded the MCP25625 demo yet Click Here to download, otherwise go to the next step | Unzip the downloaded .zip file | From the unzipped folder mcp25625/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The MCP25625 click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The MCP25625 click example source files gets added to your project . | . | The MCP25625 click example uses the SPI peripheral. The configuration of this peripheral for your application depends on the 32-bit MCU and development board you are using. | Configure SPI: - Add the SPI peripheral block to the MCC project graph . | Configure SPI Pins using MCC Pin configuration Window The SPI configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the MCP25625 click board Example: The MCP25625 click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the MCP25625 click board. The SPI lines from MCU coming to this socket are from the SERCOM1 peripheral on the MCU. MCC Project Graph - SPI configuration | . MCC Pin Configurator - SPI pin configuration . | Configure PORT Pins: . | The MCP25625 click needs three additional pins for configuration and data exchange. These parent . | Standby pin | Reset pin | . | Configure PORT pins needed by MCP25625 click in the MCC Pin Configurator The PORT pin configuration depends on . | 32-bit MCU | 32-bit MCU development board | The socket on which you have mounted the MCP25625 click board Example: The PORT pin configuration for the MCP25625 click example on SAM E51 Curiosity Nano Evaluation Kit is below. MCC Pin Configurator - PORT pin configuration | . | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The MCP25625 click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file mcp25625_example.c. You could use mcp25625_example.c as a reference to add MCP25625 functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#instructions-to-add-mcp25625-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#instructions-to-add-mcp25625-functionality-to-your-application"
  },"1145": {
    "doc": "MCP25625 Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#comments"
  },"1146": {
    "doc": "MCP25625 Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html#revision"
  },"1147": {
    "doc": "MCP25625 Click Example",
    "title": "MCP25625 Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/mcp25625/readme.html"
  },"1148": {
    "doc": "microSD Click Example",
    "title": "microSD Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#microsd-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#microsd-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1149": {
    "doc": "microSD Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html"
  },"1150": {
    "doc": "microSD Click Example",
    "title": "Description:",
    "content": "This application showcases the capabilities of the microSD Click module. It demonstrates various file operations that can be performed on an SD card. File Operations: . | Creating a file | Writing data to the file | Reading data from the file | Creating a directory | . These operations are accomplished using the MPLAB Harmony File System, SDSPI driver, and SPI PLIB. File System Operations on the SD Card: . | Create a file and write data to it . | The application creates a file named “mchp_sd.txt” | The file is opened in write mode | A text message is written to the file | . | Create a directory and read data from a file . | The application creates a directory named Dir1 in the root directory | A new file named “mchp_sd2.txt” is created inside “Dir1” | The content of “mchp_sd.txt” is read and copied into “mchp_sd2.txt” | . | . File system layer uses: . | SDSPI Driver to communicate to SD Card over SPI interface. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#description"
  },"1151": {
    "doc": "microSD Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Core | GPIO | SERCOM (SPI) | TC0 | Timer System Service | SDSPI Driver | File System Service | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#modulestechnology-used"
  },"1152": {
    "doc": "microSD Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika microSD Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#hardware-used"
  },"1153": {
    "doc": "microSD Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#softwaretools-used"
  },"1154": {
    "doc": "microSD Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#setup"
  },"1155": {
    "doc": "microSD Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#programming-hex-file"
  },"1156": {
    "doc": "microSD Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (microsd/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#programmingdebugging-application-project"
  },"1157": {
    "doc": "microSD Click Example",
    "title": "Running the Demo:",
    "content": ". | After power up, when the demo is running, The microSD-click shows as below | Once the application successfully creates “mchp_sd.txt” and “Dir1/mchp_sd2.txt” LED0 on the board will light up | . The success of the following file operations can be verified by connecting the SD card to a PC and examining the contents of “mchp_sd.txt” and “Dir1/mchp_sd2.txt.” The contents should match in order to consider them successful: . | Creating a file | Writing data to the file | Reading data from the file | Creating a directory | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#running-the-demo"
  },"1158": {
    "doc": "microSD Click Example",
    "title": "Instructions to add microSD Click functionality to your application:",
    "content": "You could use this demonstration as an example to add microSD Click functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the microSD Click demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder microsd/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The microSD-click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The microSD-click example source files gets added to your project . | . | The microSD Click example uses the SPI, SDSPI Driver,TC0peripherals and PORT pins . The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure SPI: - Add the SPI peripheral block to the MCC project graph . | Configure SPI Pins using MCC Pin configuration Window The SPI configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the microSD-click board Example: The microSD-click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the microSD-click board. The SPI lines from MCU coming to this socket are from the SERCOM1 peripheral on the MCU. MCC Project Graph - SPI configuration | . MCC Pin Configurator - SPI pin configuration . | Configure SDSPI Driver: - Add the SDSPI Driver peripheral block to the MCC project graph . | Add Instance 0 to the SDSPI Driver block and connect SERCOM 1 and File System to Instance 0 | . MCC Project Graph - SDSPI configuration . | Configure File System: - Add the File System block to the MCC project graph . MCC Project Graph - File System configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The microSD-click example on SAM E51 Curiosity Nano Evaluation Kit uses TC0 timer module on the MCU to implement the time requirement of microSD-click routines. MCC Project Graph - TC0 configuration MCC Project Graph - Timer configuration | . | Configure Core: . | Add the Core block to the MCC project graph MCC Project Graph - Core configuration | . | Configure PORT Pins: . | Configure PORT pins needed by microSD-click in the MCC Pin Configurator The PORT pin configuration depends on . | 32-bit MCU | 32-bit MCU development board | The socket on which you have mounted the microSD-click board Example: The PORT pin configuration for the microSD-click example on SAM E51 Curiosity Nano Evaluation Kit is below. MCC Pin Configurator - PORT pin configuration | . | . | . | The click_routines folder contain an example C source file microsd_example.c. You could use microsd_example.c as a reference to add microSD-click functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#instructions-to-add-microsd-click-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#instructions-to-add-microsd-click-functionality-to-your-application"
  },"1159": {
    "doc": "microSD Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#comments"
  },"1160": {
    "doc": "microSD Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html#revision"
  },"1161": {
    "doc": "microSD Click Example",
    "title": "microSD Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/microsd/readme.html"
  },"1162": {
    "doc": "OLED C Click display Example",
    "title": "OLED C Click board example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#oled-c-click-board-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#oled-c-click-board-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1163": {
    "doc": "OLED C Click display Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html"
  },"1164": {
    "doc": "OLED C Click display Example",
    "title": "Description:",
    "content": "This example demonstrates the display capability of OLED C Click board on SAM E51 Curiosity Nano Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#description"
  },"1165": {
    "doc": "OLED C Click display Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | GPIO | SERCOM (SPI) | Core | SPI Driver | Legato graphics | LE external controller | LE SPI 4-line display driver | Timer system service | GFX core | TC0 | Input system service | Systick | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#modulestechnology-used"
  },"1166": {
    "doc": "OLED C Click display Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika OLED C CLICK | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#hardware-used"
  },"1167": {
    "doc": "OLED C Click display Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#softwaretools-used"
  },"1168": {
    "doc": "OLED C Click display Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Mount the OLED C Click board on mikroBUS connector 1 of Curiosity Nano Base . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#setup"
  },"1169": {
    "doc": "OLED C Click display Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#programming-hex-file"
  },"1170": {
    "doc": "OLED C Click display Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (oled_c/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#programmingdebugging-application-project"
  },"1171": {
    "doc": "OLED C Click display Example",
    "title": "Running the Demo:",
    "content": ". | After power up, when the demo is running, The OLED C Click display shows as below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#running-the-demo"
  },"1172": {
    "doc": "OLED C Click display Example",
    "title": "Instructions to add OLED C Click display functionality to your application:",
    "content": "The MPLAB Harmony v3 supports adding custom display to your application using Legato (LE) External Display Controller drivers. The LE External Controller driver allows user to configure custom commands necessary for the external display. Below are Harmony configuration for the OLED C Click . | Connect the display components as shown in the below figure | Change Configuration of components as shown in the below figures . | SERCOM Configuration | LE External configuration | . Note : Other components’ configurations will be default . | Change the width and height settings to 96 x 96 in GFX core LE block | Enable timer system service and core service as needed by the LE External Controller driver . Note : Configuration for TIME System service, Harmony core service and TC0 remains default . | Design graphics using MPLAB Harmony “Legato Graphics Composer”. Launch it using “Project Graph &gt; Plugins &gt; Legato Graphics Composer” | Use Object Editor to edit the configuration for Input Widgets and Dispaly Widgets | You could use this demonstration as an example to add OLED C Click functionality to your MPLAB Harmony v3 based application. Follow the below steps. Note: This demonstration uses a Text Field Input widget and an Image Display widget. Therefore the configurations in the Legato Graphics Composer (shown above) routines and examples (in oled_c.c and oled_c_example.c) are also based on these widgets. Users can configure and use other widgets and objects supported under Legato Graphics Composer by using this demonstration as a reference. | If you haven’t downloaded the OLED C Click demo yet Click Here to download, otherwise go to next step . | Unzip the downloaded .zip file . | From the unzipped folder oled_c/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project . | Open MPLAB X IDE . | Open your application project . | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” . | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The OLED C lick header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The OLED C Click source files gets added to your project . | . | The click_routines folder contain an example C source file oled_c_example.c. You could use oled_c_example.c as a reference to add OLED C display functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#instructions-to-add-oled-c-click-display-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#instructions-to-add-oled-c-click-display-functionality-to-your-application"
  },"1173": {
    "doc": "OLED C Click display Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#comments"
  },"1174": {
    "doc": "OLED C Click display Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html#revision"
  },"1175": {
    "doc": "OLED C Click display Example",
    "title": "OLED C Click display Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/oled_c/readme.html"
  },"1176": {
    "doc": "PIR Click Example",
    "title": "PIR Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#pir-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#pir-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1177": {
    "doc": "PIR Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html"
  },"1178": {
    "doc": "PIR Click Example",
    "title": "Description:",
    "content": "This example demonstrates the motion detection using PIR click board on SAM E51 Curiosity Nano Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#description"
  },"1179": {
    "doc": "PIR Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SYSTICK | GPIO | SERCOM (I2C) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#modulestechnology-used"
  },"1180": {
    "doc": "PIR Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika PIR Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#hardware-used"
  },"1181": {
    "doc": "PIR Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#softwaretools-used"
  },"1182": {
    "doc": "PIR Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#setup"
  },"1183": {
    "doc": "PIR Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#programming-hex-file"
  },"1184": {
    "doc": "PIR Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (apps/sam_e51_cnano/same51n_mikroe_click/pir/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#programmingdebugging-application-project"
  },"1185": {
    "doc": "PIR Click Example",
    "title": "Running the Demo:",
    "content": ". | After power up, when the demo is running, move your hand over the PIR click boards | Every time you move the hand over the click board a message on the serial terminal is printed | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#running-the-demo"
  },"1186": {
    "doc": "PIR Click Example",
    "title": "Instructions to add Motion Sensor functionality to your application:",
    "content": "You could use this demonstration as an example to add motion sensor functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the PIR example demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder pir/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The PIR click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The PIR click example source files gets added to your project . | . | The PIR click example uses the I2C and Timer peripherals . The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the PIR click board Example: The PIR click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the PIR Click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The PIR click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of PIR click example. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines and example to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The PIR click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file pir_example.c. You could use pir_example.c as a reference to add motion sensor functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#instructions-to-add-motion-sensor-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#instructions-to-add-motion-sensor-functionality-to-your-application"
  },"1187": {
    "doc": "PIR Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#comments"
  },"1188": {
    "doc": "PIR Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Created application example | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html#revision"
  },"1189": {
    "doc": "PIR Click Example",
    "title": "PIR Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/pir/readme.html"
  },"1190": {
    "doc": "RFID Click Example",
    "title": "RFID Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#rfid-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#rfid-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1191": {
    "doc": "RFID Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html"
  },"1192": {
    "doc": "RFID Click Example",
    "title": "Description:",
    "content": "This example demonstrates the reading of RFID tag information and displays it on a serial terminal on SAM E51 Curiosity Nano Evaluation Kit using RFID Click board. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#description"
  },"1193": {
    "doc": "RFID Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | SYSTICK | GPIO | SERCOM (SPI) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#modulestechnology-used"
  },"1194": {
    "doc": "RFID Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika RFID Click | RFID 13.56MHz Card or 13.56MHz RFID IC Key Tag | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#hardware-used"
  },"1195": {
    "doc": "RFID Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#softwaretools-used"
  },"1196": {
    "doc": "RFID Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#setup"
  },"1197": {
    "doc": "RFID Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#programming-hex-file"
  },"1198": {
    "doc": "RFID Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sam_e51_cnano/same51n_mikroe_click/rfid/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#programmingdebugging-application-project"
  },"1199": {
    "doc": "RFID Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Keep any 13.56 MHz RFID tags near to RFID as shown here. | Press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to start read the RFID tag information if any tag presents nearby RFID field. | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit prints the read the RFID tag information if any tag presents nearby RFID field.. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#running-the-demo"
  },"1200": {
    "doc": "RFID Click Example",
    "title": "Instructions to add RFID functionality to your application:",
    "content": "You could use this demonstration as an example to add RFID functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the RFID demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder rfid/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The RFID click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The RFID click example source files gets added to your project . | . | The RFID click example uses the SPI and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure SPI: - Add the SPI peripheral block to the MCC project graph . | Configure SPI Pins using MCC Pin configuration Window The SPI configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the RFID click board Example: The RFID click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the RFID click board. The SPI lines from MCU coming to this socket are from the SERCOM1 peripheral on the MCU. MCC Project Graph - SPI configuration | . MCC Pin Configurator - SPI pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The RFID click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of RFID click routines. MCC Project Graph - SysTick configuration | . | Configure PORT Pins: . | The RFID click needs three additional pins for configuration and data exchange. These parent . | Interrupt input pin | Select serial communication interface pin | Reset pin | . | Configure PORT pins needed by RFID click in the MCC Pin Configurator The PORT pin configuration depends on . | 32-bit MCU | 32-bit MCU development board | The socket on which you have mounted the RFID click board Example: The PORT pin configuration for the RFID click example on SAM E51 Curiosity Nano Evaluation Kit is below. MCC Pin Configurator - PORT pin configuration | . | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The RFID click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file rfid_example.c. You could use rfid_example.c as a reference to add RFID functionality in your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#instructions-to-add-rfid-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#instructions-to-add-rfid-functionality-to-your-application"
  },"1201": {
    "doc": "RFID Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#comments"
  },"1202": {
    "doc": "RFID Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html#revision"
  },"1203": {
    "doc": "RFID Click Example",
    "title": "RFID Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/rfid/readme.html"
  },"1204": {
    "doc": "Thumbstick Click Example",
    "title": "Thumbstick Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#thumbstick-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#thumbstick-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1205": {
    "doc": "Thumbstick Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html"
  },"1206": {
    "doc": "Thumbstick Click Example",
    "title": "Description:",
    "content": "This example demonstrates the 360 degree directional movement of input device (joystick) and push button on SAM E51 Curiosity Nano Evaluation Kit using Thumbstick click board. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#description"
  },"1207": {
    "doc": "Thumbstick Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SYSTICK | GPIO | EIC | SERCOM (USART) | SERCOM (SPI) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#modulestechnology-used"
  },"1208": {
    "doc": "Thumbstick Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika Thumbstick Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#hardware-used"
  },"1209": {
    "doc": "Thumbstick Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#softwaretools-used"
  },"1210": {
    "doc": "Thumbstick Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#setup"
  },"1211": {
    "doc": "Thumbstick Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#programming-hex-file"
  },"1212": {
    "doc": "Thumbstick Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sam_e51_cnano/same51n_mikroe_click/thumbstick/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#programmingdebugging-application-project"
  },"1213": {
    "doc": "Thumbstick Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | A message is printed on the terminal whenever Thumbstick’s push button pressed or UP/DOWN/LEFT/RIGHT Thumbstick’s 360 degree rotation is made. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#running-the-demo"
  },"1214": {
    "doc": "Thumbstick Click Example",
    "title": "Instructions to add Thumbstick functionality to your application:",
    "content": "You could use this demonstration as an example to add Thumbstick functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the Thumbstick demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder thumbstick/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The Thumbstick click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The Thumbstick click example source files gets added to your project . | . | The Thumbstick click example uses the SPI, Timer peripherals and PORT Pins. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure SPI: - Add the SPI peripheral block to the MCC project graph . | Configure SPI Pins using MCC Pin configuration Window The SPI configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the Thumbstick click board Example: The Thumbstick click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the Thumbstick click board. The SPI lines from MCU coming to this socket are from the SERCOM1 peripheral on the MCU. MCC Project Graph - SPI configuration | . MCC Pin Configurator - SPI pin configuration . | Configure Thumbstick Push Button: - Add the EIC peripheral block to the MCC project graph . | Configure EIC Pins using MCC Pin configuration Window The EIC configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the Thumbstick click board Example: The Thumbstick click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the Thumbstick click board. The PA04 EIC line coming to this socket from MCU needs to be configured for the Thumbstick’s push button INT pin to work. MCC Project Graph - EIC configuration | . MCC Pin Configurator - EIC pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The Thumbstick click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of Thumbstick click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The Thumbstick click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file thumbstick_example.c. You could use thumbstick_example.c as a reference to add Thumbstick functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#instructions-to-add-thumbstick-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#instructions-to-add-thumbstick-functionality-to-your-application"
  },"1215": {
    "doc": "Thumbstick Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#comments"
  },"1216": {
    "doc": "Thumbstick Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Created application example | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html#revision"
  },"1217": {
    "doc": "Thumbstick Click Example",
    "title": "Thumbstick Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/thumbstick/readme.html"
  },"1218": {
    "doc": "USB I2C Click Example",
    "title": "USB I2C Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#usb-i2c-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#usb-i2c-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1219": {
    "doc": "USB I2C Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html"
  },"1220": {
    "doc": "USB I2C Click Example",
    "title": "Description:",
    "content": "This example demonstrates how to use the SERCOM-I2C peripheral in slave mode on SAM E51 Curiosity Nano Evaluation Kit using USB I2C Click board. This example uses the I2C peripheral library in slave mode and emulates an EEPROM of 512 bytes. The emulated EEPROM consists of two pages, each of size 256 bytes. The I2C slave expects two bytes of memory address from the I2C master (USB I2C Click) and the memory address can range from 0x00 to 0x1FF. The following operation can be made on the I2C slave (emulated EEPROM). Byte Write: The I2C master sends the slave address, followed by two bytes of the memory address. The slave writes the provided data at the given memory address. Page Write: A page write is initiated the same way as a byte write, but the I2C master can write up to 256 bytes (1 page). If the I2C master sends more than 256 bytes to the I2C slave, the memory address will “roll over,” and previous data will be overwritten. During writing, the address “rollover” is from the last byte of the current page to the first byte. Read Operation: Reads the requested number of bytes from the start address of emulated EEPROM (i.e. 0x00 and the maximum 512 bytes can be read). ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#description"
  },"1221": {
    "doc": "USB I2C Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | NVMCTRL | PORT | SERCOM (I2C) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#modulestechnology-used"
  },"1222": {
    "doc": "USB I2C Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika USB I2C Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#hardware-used"
  },"1223": {
    "doc": "USB I2C Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Download and Install MCP2221 I2C SMBus Terminal in your PC. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#softwaretools-used"
  },"1224": {
    "doc": "USB I2C Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Mount MikroElektronika USB I2C Click over mikroBUS socket #1 on the SAM E51 Curiosity Nano Evaluation Kit. | Connect the MikroElektronika USB I2C Click to the Host PC as a USB Device through a Type-A male to mini-B USB cable connected to mini-B USB port. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#setup"
  },"1225": {
    "doc": "USB I2C Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#programming-hex-file"
  },"1226": {
    "doc": "USB I2C Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano Evaluation Kit” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#programmingdebugging-application-project"
  },"1227": {
    "doc": "USB I2C Click Example",
    "title": "Running the Demo:",
    "content": ". | Open MCP2221 I2C SMBus Terminal Application. If the MCP2221 board is recognized, you should see the ‘Select Device’ field populated with the component ID on the far upper-right corner of the window: . Note: If there is no device ID on that field, please refer to the MCP2221 terminal installation instructions to install the board. | Now, select File &gt; Import Commands. Navigate to the project solution folder and select the file MCP2221 - CMDs For I2C Slave Demo.csv: . You should now have the following commands listed under the Command list: . | Step 1: Read 512 bytes from I²C Slave . After the Terminal is configured, issue the first command on the list by pressing the button Send on the right side. This command accesses the I²C device address 0x54, which is the Slave address selected for this example, and reads the 512 bytes data. This is the emulated EEPROM buffer on which the read and write operations are executed. | Step 2: Write 8 bytes to I²C Slave . | Step 3: Read 8 bytes from I²C Slave . | Step 4: Write 16 bytes to I²C Slave . | Step 5: Read 16 bytes from I²C Slave . | Step 6: Read 512 bytes from I²C Slave . | Step 7: Write page 1 (256bytes) to I²C Slave . | Step 8: Read two pages (256bytes) from I²C Slave . | Step 9: Write page 2 (256bytes) to I²C Slave . | Step 10: Read two pages (256bytes) from I²C Slave . | Step 11: Issue the following commands and observe output . | Write 1 byte to page 1 address 0x1E. | Write 1 byte to page 2 address 0x1E. | Read two pages. Check whether above bytes are written properly. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#running-the-demo"
  },"1228": {
    "doc": "USB I2C Click Example",
    "title": "Instructions to add USB I2C functionality to your application:",
    "content": "You could use this demonstration as an example to add USB I2C functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the USB I2C demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder usb_i2c/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The USB I2C click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The USB I2C click example source files gets added to your project . | . | The USB I2C click example uses the I2C peripheral. The configuration of this peripheral for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the USB I2C click board Example: The USB I2C click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the USB I2C click board. The I2C lines from MCU coming to this socket are from the SERCOM4 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The USB I2C click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file usb_i2c_example.c. You could use usb_i2c_example.c as a reference to add USB I2C functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#instructions-to-add-usb-i2c-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#instructions-to-add-usb-i2c-functionality-to-your-application"
  },"1229": {
    "doc": "USB I2C Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#comments"
  },"1230": {
    "doc": "USB I2C Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | v1.6.0 - Updated the USB I2C click example | v1.5.0 - Removed MHC support, regenerated and tested application | v1.4.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html#revision"
  },"1231": {
    "doc": "USB I2C Click Example",
    "title": "USB I2C Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_i2c/readme.html"
  },"1232": {
    "doc": "USB SPI Click Example",
    "title": "USB SPI Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#usb-spi-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#usb-spi-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1233": {
    "doc": "USB SPI Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html"
  },"1234": {
    "doc": "USB SPI Click Example",
    "title": "Description:",
    "content": "This example demonstrates how to use the SERCOM-SPI peripheral in slave mode on SAM E51 Curiosity Nano Evaluation Kit using USB SPI Click board. This example uses the SPI peripheral library in slave mode and emulates an EEPROM of 512 bytes. The emulated EEPROM consists of two pages, each of size 256 bytes. The SPI slave expects two bytes of memory address from the SPI master (USB SPI Click) and the memory address can range from 0x00 to 0x1FF. The following operation can be made on the SPI slave (emulated EEPROM). Data Write: The SPI master sends the slave address, followed by two bytes of the memory address, and followed by the data. The slave writes the data at the requested memory address. Data Read: Reads the requested number of bytes from the start address of emulated EEPROM in two steps, . | SPI master sends the sends the slave address, followed by two bytes of the memory address (read location), and followed by the number of bytes read. | SPI master sends the dummy bytes (0x00s) to read the data from the slave and the count of dummy bytes to send is equal to the number of bytes read. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#description"
  },"1235": {
    "doc": "USB SPI Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORT | SERCOM (SPI) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#modulestechnology-used"
  },"1236": {
    "doc": "USB SPI Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika USB SPI Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#hardware-used"
  },"1237": {
    "doc": "USB SPI Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Download and Install MCP2210 SPI Terminal in your PC. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#softwaretools-used"
  },"1238": {
    "doc": "USB SPI Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Mount MikroElektronika USB SPI Click over mikroBUS socket #1 on the SAM E51 Curiosity Nano Evaluation Kit. | Connect the MikroElektronika USB SPI Click to the Host PC as a USB Device through a Type-A male to mini-B USB cable connected to mini-B USB port. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#setup"
  },"1239": {
    "doc": "USB SPI Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#programming-hex-file"
  },"1240": {
    "doc": "USB SPI Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano Evaluation Kit” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#programmingdebugging-application-project"
  },"1241": {
    "doc": "USB SPI Click Example",
    "title": "Running the Demo:",
    "content": ". | Open MCP2210 SPI Terminal Application. If the MCP2210 board is recognized, you should see the ‘MCP2210 Status: Connected’ on the far down-left corner of the window. | Configure the MCP2210 SPI Terminal as below. | Data write to emulated EEPROM (SPI Slave) . Example: Write the data “0x99 and 0xAA” to emulated EEPROM at “0x000A” address location by transferring “0x02 0x00 0x0A 0x99 0xAA”. Follow the below protocol to write the data to emulated EEPROM using MCP2210 SPI Terminal. | *[WR_CMD (0x02) | ADDR1 (MSB) | ADDR0 (LSB) | DATA0 | DATA1 | .. | DATAN*]** | . | Data read from emulated EEPROM (SPI Slave) . Example: Read the two bytes of data from emulated EEPROM at “0x000A” address location by transferring “0x03 0x00 0x0A 0x02” and “0x00 0x00”. Follow the below protocol to initiate the data read from emulated EEPROM using MCP2210 SPI Terminal. | *[RD_CMD (0x03) | ADDR1 (MSB) | ADDR0 (LSB) | Number of bytes read*]** | . Follow the below protocol to read the data from emulated EEPROM using MCP2210 SPI Terminal. | *[DUMMY | DUMMY | .. | DUMMY*]** | . See the received data on “Rx Data” section on MCP2210 SPI Terminal. Note: Make sure the dummy byte not be a read or write command value, i.e. 0x02 or 0x03. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#running-the-demo"
  },"1242": {
    "doc": "USB SPI Click Example",
    "title": "Instructions to add USB SPI functionality to your application:",
    "content": "You could use this demonstration as an example to add USB SPI functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the USB SPI demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder usb_spi/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The USB SPI click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The USB SPI click example source files gets added to your project . | . | The USB SPI click example uses the SPI peripheral. The configuration of this peripheral for your application depends on the 32-bit MCU and development board you are using. | Configure SPI: - Add the SPI peripheral block to the MCC project graph . | Configure SPI Pins using MCC Pin configuration Window The SPI configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the USB SPI click board Example: The USB SPI click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the USB SPI click board. The SPI lines from MCU coming to this socket are from the SERCOM1 peripheral on the MCU. MCC Project Graph - SPI configuration | . MCC Pin Configurator - SPI pin configuration . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The USB SPI click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file usb_spi_example.c. You could use usb_spi_example.c as a reference to add USB SPI functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#instructions-to-add-usb-spi-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#instructions-to-add-usb-spi-functionality-to-your-application"
  },"1243": {
    "doc": "USB SPI Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#comments"
  },"1244": {
    "doc": "USB SPI Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html#revision"
  },"1245": {
    "doc": "USB SPI Click Example",
    "title": "USB SPI Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_spi/readme.html"
  },"1246": {
    "doc": "USB UART Click Example",
    "title": "USB UART Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#usb-uart-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#usb-uart-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1247": {
    "doc": "USB UART Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html"
  },"1248": {
    "doc": "USB UART Click Example",
    "title": "Description:",
    "content": "This example demonstrates the reading of a character and displays it on a serial terminal on SAM E51 Curiosity Nano Evaluation Kit using USB UART Click board. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#description"
  },"1249": {
    "doc": "USB UART Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | GPIO | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#modulestechnology-used"
  },"1250": {
    "doc": "USB UART Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika USB UART Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#hardware-used"
  },"1251": {
    "doc": "USB UART Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#softwaretools-used"
  },"1252": {
    "doc": "USB UART Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Mount MikroElektronika USB UART Click over mikroBUS socket #1 on the SAM E51 Curiosity Nano Evaluation Kit. | Connect the MikroElektronika USB UART Click to the Host PC as a USB Device through a Type-A male to mini-B USB cable connected to mini-B USB port. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#setup"
  },"1253": {
    "doc": "USB UART Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#programming-hex-file"
  },"1254": {
    "doc": "USB UART Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#programmingdebugging-application-project"
  },"1255": {
    "doc": "USB UART Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 . | Now, open another Tera Term terminal application on your PC and Set the baud rate to 115200 to test MikroElektronika USB UART Click. | Goto Setup -&gt; Terminal and enable Local echo . | For every key press, the entered key is printed on terminal. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#running-the-demo"
  },"1256": {
    "doc": "USB UART Click Example",
    "title": "Instructions to add USB UART functionality to your application:",
    "content": "You could use this demonstration as an example to add USB UART functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the USB UART demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder usb_uart/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The USB UART click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The USB UART click example source files gets added to your project . | . | The USB UART click example uses the USART peripheral. The configuration of this peripheral for your application depends on the 32-bit MCU and development board you are using. | Configure USART: - Add the USART peripheral block to the MCC project graph . | Configure USART Pins using MCC Pin configuration Window The USART configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the USB UART click board Example: The USB UART click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the USB UART click board. The USART lines from MCU coming to this socket are from the SERCOM4 peripheral on the MCU. MCC Project Graph - USART configuration | . MCC Pin Configurator - USART pin configuration . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The USB UART click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file usb_uart_example.c. You could use usb_uart_example.c as a reference to add USB UART functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#instructions-to-add-usb-uart-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#instructions-to-add-usb-uart-functionality-to-your-application"
  },"1257": {
    "doc": "USB UART Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#comments"
  },"1258": {
    "doc": "USB UART Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Updated USB UART click interface APIs, Added MCC support, Regenerated and tested application. | v1.3.0 - Created application example | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html#revision"
  },"1259": {
    "doc": "USB UART Click Example",
    "title": "USB UART Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/usb_uart/readme.html"
  },"1260": {
    "doc": "Weather Click Example",
    "title": "Weather Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#weather-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#weather-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1261": {
    "doc": "Weather Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html"
  },"1262": {
    "doc": "Weather Click Example",
    "title": "Description:",
    "content": "This example demonstrates the reading of weather parameters (temperature, pressure, humidity) and displays it on a serial terminal on SAM E51 Curiosity Nano Evaluation Kit using Weather Click board. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#description"
  },"1263": {
    "doc": "Weather Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | SYSTICK | GPIO | SERCOM (I2C) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#modulestechnology-used"
  },"1264": {
    "doc": "Weather Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika Weather Click | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#hardware-used"
  },"1265": {
    "doc": "Weather Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#softwaretools-used"
  },"1266": {
    "doc": "Weather Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#setup"
  },"1267": {
    "doc": "Weather Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#programming-hex-file"
  },"1268": {
    "doc": "Weather Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (weather/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#programmingdebugging-application-project"
  },"1269": {
    "doc": "Weather Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Press the switch SW0 on the SAM E51 Curiosity Nano Evaluation Kit to print the weather parameters. (Temperature, Pressure and Humidity) | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit prints the weather parameters. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#running-the-demo"
  },"1270": {
    "doc": "Weather Click Example",
    "title": "Instructions to add weather functionality to your application:",
    "content": "You could use this demonstration as an example to add weather functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the weather demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder weather/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The weather click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The weather click example source files gets added to your project . | . | The weather click example uses the I2C and Timer peripherals. The configuration of these peripherals for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the weather click board Example: The weather click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the weather click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Configure Timer: . | Configure Timer peripheral block in the MCC project graph The Timer configuration depends on - 32-bit MCU Example: The weather click example on SAM E51 Curiosity Nano Evaluation Kit uses SysTick timer module on the MCU to implement the time requirement of weather click routines. MCC Project Graph - SysTick configuration | . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The weather click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file weather_example.c. You could use weather_example.c as a reference to add weather functionality in your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#instructions-to-add-weather-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#instructions-to-add-weather-functionality-to-your-application"
  },"1271": {
    "doc": "Weather Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#comments"
  },"1272": {
    "doc": "Weather Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html#revision"
  },"1273": {
    "doc": "Weather Click Example",
    "title": "Weather Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/weather/readme.html"
  },"1274": {
    "doc": "Serial Bridge Application",
    "title": "Serial Bridge Application to upgrade ATWINC1510 Firmware",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#serial-bridge-application-to-upgrade-atwinc1510-firmware",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#serial-bridge-application-to-upgrade-atwinc1510-firmware"
  },"1275": {
    "doc": "Serial Bridge Application",
    "title": "Description:",
    "content": "This application acts as a serial bridge between the PC utility (winc1510_firmware) and the ATWINC1510 module on WiFi 7 click board. The application interfaces with the PC over UART and with the WiFi 7 click (ATWINC1510 module) board over the SPI lines. The application receives the ATWINC1510 firmware from the PC, and programs it into the ATWINC1510 module (on WiFi 7 click board). ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#description"
  },"1276": {
    "doc": "Serial Bridge Application",
    "title": "Modules/Technology Used:",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#modulestechnology-used"
  },"1277": {
    "doc": "Serial Bridge Application",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | WIFI 7 CLICK | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#hardware-used"
  },"1278": {
    "doc": "Serial Bridge Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . | MPLAB X IDE v5.50 | MPLAB XC32 Compiler v3.0 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#softwaretools-used"
  },"1279": {
    "doc": "Serial Bridge Application",
    "title": "Setup:",
    "content": ". | Mount SAM E51 Curiosity Nano Evaluation Kit on “CNANO56_HOST_CONN”(U3) connector of Curiosity Nano Base board | Mount WiFi 7 Click board on mikroBUS click 1 connector of Curiosity Nano Base board | Connect a USB cable to the DEBUG USB port for programming | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#setup"
  },"1280": {
    "doc": "Serial Bridge Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file in “winc1510_firmware_upgrade_serial_bridge/hex” folder. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#programming-hex-file"
  },"1281": {
    "doc": "Serial Bridge Application",
    "title": "Running the Demo",
    "content": ". | Ensure the board is powered on (a USB cable is connected to the DEBUG USB port) | Refer the “Running the Demo” section in the documentation under utility/readme file | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#running-the-demo"
  },"1282": {
    "doc": "Serial Bridge Application",
    "title": "Comments:",
    "content": ". | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-b.ased Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . Revision: . | v1.6.0 - Updated steps to upgrade ATWINC1510 firmware. Regenerated and Tested the application. | v1.5.0 - Regenerated and tested application. | v1.4.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html#comments"
  },"1283": {
    "doc": "Serial Bridge Application",
    "title": "Serial Bridge Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/winc1510_firmware_upgrade_serial_bridge/readme.html"
  },"1284": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "ATWINC1510 Firmware upgrade Guide",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html#atwinc1510-firmware-upgrade-guide",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html#atwinc1510-firmware-upgrade-guide"
  },"1285": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "Description:",
    "content": "This Application uses the WiFi 7 click board (containing Microchip’s ATWINC1510-MR210PB IEEE 802.11 b/g/n module) to enable cloud connectivity. The application’s functioning requires the ATWINC1510 module to have firmware compatible with the WiFi software stack running on the ATSAME51 microcontroller(on SAM E51 Curiosity Nano Development Kit). To enable this compatibility, the ATWINC1510 module is updated with the firmware compatible with WiFi software running in the latest released demo. Serial Bridge Application to upgrade ATWINC1510 Firmware . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html#description"
  },"1286": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": " Complete the above highlighted step before proceeding further ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html#-complete-the-above-highlighted-step-before-proceeding-further-",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html#-complete-the-above-highlighted-step-before-proceeding-further-"
  },"1287": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "Running the utility",
    "content": ". | Navigate to **“/wireless_wifi/utilities/wifi/winc\\\"** and open command prompt. | The following command line will create and program a firmware image. winc_flash_tool.cmd /p COM3 /d WINC1500/v 19.7.7 /e /x /i prog /w . NOTE : Respective device COM PORT should be selected in above command and all other serial terminal application should be closed . | Wait till verify passed message comes up as shown below | . Revision: . | v1.6.0 - Updated steps to upgrade ATWINC1510 firmware. Regenerated and Tested the application. | v1.5.0 - Regenerated and tested application. | v1.4.0 - Released utility. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html#running-the-utility",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html#running-the-utility"
  },"1288": {
    "doc": "ATWINC1510 Firmware upgrade",
    "title": "ATWINC1510 Firmware upgrade",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/utilities/readme.html"
  },"1289": {
    "doc": "WIFI 7 Click Example",
    "title": "WIFI 7 Click board example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#wifi-7-click-board-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#wifi-7-click-board-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1290": {
    "doc": "WIFI 7 Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html"
  },"1291": {
    "doc": "WIFI 7 Click Example",
    "title": "Description:",
    "content": "This example demonstrates the WiFi capability of WiFi 7 Click board on SAM E51 Curiosity Nano Evaluation Kit. This application scans for available Access Points and display the list on tera term. It sends out a scan requests and lists responses of all Access points along with their signal strength and connects to the specified Access point. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#description"
  },"1292": {
    "doc": "WIFI 7 Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | GPIO | SERCOM (SPI) | SERCOM (UART) | Core | SPI Driver | WINC | Timer system service | TC0 | Console system service | Debug system service | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#modulestechnology-used"
  },"1293": {
    "doc": "WIFI 7 Click Example",
    "title": " ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html"
  },"1294": {
    "doc": "WIFI 7 Click Example",
    "title": "ATWINC1510 Firmware upgrade Guide",
    "content": "Refer the documentation in utilities folder If this is the first time you are building/running this version of the demo, you must complete this step before proceeding further. Otherwise, you may skip this step. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#atwinc1510-firmware-upgrade-guide",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#atwinc1510-firmware-upgrade-guide"
  },"1295": {
    "doc": "WIFI 7 Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | MikroElektronika WIFI 7 CLICK | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#hardware-used"
  },"1296": {
    "doc": "WIFI 7 Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#softwaretools-used"
  },"1297": {
    "doc": "WIFI 7 Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Mount the WiFi 7 click board on mikroBUS connector 1 of Curiosity Nano Base . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#setup"
  },"1298": {
    "doc": "WIFI 7 Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#programming-hex-file"
  },"1299": {
    "doc": "WIFI 7 Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (wifi_7/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#programmingdebugging-application-project"
  },"1300": {
    "doc": "WIFI 7 Click Example",
    "title": "Running the Demo:",
    "content": ". | Configure the serial port terminal with 9600 baud rate | After power up, when the demo is running, the application prints as shown below | Change the SSID and Password of your known WiFi credentials in “wifi_7.h” header file and reprogram the project . | Device connects to the specified WiFi Access Point | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#running-the-demo"
  },"1301": {
    "doc": "WIFI 7 Click Example",
    "title": "Instructions to add WiFi 7 click functionality to your application:",
    "content": "The MPLAB Harmony v3 supports adding WiFi functionality to your application using WINC driver. Below are Harmony v3 configuration for the WiFi 7 click . | Connect the WINC components as shown in the below figure . | Change Configuration of components as shown in the below figures . | SERCOM1 Configuration | MCC Pin Configurator - SPI pin configuration | MCC Pin Configurator - additional pin configurations | WINC configuration | . | . | . Note : Other components’ configurations will be default . | Connect the console and debug system service necessary for WINC driver as shown in the below figure . | SERCOM5 Configuration - MCC Pin Configurator - UART pin configuration | Debug Configuration | Enable timer system service and core service as needed by the WINC driver | Configure the EIC as shown in the below figure | You could use this demonstration as an example to add WiFi 7 click functionality to your MPLAB Harmony v3 based application. Follow the below steps. Note: This demo can be extended to connect to web to transfer data, refer the reference section below for more applications | . | If you haven’t downloaded the WiFi 7 click demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder wifi_7/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The WiFi 7 click header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The WiFi 7 click source files gets added to your project . | . | The click_routines folder contain an example C source file wifi_7_example.c. You could use wifi_7_example.c as a reference to add WiFi 7 display functionality to your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#instructions-to-add-wifi-7-click-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#instructions-to-add-wifi-7-click-functionality-to-your-application"
  },"1302": {
    "doc": "WIFI 7 Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | Google Cloud IoT Core Application on SAM E51 Curiosity Nano Evaluation Kit using Socket mode | Vending Machine Application on SAM E54 Xplained Pro Evaluation Kit using TCP/IP mode | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#comments"
  },"1303": {
    "doc": "WIFI 7 Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Updated steps to upgrade ATWINC1510 firmware. Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html#revision"
  },"1304": {
    "doc": "WIFI 7 Click Example",
    "title": "WIFI 7 Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/wifi_7/readme.html"
  },"1305": {
    "doc": "XPRO Adapter Click Example",
    "title": "XPRO Adapter Click example on SAM E51 Curiosity Nano Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#xpro-adapter-click-example-on-sam-e51-curiosity-nano-evaluation-kit",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#xpro-adapter-click-example-on-sam-e51-curiosity-nano-evaluation-kit"
  },"1306": {
    "doc": "XPRO Adapter Click Example",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html"
  },"1307": {
    "doc": "XPRO Adapter Click Example",
    "title": "Description:",
    "content": "This example demonstrates the reading of temperature and displays it on a serial terminal on SAM E51 Curiosity Nano Evaluation Kit using I/O1 Xplained Pro Extension Kit connected to XPRO-ADAPTER Click board. More Xplained Pro Extension Kits to the XPRO-ADAPTER Click could be found at the Microchip Development Tools link. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#description",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#description"
  },"1308": {
    "doc": "XPRO Adapter Click Example",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | GPIO | SERCOM (I2C) | SERCOM (USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#modulestechnology-used"
  },"1309": {
    "doc": "XPRO Adapter Click Example",
    "title": "Hardware Used:",
    "content": ". | SAM E51 Curiosity Nano Evaluation Kit | Curiosity Nano Base for Click Boards | I/O1 Xplained Pro Extension Kit | XPRO-ADAPTER Click | More Xplained Pro Extension Kits | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#hardware-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#hardware-used"
  },"1310": {
    "doc": "XPRO Adapter Click Example",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e51_cnano . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#softwaretools-used"
  },"1311": {
    "doc": "XPRO Adapter Click Example",
    "title": "Setup:",
    "content": ". | Connect the SAM E51 Curiosity Nano Evaluation Kit to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | Mount I/O1 Xplained Pro Extension Kit on to XPRO-ADAPTER Click. | Insert XPRO-ADAPTER Click to mikroBUS socket #1 on the Curiosity Nano Base for Click boards as shown in the following figure. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#setup",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#setup"
  },"1312": {
    "doc": "XPRO Adapter Click Example",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME51J20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#programming-hex-file"
  },"1313": {
    "doc": "XPRO Adapter Click Example",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sam_e51_cnano/same51n_mikroe_click/xpro_adapter/firmware/sam_e51_cnano.X) in MPLAB X IDE | Ensure “SAM E51 Curiosity Nano” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#programmingdebugging-application-project"
  },"1314": {
    "doc": "XPRO Adapter Click Example",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | For every switch press, the SAM E51 Curiosity Nano Evaluation Kit to prints the temperature. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#running-the-demo"
  },"1315": {
    "doc": "XPRO Adapter Click Example",
    "title": "Instructions to add XPRO Adapter functionality to your application:",
    "content": "You could use this demonstration as an example to add XPRO Adapter functionality to your MPLAB Harmony v3 based application. Follow the below steps. | If you haven’t downloaded the XPRO Adapter demo yet Click Here to download, otherwise go to next step | Unzip the downloaded .zip file | From the unzipped folder xpro_adapter/firmware/src, copy the folder click_routines to the folder firmware/src under your MPLAB Harmony v3 application project | Open MPLAB X IDE | Open your application project | In the project explorer, Right click on folder Header Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Header Files . | Click on “Add” button to add the selected folder . | The XPRO Adapter click example header files gets added to your project . | . | In the project explorer, Right click on folder Source Files and add a sub folder click_routines by selecting “Add Existing Items from Folders…” | . | Click on “Add Folder…” button . | Select the “click_routines” folder and select “Files of Types” as Source Files . | Click on “Add” button to add the selected folder . | The XPRO Adapter click example source files gets added to your project . | . | The XPRO Adapter click example uses the I2C peripheral. The configuration of this peripheral for your application depends on the 32-bit MCU and development board you are using. | Configure I2C: - Add the I2C peripheral block to the MCC project graph . | Configure I2C Pins using MCC Pin configuration Window The I2C configuration depends on - 32-bit MCU - 32-bit MCU development board - The socket on which you have mounted the XPRO Adapter click board Example: The XPRO Adapter click example on SAM E51 Curiosity Nano Evaluation Kit uses mikroBUS socket #1 on the Curiosity Nano Base for Click boards to mount the XPRO Adapter click board. The I2C lines from MCU coming to this socket are from the SERCOM2 peripheral on the MCU. MCC Project Graph - I2C configuration | . MCC Pin Configurator - I2C pin configuration . | Map Generic Macros: . | After generating the project, following the above configuration, map the generic macros used in the click routines to the Harmony PLIB APIs of the 32-bit MCU your project is running on | The generic macros should be mapped in the header file click_interface.h . Example: The XPRO Adapter click routines for the example on SAM E51 Curiosity Nano Evaluation Kit uses the following Harmony PLIB APIs . | . | . | The click_routines folder contain an example C source file xpro_adapter_example.c and . You could use xpro_adapter_example.c as a reference to add XPRO Adapter functionality in your application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#instructions-to-add-xpro-adapter-functionality-to-your-application",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#instructions-to-add-xpro-adapter-functionality-to-your-application"
  },"1316": {
    "doc": "XPRO Adapter Click Example",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#comments",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#comments"
  },"1317": {
    "doc": "XPRO Adapter Click Example",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Created application example | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#revision",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html#revision"
  },"1318": {
    "doc": "XPRO Adapter Click Example",
    "title": "XPRO Adapter Click Example",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/xpro_adapter/readme.html"
  },"1319": {
    "doc": "MikroElektronika Click Boards examples on SAM E51 Curiosity Nano Evaluation Kit",
    "title": "MikroElektronika Click Boards examples on SAM E51 Curiosity Nano Evaluation Kit",
    "content": "This folder contains the MPLAB® Harmony 3 reference applications developed on SAM E51 Curiosity Nano Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Weather Click Example | Click Here | . | 2 | Eink Display Bundle Click example | Click Here | . | 3 | Heart Rate 9 Click Example | Click Here | . | 4 | IR Thermo 2 Click Example | Click Here | . | 5 | 10DOF Click Example | Click Here | . | 6 | LED Driver 3 Click Example | Click Here | . | 7 | EEPROM 4 Click Example | Click Here | . | 8 | Thumbstick Click Example | Click Here | . | 9 | XPRO Adapter Click Example | Click Here | . | 10 | Fan Click Example | Click Here | . | 11 | GSM GPS Click Example | Click Here | . | 12 | PIR Click Example | Click Here | . | 13 | USB UART Click Example | Click Here | . | 14 | OLED C Click Example | Click Here | . | 15 | WIFI 7 Click Example | Click Here | . | 16 | RFID Click Example | Click Here | . | 17 | USB I2C Click Example | Click Here | . | 18 | BLE 2 Click Example | Click Here | . | 19 | GRID EYE Click Example | Click Here | . | 20 | LR Click Example | Click Here | . | 21 | USB SPI Click Example | Click Here | . | 22 | MCP25625 Click Example | Click Here | . | 23 | Eink E-Paper display 2,9” 296x128 dots Click Example | Click Here | . | 24 | 13DOF Click Example | Click Here | . | 25 | microSD Click Example | Click Here | . More Application Demos . Eink E-Paper display 29 296x128 dots Click Example . For more application demos on SAM E51 Curiosity Nano Evaluation Kit and other Development Boards/Kits having the same part number (ATSAME51J20A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/same51n_mikroe_click/readme.html",
    "relUrl": "/apps/sam_e51_cnano/same51n_mikroe_click/readme.html"
  },"1320": {
    "doc": "SAM E51 Curiosity Nano Evaluation Kit",
    "title": "SAM E51 Curiosity Nano Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM E51 Curiosity Nano Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | BLE Fitness Tracker | Click Here | . | 3 | Low Power Application with OLED C Click | Click Here | . | 4 | MikroElektronika Click Boards example applications |   | . More Application Demos . For more application demos on SAM E51 Curiosity Nano Evaluation Kit and other Development Boards/Kits having the same part number (ATSAME51J20A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e51_cnano/readme.html",
    "relUrl": "/apps/sam_e51_cnano/readme.html"
  },"1321": {
    "doc": "Getting Started",
    "title": "Getting Started Application with SAM E54 Curiosity Ultra Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#getting-started-application-with-sam-e54-curiosity-ultra-development-board",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#getting-started-application-with-sam-e54-curiosity-ultra-development-board"
  },"1322": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html"
  },"1323": {
    "doc": "Getting Started",
    "title": "Description",
    "content": "This application demonstrates an LED1 toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW1 on the SAM E54 Curiosity Ultra Development Board. The demo application has additional functionality to print the current room temperature periodically using on board temperature sensor. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#description",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#description"
  },"1324": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | SERCOM | RTC | EIC | DMAC | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#modulestechnology-used"
  },"1325": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Curiosity Ultra Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#hardware-used"
  },"1326": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_cult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#softwaretools-used"
  },"1327": {
    "doc": "Getting Started",
    "title": "Hardware Setup:",
    "content": ". | Connect the SAM E54 Curiosity Ultra Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#hardware-setup",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#hardware-setup"
  },"1328": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#programming-hex-file"
  },"1329": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same54c_getting_started/firmware/sam_e54_cult.X) in MPLAB X IDE | Ensure “SAM E54 Curiosity Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#programmingdebugging-application-project"
  },"1330": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | Reset or power cycle the device. | An LED1 on the SAM E54 Curiosity Ultra Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds. | And the LED toggling rate is displayed on the serial terminal. | Press the switch SW1 on the SAM E54 Curiosity Ultra Development Board to change the periodicity of the timeout to one second. | Every subsequent pressing of the switch SW1 on the SAM E54 Curiosity Ultra Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order. | Press the switch SW2 on the SAM E54 Curiosity Ultra Board to read and print the Temperature from the Temperature Sensor. | The temperature read is displayed on a serial console on a periodical basis. | Press the switch SW1 on the SAM E54 Curiosity Ultra Development Board to change the periodicity of the temperature values displayed on the serial console. The periodicity will be changed between 500 milliseconds, one second, two seconds, four seconds and back to 500 milliseconds on every time user press the switch SW1 on the SAM E54 Curiosity Ultra Development Board. | Below diagram shows the sample output log displayed on command prompt. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#running-the-demo"
  },"1331": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#comments"
  },"1332": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 regenerated and tested demo application | v1.2.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html#revision"
  },"1333": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_getting_started/readme.html",
    "relUrl": "/apps/sam_e54_cult/same54c_getting_started/readme.html"
  },"1334": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Motion Surveillance Application on SAM E54 Curiosity Ultra Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#motion-surveillance-application-on-sam-e54-curiosity-ultra-development-board",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#motion-surveillance-application-on-sam-e54-curiosity-ultra-development-board"
  },"1335": {
    "doc": "Motion Surveillance on SAME54",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html"
  },"1336": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Description:",
    "content": "The Motion Surveillance application detects a motion in front of the ArduCAM (camera) using the PIR Click (motion sensor) board. ArduCAM captures an image with resolution 320x240 and stores the image in an external storage device (microSD Card). Additionally, the application demonstrates a live preview of captured images. The live preview of captured images is demonstrated by running an HTTP web server on the development board. The user connects to the webserver through an internet browser and view the live preview of the captured images. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#description",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#description"
  },"1337": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | NVMCTRL | PORT | SYSTICK | SERCOM - USART | SERCOM - I2C | SERCOM - SPI | RTC | SDHC | TC | CRYPTO | NVIC | . | System Services . | Debug | Command | File System | Time | Console | DMA | . | Middleware libraries . | TCP/IP Stack | Harmony Core | FreeRTOS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#modulestechnology-used"
  },"1338": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Curiosity Ultra Development Board | Arducam Mini 2MP Plus – OV2640 SPI Camera Module | mikroBUS Xplained Pro | MikroElektronika PIR Click | microSD Card | LAN8740 PHY daughter board Note: The link above points to LAN8720A PHY Daughter Board. You can procure the PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit and remove the LAN8740 PHY Daughter board on it and use it for this demo. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#hardware-used"
  },"1339": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_cult_freertos . | Refer the Release Notes to know the MPLAB X IDE and MCC/MCC Plugin version. Alternatively, Click Here. | MPLAB XC32 C/C++ Compiler v2.50 | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#softwaretools-used"
  },"1340": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Hardware Setup:",
    "content": ". | Mount the MikroElektronika PIR Click on to the mikroBUS Xplained Pro adapter and then connect the mikroBUS Xplained Pro to EXT1 of the SAM E54 Curiosity Ultra Development Board | Bend the CS and VCC pins of Arducam Mini 2MP Plus – OV2640 SPI Camera Module as shown in the following image. | Mount the modified Arducam Mini 2MP Plus – OV2640 SPI Camera Module on to the Arduino R3 Uno compatible interface (J503) present on the SAM E54 Curiosity Ultra Development Board and connect the ArduCAM pins to the SAM E54 Curiosity Ultra Development Board as shown bellow. | VCC -&gt; 3V3 pin (3.3V) of Arduino R3 Uno compatible interface using a Male to Female Jumper Wire | CS -&gt; PC15 pin of mikroBUS header (CS pin) using a Male to Female Jumper Wire . | Note: The CS pin from the ArduCAM module is not directly mounted to the SERCOM0 (SPI) SSL (PB28) pin coming on the Arduino R3 Uno interface. This is because the SSL (PB28) pin on Arduino R3 Uno interface is found to have signal integrity issue. As an alternative, the CS pin from the ArduCAM module is connected to PC15 pin coming on to the mikroBUS header and used as SPI slave select pin. | . | Connect the remaining ArduCAM pins directly to the Arduino R3 Uno compatible interface (J503). i.e. | SCL -&gt; PD08 | SDA -&gt; PD09 | GND -&gt; GND | SCK -&gt; PB25 | MISO -&gt; PC25 | MOSI -&gt; PB24 | . | . | Mount LAN8740 PHY daughter board on Ethernet PHY header | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#hardware-setup",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#hardware-setup"
  },"1341": {
    "doc": "Motion Surveillance on SAME54",
    "title": "TCP/IP Network Setup:",
    "content": "To run the webserver component in the demo application, the target development board and the host computer should be in the same network. The host computer can be connected to a router via an ethernet cable or Wi-Fi. The target board should be connected to the router via an ethernet cable. Please refer to the following connection diagram. | The application is configured and build with LAN8740 PHY driver. To use a different PHY, use MPLAB® Code Configurator (MCC) to select and configure the PHY. Make sure that correct PHY address and configuration flags are used for the particular PHY daughter board. The MII/RMII and I/O configuration flags should match the hardware for the PHY board. This application demonstration assumes that IPv4 is enabled. If IPv4 is not enabled in MCC, the code in app.c will not build and needs to be updated to remove the IPv4 dependencies. | The demo has DHCP enabled, and expect a DHCP server to be available. If there is no DHCP server, then the default static IP address will be used: 192.168.100.11. If this static address does not match your network settings, use MPLAB® Code Configurator (MCC) to modify the static IP address of the network interface. | The NetBIOS name of the application is specified during the initialization of TCP/IP stack. It is the hostName member of TCPIP_HOSTS_CONFIGURATION structure. The NetBIOS service must be enabled in demonstration configuration, for the demonstration to respond to NetBIOS queries. Alternatively, use the IPv4 or IPv6 address (if IPv6 is enabled) of the board directly. | The IPv4 and IPv6 addresses can be obtained by running the TCP/IP Discovery utility on the computer. Ex: ipconfig . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#tcpip-network-setup",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#tcpip-network-setup"
  },"1342": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#programming-hex-file"
  },"1343": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same54c_motion_surveillance/firmware/sam_e54_cult_freertos.X) in MPLAB X IDE | Ensure “SAM E54 Curiosity Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#programmingdebugging-application-project"
  },"1344": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Running the Surveillance application demo:",
    "content": ". | Perform “Hardware Setup” steps mentioned above, if not done already. | Ensure a microSD Card is formatted and loaded with the web_pages provided within the same54c_motion_surveillance/firmware/src/web_pages directory. | Insert this microSD Card at J704 socket (back side of the board) on SAM E54 Curiosity Ultra Development Board. | . | Build and download the demonstration project on the target board. | Serial Terminal Configuration: . | Open a standard terminal application on the computer (like Hyper-terminal or Tera Term) and configure the virtual COM port. | Set the serial baud rate to 115200 baud in the terminal application. | See that the initialization prints on the serial port terminal. | . | When the DHCP client is enabled in the demonstration, wait for the DHCP server to assign an IP address for the development board. This will be printed on the serial port terminal. | . | Alternatively: Use ipconfig to get the IP address of the board and ping to test if the device is reachable. | . | An LED “LED2” on the SAM E54 Curiosity Ultra Development Board toggles when a motion is detected in front of the motion sensor (PIR click). | An JPEG format image with 320x240 resolution is captured and stored on the microSD Card. Check the logs in the terminal for the motion detection, start capture and saved image events. | Steps to preview the captured images: . | Step 1: Live streaming of captured images: . | An HTTP server is hosted by the demonstration application. Open a web browser and direct it to the board running the HTTP server by typing the URL in the address bar (for example, https://mchpboard_c or by entering the assigned IP address i.e. http://192.168.100.11/ in the URL bar), and then press Enter key. | On the loaded page, Go to the Motion Surveillance under the left Menu. | The following image shows how the Motion Surveillance page looks. When the motion sensor detects a motion, the captured images will be live previewed on this page. | . | Note: . | When the motion sensor detects a motion, the ArduCAM captures an image (resolution 320x240) and stores in web_pages/arducam folder on the microSD Card. | The maximum number of images that the application stores on the microSD Card is 255. If the number of images captured exceeds 255, the application overwrites the images from the beginning. User can increase the storage size based on the available free size of the microSD Card by changing the MAX_FILE_NAMES macro in the app_ardu_cam.h header file. | . | If any error (check logs in the terminal), reset the device or reload the page or click Motion Surveillance menu option. | . | . | Step 2: Preview the images stored on the microSD Card using Windows Photo Viewer application: . | Remove the microSD Card from the J704 socket (back side of the board) on SAM E54 Curiosity Ultra Development Board and insert into personal computer. | Goto web_pages/arducam folder and preview the captured images using any photo preview application. | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#running-the-surveillance-application-demo",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#running-the-surveillance-application-demo"
  },"1345": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#comments",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#comments"
  },"1346": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested application. | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 Created demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#revision",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html#revision"
  },"1347": {
    "doc": "Motion Surveillance on SAME54",
    "title": "Motion Surveillance on SAME54",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54c_motion_surveillance/readme.html",
    "relUrl": "/apps/sam_e54_cult/same54c_motion_surveillance/readme.html"
  },"1348": {
    "doc": "Live update on SAME54",
    "title": "Live Update Application on SAM E54 Curiosity Ultra Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#live-update-application-on-sam-e54-curiosity-ultra-development-board",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#live-update-application-on-sam-e54-curiosity-ultra-development-board"
  },"1349": {
    "doc": "Live update on SAME54",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html"
  },"1350": {
    "doc": "Live update on SAME54",
    "title": "Description:",
    "content": "The Live update application uses the dual bank flash feature available on the SAME54 Microcontrollers (MCUs). The banks on SAME54 MCU are named as BANK-A and BANK-B. At any point in time, the application considers the bank on which it is currently executing as an active bank while the other bank is marked as an inactive bank. The dual bank flash enables programming the inactive bank with a new version of the firmware while running the current version of the firmware from the active bank. The application updates the new version of the firmware to the inactive bank while the current version of the firmware runs from the active bank. The Application Task checks the NVM Control status register to identify the flash bank which has the latest version of the firmware (active bank) and toggles a specific LED at a periodic rate. For example, when there is no Live update then the LED1 is toggled for every 500ms if the application running from BANK-A else 1000ms if it is running from BANK-B. When there is a Live update request from the Host PC, after receiving the firmware image, the LED1 stops toggling and LED2 starts toggling with the toggle rate same as LED1. After a successful Live update i.e., by pressing the SW2, the device swaps the banks and resets. Then the LED2 stops toggling and LED1 starts toggling. Here, you can observe the change in the LED1 toggle rate after firmware upgrade. For example, the LED1 is toggled for every 500ms if the application running from BANK-A else 1000ms if it is running from BANK-B. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#description",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#description"
  },"1351": {
    "doc": "Live update on SAME54",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | NVMCTRL | DSU | SYSTICK | SERCOM | Harmony Core | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#modulestechnology-used"
  },"1352": {
    "doc": "Live update on SAME54",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Curiosity Ultra Development Board | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#hardware-used"
  },"1353": {
    "doc": "Live update on SAME54",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_cult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | Windows command prompt | Python 3.8.0 | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#softwaretools-used"
  },"1354": {
    "doc": "Live update on SAME54",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same54_uart_live_update/firmware/sam_e54_cult.X) in MPLAB X IDE | Ensure “SAM E54 Curiosity Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#programmingdebugging-application-project"
  },"1355": {
    "doc": "Live update on SAME54",
    "title": "Running the Bootloader application:",
    "content": "For the first time, the Live update application is programmed by using either Harmony basic bootloader or Harmony fail-safe bootloader. | Download the MPLAB Harmony Bootloader package. | Download the MPLAB Harmony UART Bootloader Applications package. | Connect a micro USB cable to the DEBUG port of the SAM E54 Curiosity Ultra Development Board. | Open the UART Fail Safe Bootloader which is in (path: &lt;Your Harmony Framework download folder&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X) using the MPLAB X IDE. | The project needs to be reconfigured to work on SAM E54 Curiosity Ultra Development Board. Launch the MCC and follow below steps to reconfigure for SAM E54 Curiosity Ultra Development Board. | Remove SERCOM2 | . | Add SERCOM1 to Project Graph | . | Configure SERCOM1 peripheral | . | Launch Pin Configurations plugin under MCC-&gt;Tools-&gt;Pin Configurations. Remove SERCOM2 Pin configurations. | . | Configure SERCOM1 pins. | . | Note: . | The SAM E54 Curiosity Ultra Development Board uses SERCOM1 peripheral for EDBG. Hence SERCOM peripheral and its pins need to be reconfigured from SAM E54 Xplained Pro to SAM E54 Curiosity Ultra Development Board. | Do not close the MCC as we have to build the project again. | . | . | Regenerate the project. Build and program the UART Fail Safe Bootloader using the MPLAB X IDE. | The following shows the steps to rebuild the UART Fail Safe Bootloader using the MPLAB X IDE. This step is to create Bootloader binary image which will be merged with Live Update application to create a single binary image as shown in Step 10. | Remove the Device Fuse configurations from the custom linker script as they will be updated by the UART Fail Safe Bootloader project | . | Enable Execute this line After Build option in the MPLAB X Project properties-&gt;Building option | . | Regenerate the project | . | Build the UART Fail Safe Bootloader application again using the MPLAB X IDE but do not program. | This is required to generate the binary file for Bootloader application | . | Build the Live update application (path: &lt;Live Update application folder&gt;/firmware/sam_e54_cult.X) using the MPLAB X IDE but do not program. | Run the btl_app_merge_bin.py script from command prompt to merge the generated Bootloader binary and Live update application binary. | python &lt;Your Harmony Framework download folder&gt;/bootloader/tools/btl_app_merge_bin.py -o 0x2000 -b &lt;Your Harmony Framework download folder&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X/dist/&lt;Config Name&gt;/production/&lt;Project Name&gt;.production.bin -a &lt;Live Update application folder&gt;/hex/sam_e54_cult.X.production.bin | Below output should be displayed on command prompt. | . | Run the btl_host.py from command prompt to program the merged binary to opposite panel. The merged binary btl_app_merged.bin will be generated in the path from where the btl_app_merge_bin.py was called from. | python &lt;Your Harmony Framework download folder&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d same5x -a 0x00080000 -f btl_app_merged.bin | Note: . | If you need to know more information on the bootloader host script, refer help for setting up the host script available at &lt;Your Harmony Framework download folder&gt;/bootloader/doc/help_bootloader.chm and &lt;Your Harmony Framework download folder&gt;/bootloader_apps_uart/docs/index.html | . | . | Following screenshot shows successful programming of the application binary. | The messages “Swapping Bank And Rebooting and Reboot Done” in below screenshot signifies that bootloading is successful. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#running-the-bootloader-application",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#running-the-bootloader-application"
  },"1356": {
    "doc": "Live update on SAME54",
    "title": "Running the Live update application:",
    "content": ". | Perform “Running the Bootloader application” steps mentioned above, if not done already. | If the above step is successful, then LED1 should start blinking on the SAM E54 Curiosity Ultra Development Board. | Run the host script “live_update.py” from command prompt available at &lt;Live Update application folder&gt;/scripts to program the new version of the firmware to an inactive panel while the current version of the application is being run from the active panel. | python &lt;Live Update application folder&gt;/scripts/live_update.py -v -i &lt;COM PORT&gt; -d same5x -a &lt;Address&gt; -f btl_app_merged.bin. The merged binary btl_app_merged.bin will be generated in the path from where the btl_app_merge_bin.py was called from. | Note: If you need to know more information on the Live Update Script, Open command prompt, goto &lt;Live Update application folder&gt;/scripts then enter python live_update.py --help. The below output shows the Live Update Script help. Below output should be displayed on command prompt. | . | LED1 stops blinking and LED2 starts blinking which indicates the application programming is successful. | LED1 stops blinking and LED2 toggles for every 500ms then Application is running from BANK A | LED1 stops blinking and LED2 toggles for every 1000ms then Application is running from BANK B | . | Press Switch SW2 to swap the bank and reset the device for the programmed application firmware to run. | LED2 stops blinking and LED1 toggles for every 500ms then Application is running from BANK A | LED2 stops blinking and LED1 toggles for every 1000ms then Application is running from BANK B | . | In case of any error during the Live update both LED1 and LED2 will be turned ON. Follow the below steps recover from the error. | Press and hold the Switch SW2 to reset the system then repeat the step 4 to program the Live update application. OR | Reset or Power cycle the device and repeat from the step 4 to program the Live update application. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#running-the-live-update-application",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#running-the-live-update-application"
  },"1357": {
    "doc": "Live update on SAME54",
    "title": "Comments:",
    "content": ". | Reference Application Note: Live Update application on SAME54 MCUs using MPLAB Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#comments",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#comments"
  },"1358": {
    "doc": "Live update on SAME54",
    "title": "Revision:",
    "content": ". | v1.6.0 Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 regenerated and tested demo application | v1.2.0 regenerated and tested demo application | v1.1.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html#revision",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html#revision"
  },"1359": {
    "doc": "Live update on SAME54",
    "title": "Live update on SAME54",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/same54_uart_live_update/readme.html",
    "relUrl": "/apps/sam_e54_cult/same54_uart_live_update/readme.html"
  },"1360": {
    "doc": "SAM E54 Curiosity Ultra Development Board",
    "title": "SAM E54 Curiosity Ultra Development Board",
    "content": ". This repository contains the MPLAB® Harmony 3 reference applications developed on SAM E54 Curiosity Ultra Development Board . | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | Live Update | Click Here | . | 3 | Motion Surveillance | Click Here | . More Application Demos . For more application demos on SAM E54 Curiosity Ultra Development Board and other Development Boards/Kits having the same part number (ATSAME54P20A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_cult/readme.html",
    "relUrl": "/apps/sam_e54_cult/readme.html"
  },"1361": {
    "doc": "CAN USB bridge",
    "title": "CAN to USB bridge and CAN based NVM bootloader Host Application using SAM E54 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#can-to-usb-bridge-and-can-based-nvm-bootloader-host-application-using-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#can-to-usb-bridge-and-can-based-nvm-bootloader-host-application-using-sam-e54-xplained-pro-evaluation-kit"
  },"1362": {
    "doc": "CAN USB bridge",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html"
  },"1363": {
    "doc": "CAN USB bridge",
    "title": "Description:",
    "content": "This application acts as a CAN-USB bridge along with CAN based NVM bootloader host application. With CAN-USB bridge functionality, it reads the data transmitted on a CAN network via the CAN peripheral and displays it on the PC serial terminal window using the USB CDC virtual COM port. With CAN NVM bootloader host functionality, it sends the binary image from the Python script to the target over the CAN bus for programming. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#description",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#description"
  },"1364": {
    "doc": "CAN USB bridge",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | CAN | USB | . | Core | Drivers . | USB Full Speed Driver | . | Libraries . | USB Device Stack | Bootloader | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#modulestechnology-used"
  },"1365": {
    "doc": "CAN USB bridge",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit | To connect three nodes, terminate the CANL and CANH lines with 120ohm. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#hardware-used"
  },"1366": {
    "doc": "CAN USB bridge",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | Python (from versions 3.9) with the following modules already installed, serial, struct, os, optparse, math, future | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#softwaretools-used"
  },"1367": {
    "doc": "CAN USB bridge",
    "title": "Setup:",
    "content": "Hardware setup with three nodes: . Host Development Kit: CAN Node with the Host application (SAME54 Xplained Pro) . Target Development Kits: Two CAN Nodes, each programmed with Bootloader of different node ID(SAME54 Xplained Pro) . Hardware setup with two nodes: . Host Development Kit: CAN Node with the Host application (SAME54 Xplained Pro) . Target Development Kit: CAN Node programmed with Bootloader of node ID 0x45A (SAME54 Xplained Pro) . | Connect a micro-USB cable from the PC to the DEBUG USB port of the Host development kit to power the board and for programming and debugging. | Connect another micro-USB cable from the PC to the Target USB port of the Host development kit, this is for the USB Communication (USB CDC Virtual COM Port). | Connect a micro-USB cable from the PC to the DEBUG USB port of the Target development kit to power the board and for programming and debugging. | Connect the ground and CAN lines - CANH and CANL from the Host development kit to the Target development kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#setup",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#setup"
  },"1368": {
    "doc": "CAN USB bridge",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#programming-hex-file"
  },"1369": {
    "doc": "CAN USB bridge",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same54_can_usb_bridge/firmware/can_usb_bridge_with_nvm_bootloader_host/firmware/sam_e54_xpro.X) in MPLAB X IDE. | Ensure “SAM E54 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Debugging the project can be done by clicking on the “Debug Main Project” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#programmingdebugging-application-project"
  },"1370": {
    "doc": "CAN USB bridge",
    "title": "Running the Demo:",
    "content": ". | After programming, the board should get detected as USB virtual COM port in the device manager. | Note: After programming using EDBG, we can unplug USB cable in DEBUG USB and use only TARGET USB for USB communication. In this case, ensure that current measurement jumpers are in bypass position like below. | Open the Teraterm terminal window on your PC, select the USB Virtual COM port . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#running-the-demo"
  },"1371": {
    "doc": "CAN USB bridge",
    "title": "Testing the datalogger Mode:",
    "content": "| Transmit CAN messages from the connected CAN nodes(Target).Use the CAN FD interrupt example to program the target(Refer comments below). Open the terminal to send the CAN FD messages.(from the target) . | See the data logging happening on the USB-CAN Bridge(Host) USB terminal window. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#testing-the-datalogger-mode",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#testing-the-datalogger-mode"
  },"1372": {
    "doc": "CAN USB bridge",
    "title": "Testing the Configurations:",
    "content": "| Type “CONF” or “conf” to view the configuration options in the Host. In case of mistyping, Invalid input is displayed on the terminal. Note: Enable the local echo option in the terminal application that you use to see the character being typed. | Enter the choice of mode to perform either CAN bit rate change or firmware update. | Select “Change CAN bit rates” to change the nominal bit rate and the data bit rate as per application requirement. | Select the “Programming mode” to program the MCU. | After selecting the programmer mode, choose which node to program based on the node ID(Select option 1). LED0 on the host development kit will be turned OFF once the choice of the node is entered. Note: Make sure the connected node is programmed with the bootloader of same CAN node ID 0x45A. For CAN bootloader, refer to the can_bootloader/bootloader/firmware in bootloader_apps_can. By default, this CAN bootloader is configured with ID 0x45A. | Close the Terminal application and run the Python script to parse your hex file. (Note: Programming example shown for test_app_can.bin file which is present in the folder. This test application gets the input from user via EDBG virtual COM port and sends the CAN messages accordingly. Also,it provides options for changing CAN bit rates and bootloader trigger. So,open the target development kit’s Virtual COM port before parsing the hex file) . | . Below is the syntax and an example of running the Python script . python &lt;harmony-3 path&gt;/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/programming_script.py -b &lt;binary_file&gt; . python &lt;harmony-3 path&gt;/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/programming_script.py -b &lt;harmony-3 path&gt;/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/hex/test_app_can/sam_e54_xpro.X.production.bin . (Note: Make sure the mentioned Python modules on the Software library section are installed before running the python script) . | Enter the COM port number of the USB-CAN Bridge. | Press the SW0 button in the host development kit to program the CAN node with the test_app_can .bin file. | Once the programming is complete, . | LED0 on the Host development kit will be turned on indicating success. | The target development kit will be reset. Upon re-start, the bootloader will jump to the user application. | Now, you can see the CAN FD Demo with options for transmitting CAN messages in the target development kit console. | . | Select an option of a CAN message to be transmitted to the bridge. | See the data being logged in the host development kit console . (Note: Both the nodes have a default nominal bitrate of 500 and data bitrate of 3000) . | CAN bit rates can be changed by using option 5 in this application.Try changing the CAN bit rates from the node and check the datalogging.Make sure the same CAN bit rates are configured in the Host Development kit. | . If you are connecting third node (TARGET DEVELOPMENT KIT 2) in this setup , program this node with bootloader of different node ID(say 0x45B) and follow the above procedure for programming the application bin file. To change the CAN node ID in the bootloader, change the Standard Filter 1 configurations of CAN1 in MCC. After generating the project in MCC, change the CAN_FILTER_ID in bootloader_can.c file available in the bootloader project. You can also use a different test application test_app_led which is present in same54_can_usb_bridge/firmware folder. Make sure host development kit is reset before programming third node.  . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#testing-the-configurations",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#testing-the-configurations"
  },"1373": {
    "doc": "CAN USB bridge",
    "title": "Comments:",
    "content": ". | Reference Applications: . | CAN FD interrrupt. This demo can be used as a CAN node to connect to the SAM E54 Xplained Pro Evaluation Kit. | Harmony 3 USB Device application examples | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#comments",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#comments"
  },"1374": {
    "doc": "CAN USB bridge",
    "title": "Revision:",
    "content": ". | v1.6.0 - Updated application to add CAN Host Bootloader functionality | v1.5.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#revision",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html#revision"
  },"1375": {
    "doc": "CAN USB bridge",
    "title": "CAN USB bridge",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_can_usb_bridge/readme.html"
  },"1376": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "File Transfer Protocol - Client Application on SAM E54 Xplained Pro Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#file-transfer-protocol---client-application-on-sam-e54-xplained-pro-development-board",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#file-transfer-protocol---client-application-on-sam-e54-xplained-pro-development-board"
  },"1377": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html"
  },"1378": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Description:",
    "content": "FTP Client implementation using MPLAB Harmony v3 TCP/IP stack in the SAME54 microcontroller. FTP client demonstration implements an Ethernet bootloader using FTP through which it downloads an application binary from an FTP server and upgrades the firmware by self-programming. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#description",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#description"
  },"1379": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | NVMCTRL | SERCOM2 (USART) | SERCOM4 (SPI) | Harmony Core | SDHC | Timer (TC0) | . | Drivers . | SD Card SPI Driver | . | System Services . | DEBUG | Command | File System | Time | Console | . | Middleware libraries . | TCP/IP Stack | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#modulestechnology-used"
  },"1380": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit | IO1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#hardware-used"
  },"1381": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_xpro . | Refer the Release Notes to know the MPLAB X IDE and MHC/MCC Plugin version. | Any Serial Terminal application like Tera Term terminal application. | Windows command prompt | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#softwaretools-used"
  },"1382": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Setup:",
    "content": ". | Insert microSD Card in the IO1 Xplained Pro. The microSD at this client would store the application binary file which will be downloaded from the server. | Connect the IO1 Xplained Pro to the Extension 1 of the SAM E54 Xplained Pro Evaluation Kit. | Connect the micro USB cable from the computer to the DEBUG USB connector on the SAM E54 Xplained Pro Development Kit as shown in the below image. | Connect the RJ45 cable from SAM E54 Xplained Pro Evaluation Kit’s Ethernet Port (Client) to Server’s Ethernet Port. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#setup",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#setup"
  },"1383": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#programming-hex-file"
  },"1384": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project(ftp_sam_e54/sam_e54_ftp_client/firmware/ftp_client_sam_e54_xpro.X) in MPLAB X IDE | Ensure “SAM E54 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the devices by clicking on the “Make and Program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#programmingdebugging-application-project"
  },"1385": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Running the Demo:",
    "content": "FTP Client Connect . | From a terminal window application (like Tera Term), connect to the COM port enumerated by SAM E54 Xplained Pro evaluation kit. | Restart the application (i.e reset the SAM E54 Xplained Pro Evaluation Kit) | The IP address will be displayed on the terminal once it is ready. Now, user can connect to the FTP server . | Type “ftpc connect ” . | . | Upon successful connection, enter the login details . | Type “ftpc login ” . | . | Once logged in, use ftpc get command to download a binary from the server . | Type “ftpc get -a -a ” | . | After the binary is successfully downloaded it can be flashed to the MCU by using the ‘boot’ command. | MCU is reset after the programming is complete and test application code starts executing. | . Output . -Please make sure the tera term baud rate to be 115200 for seeing the output properly. - . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#running-the-demo"
  },"1386": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Comments:",
    "content": ". | Reference Application Note: File Transfer Protocol using MPLAB Harmony v3 TCP/IP Stack | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#comments",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#comments"
  },"1387": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "Revision:",
    "content": ". | v1.6.0 Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html#revision",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html#revision"
  },"1388": {
    "doc": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "title": "File Transfer Protocol - Client Using MPLAB Harmony v3 TCP/IP Stack",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_client/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_client/readme.html"
  },"1389": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "File Transfer Protocol - Server application on SAM E54 Xplained Pro Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#file-transfer-protocol---server-application-on-sam-e54-xplained-pro-development-board",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#file-transfer-protocol---server-application-on-sam-e54-xplained-pro-development-board"
  },"1390": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html"
  },"1391": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Description:",
    "content": "FTP Server implementation using MPLAB Harmony v3 TCP/IP stack in the SAME54 microcontroller. FTP Server configuration demonstrates creating an application where FTP server will use FATFS with SDCARD as media through the IO1 Xplained Pro extension kit. The FAT FS File System is used for storing any type of files and FTP server will read from and write to this File system. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#description",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#description"
  },"1392": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | NVMCTRL | SERCOM2 (USART) | SERCOM4 (SPI) | Harmony Core | SDHC | Timer (TC0) | . | Drivers . | SD Card SPI Driver | . | System Services . | DEBUG | Command | File System | Time | Console | . | Middleware libraries . | TCP/IP Stack | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#modulestechnology-used"
  },"1393": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit | IO1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#hardware-used"
  },"1394": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_xpro . | Refer the Release Notes to know the MPLAB X IDE and MHC/MCC Plugin version. | Any Serial Terminal application like Tera Term terminal application. | Windows command prompt | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#softwaretools-used"
  },"1395": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Setup:",
    "content": ". | Insert the SD Card in the IO1 Xplained Pro. The microSD at the Server will be FAT FS File system, that can store all files, which can be downloaded by client (or) client can upload a file to this storage Media. | Connect the IO1 Xpro to EXT1 of the SAM E54 Xplained Pro Evaluation Kit. | Connect the micro USB cable from the computer to the DEBUG USB connector on the SAM E54 Xplained Pro Kit as shown in the below image. | Connect the RJ45 cable from SAM E54 Xplained Pro Evaluation Kit’s Ethernet Port (Server) to Client’s Ethernet Port. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#setup",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#setup"
  },"1396": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#programming-hex-file"
  },"1397": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project(ftp_sam_e54/sam_e54_ftp_server/firmware/ftp_server_sam_e54_xpro.X) in MPLAB X IDE | Ensure “SAM E54 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the devices by clicking on the “Make and Program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#programmingdebugging-application-project"
  },"1398": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Running the Demo:",
    "content": "Verifying FTP Server application separately with PC (Client) . | Configure the PC with any static IP address | Open the command prompt in PC (Client) and enter the FTP Server IP Address. | Note: Any FTP Client software with this FTP Server can be used. | . | Connect to this FTP Server through the configured IP address (192.168.1.12). | Enter login credentials (username &amp; password) once connected | Once Logged in, enter required ftp commands and perform required operations. | The output of uploading and downloading single file between client and server is shown below. | Note: For the attached application demo the below are the credentials . | FTP Server IP: 192.168.1.12 | Username: Microchip | Password: Harmony | . | . | The path of file for sending/receiving in the host(client) would be c:/users/local pc account. By going to this location and verify the downloaded file from the FTP server (SAM E54 Xpro board). | . Output . -Once FTP server application is programmed in the SAM E54 Xplained Pro Evaluation Kit, The initialization status of the TCP/IP stack is seen in the tera term window, also file system mounting status and GMAC IP address are listed in tera term console. Please make sure the tera term baud rate to be 115200 for seeing the output properly. | . -Use PC’s command prompt for verification of upload and download the files from FTP server . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#running-the-demo"
  },"1399": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Comments:",
    "content": ". | Reference Application Note: File Transfer Protocol using MPLAB Harmony v3 TCP/IP Stack | TCP/IP WEB-NET &amp; FTP SERVER Running Application documentation | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#comments",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#comments"
  },"1400": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "Revision:",
    "content": ". | v1.6.0 Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html#revision",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html#revision"
  },"1401": {
    "doc": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "title": "File Transfer Protocol - Server Using MPLAB Harmomy v3 TCP/IP Stack",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_ftp_server/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_ftp_server/readme.html"
  },"1402": {
    "doc": "Getting Started",
    "title": "Getting Started Application on SAM E54 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#getting-started-application-on-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#getting-started-application-on-sam-e54-xplained-pro-evaluation-kit"
  },"1403": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html"
  },"1404": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to 1 second, 2 seconds, 4 seconds and back to 500 milliseconds every time you press the switch SW0 on the SAM E54 Xplained Pro Evaluation Kit. Also, LED0 is toggled every time temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#description",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#description"
  },"1405": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | RTC | DMAC | SERCOM(I2C) | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#modulestechnology-used"
  },"1406": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#hardware-used"
  },"1407": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#softwaretools-used"
  },"1408": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E54 Xplained Pro Evaluation Kit | The SAM E54 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM E54 Xplained Pro Evaluation Kit . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#setup",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#setup"
  },"1409": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#programming-hex-file"
  },"1410": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same54_getting_started\\firmware\\\\sam_e54_xpro.X) in MPLAB X IDE | Ensure “SAM E54 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#programmingdebugging-application-project"
  },"1411": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM E54 Xplained Pro Evaluation Kit to change the default sampling rate to one second | Every subsequent pressing of switch SW0 on SAM E54 Xplained Pro Evaluation Kit changes the default sampling rate to two seconds, four seconds and 500 ms and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#running-the-demo"
  },"1412": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#comments"
  },"1413": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html#revision"
  },"1414": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started/readme.html"
  },"1415": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Getting Started with Harmony v3 Drivers on SAM E54 MCU Using FreeRTOS",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#getting-started-with-harmony-v3-drivers-on-sam-e54-mcu-using-freertos",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#getting-started-with-harmony-v3-drivers-on-sam-e54-mcu-using-freertos"
  },"1416": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html"
  },"1417": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM. When a character is entered on the console, the last five written temperature values are read from the EEPROM and displayed on the console. Also, an LED0 is toggled every time the temperature is displayed on the serial console . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#description",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#description"
  },"1418": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | SERCOM(I2C) | SERCOM(USART) | . | Drivers . | SERCOM(I2C) | USART | . | Third Party Libraries . | FreeRTOS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#modulestechnology-used"
  },"1419": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#hardware-used"
  },"1420": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#softwaretools-used"
  },"1421": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E54 Xplained Pro Evaluation Kit | The SAM E54 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#setup",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#setup"
  },"1422": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#programming-hex-file"
  },"1423": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same54_getting_started/firmware/drivers_freertos_sam_e54_xpro.X) in MPLAB X IDE | Ensure “SAM E54 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#programmingdebugging-application-project"
  },"1424": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every second, as shown below . | Also, notice the LED0 blinking at one second rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press any key to display the last five written temperature values from the EEPROM | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#running-the-demo"
  },"1425": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#comments",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#comments"
  },"1426": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Updated the hardware setup image, Added MCC support, Regenerated and tested application. | v1.3.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#revision",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html#revision"
  },"1427": {
    "doc": "Getting Started with Drivers using FreeRTOS",
    "title": "Getting Started with Drivers using FreeRTOS",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_getting_started_freertos/readme.html"
  },"1428": {
    "doc": "Low Power",
    "title": "Low Power Application on SAM E54 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#low-power-application-on-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#low-power-application-on-sam-e54-xplained-pro-evaluation-kit"
  },"1429": {
    "doc": "Low Power",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html"
  },"1430": {
    "doc": "Low Power",
    "title": "Description",
    "content": "The application demonstrates, on power-up, the device is set to Standby Sleep mode. The device wakes up from Standby mode and enters Active mode when you cover the light sensor (by placing a hand over it, for example) on the I/O1 Xplained Pro extension kit. The application periodically prints room temperature on a serial terminal while the light sensor is covered. The device goes back to Standby mode when you uncover the light sensor. LED0 in the SAM E54 evaluation kit is toggled every time the temperature is displayed on the serial console. When you press the switch button SW0, the application switches Sleep mode from Standby mode to Idle mode. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#description",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#description"
  },"1431": {
    "doc": "Low Power",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | RTC | USART | DMAC | ADC1 | PM | SUPC | EIC | EVSYS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#modulestechnology-used"
  },"1432": {
    "doc": "Low Power",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#hardware-used"
  },"1433": {
    "doc": "Low Power",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | Data Visualizer | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#softwaretools-used"
  },"1434": {
    "doc": "Low Power",
    "title": "Setup:",
    "content": ". | Connect the I/O1 Xplained Pro extension kit to the Extension Header 1 (EXT1) of the SAM E54 Xplained Pro evaluation kit | Connect a USB cable to the DEBUG USB port for programming . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#setup",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#setup"
  },"1435": {
    "doc": "Low Power",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#programming-hex-file"
  },"1436": {
    "doc": "Low Power",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same54_low_power\\firmware\\\\sam_e54_xpro.X) in MPLAB X IDE. | Ensure “SAM E54 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#programmingdebugging-application-project"
  },"1437": {
    "doc": "Low Power",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | Perform reset by pressing the “RESET” switch | Verify the application title message is displayed . | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to print the temperature and message on the terminal. You should see the following messages (containing the temperature value in °F) on the terminal every 500 milliseconds for the duration the light sensor is covered | Observe Current Consumption on Data Visualizer Note: The Data Visualizer is a program to process and visualize data. The Data Visualizer can receive data from various sources such as the Embedded Debugger Data Gateway Interface (EDBG DGI) and COM ports. It is possible to track an application in run-time using a terminal graph or oscilloscope. It analyzes the power consumption of an application through correlation of code execution and power consumption when used together with a supported probe or board. | Open the Data Visualizer application from your PC and select the connected SAM E54 Xplained Pro B board on the DGI Control Panel, then click on Connect. The Data Visualizer will then start searching for protocols from the SAM E54 Xplained Pro board through the EDBG . | Once the Data Visualizer is connected to the SAM E54 EDBG, different interfaces will appear. Select the Power interface and click on the Start button to start measuring the power consumption of the device | Ensure that the jumpers for Current Measurement on the SAM E54 Xplained Pro are set to MEASURE for the MCU and BYPASS for the I/Os | The Power Analysis window will appear on the Data Visualizer tool interface | The step image shows the device in Standby mode with its measured power consumption. You can observe small peaks that illustrate the 500 milliseconds Real-Time Clock (RTC) timer expiry Note: The average value is considered when measuring the power consumption of the device because the instant value is not stable. Then, the power consumption of the device in Standby mode is 225.0 µA. | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element) to print the temperature on the terminal and observe the power consumption of the device | Press the SW0 button to switch from Standby mode to Idle mode. The following image shows the transition of the power consumption from Standby mode to Idle mode | The following image shows the device in Idle mode with a measured power consumption of 1869.5 µA Note: You can observe that the small peaks coming from RTC timer expiry disappeared because the power consumption in Idle mode is higher than the power required to start ADC conversion. | Place your hand over the light sensor. The device will wake up on the next ADC window monitor interrupt, read and print data on serial and then re-enter Standby mode. The following image shows the transition of the power consumption by switching from Idle mode to Standby mode Note that the above results highlight the power consumption is lower in Standby mode than in Idle mode. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#running-the-demo"
  },"1438": {
    "doc": "Low Power",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Low Power Application on SAM E54 (Arm® Cortex® M4) MCUs Using MPLAB® Harmony v3 Peripheral Libraries | Getting Started with Harmony v3 Drivers on SAM E54 MCUs Using FreeRTOS | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#comments",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#comments"
  },"1439": {
    "doc": "Low Power",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html#revision",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html#revision"
  },"1440": {
    "doc": "Low Power",
    "title": "Low Power",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_low_power/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_low_power/readme.html"
  },"1441": {
    "doc": "Vending Machine",
    "title": "Vending Machine Application on SAM E54 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#vending-machine-application-on-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#vending-machine-application-on-sam-e54-xplained-pro-evaluation-kit"
  },"1442": {
    "doc": "Vending Machine",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html"
  },"1443": {
    "doc": "Vending Machine",
    "title": "Description:",
    "content": "The application implements an embedded network application to update and track drinks status of a Vending Machine (VM). | The SAM E54 Xplained Pro Evaluation Kit will act as a HTTP-Server to keep track of the items in the Vending Machine. | The HTTP-Client (PC web page) talks to the HTTP-server and displays the status of the Vending Machine. | The OLED1 Xplained Pro extension kit will act man machine interface (MMI) to select and confirm drinks with buttons (up/down and select) and an OLED displays VM information. | The VM application uses Button 1 (Down) and Button 2 (Up) to scroll through the VM items and Button 3 to select an item from the Vending Machine. | The LEDs above the button indicates a button press with a blink. | The OLED (128 x 32) is used to display the drink name and their corresponding number of the items in a Vending Machine. | When Button 3 (Select) is pressed the HTTP-Server will decrement the count of an item and updates the HTTPClient(Web page) through ethernet interface. | . | When a Bay of a VM is empty it sends out a message to a specific TCP server. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#description",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#description"
  },"1444": {
    "doc": "Vending Machine",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | TC | NVMCTRL | SERCOM(SPI) | SERCOM(USART) | . | Driver Modules . | MEMORY | I2C Driver | . | System service . | TIME | CONSOLE, DEBUG, COMMAND | . | Libraries . | TCP/IP stack | Microchip File System (together with MPFS utility) | . | Third Party Library . | FreeRTOS | . | gfx mono library (from ASF) | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#modulestechnology-used"
  },"1445": {
    "doc": "Vending Machine",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit | OLED1 Xplained Pro extension kit | Cat 5 Ethernet Cable | USB Male A to USB Male B Micro Cable | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#hardware-used"
  },"1446": {
    "doc": "Vending Machine",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | Any TCP/IP debug application, such as Hercules SETUP utility - useful serial port terminal (RS-485 or RS-232 terminal) , UDP/IP terminal and TCP/IP Client Server terminal. Produced by www.HW-group.com. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#softwaretools-used"
  },"1447": {
    "doc": "Vending Machine",
    "title": "Setup:",
    "content": ". | Connect the OLED1 Xplained Pro extension kit to Extension Header 1 (EXT1) on the SAM E54 Xplained Pro Evaluation Kit | Establish a connection between the router/switch with the SAM E54 Xplained Pro Evaluation Kit through the RJ45 connector. Make sure your PC is connected to the same router/switch. | Connect the micro USB cable from the computer to the DEBUG USB connect on the SAM E54 Xplained Pro Evaluation Kit . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#setup",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#setup"
  },"1448": {
    "doc": "Vending Machine",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#programming-hex-file"
  },"1449": {
    "doc": "Vending Machine",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (same54_vending_machine\\firmware\\\\sam_e54_xpro.X) in MPLAB X IDE | Ensure “EDBG” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#programmingdebugging-application-project"
  },"1450": {
    "doc": "Vending Machine",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC, select the virtual COM port of SAM E54 Xplained Pro Evaluation Kit, and change the baud rate to 115200 | You should see the text on the OLED screen in series like the screens below: | You should see demo information and IP address (after DHCP success) in Tera Term terminal, as shown below: | Open a web browser and enter the HTTP- Server IP address (e.g. http://192.168.1.101) that you got on the tera term in the previous step. Click on the ‘Vending Machine’ tab to see the page for the Vending Machine Demo. | Use the Button 1 and Button 2 on the OLED1 Xplained Pro to scroll through the items of the Vending Machine. Use the Button 3 on the OLED to pick an item from the VM. The count of the corresponding item on the OLED screen will be decremented by 1 and is reflected on the Web page as well as on the OLED screen. | Run Hercules SETUP utility, and start TCP Server to listen on Port 80 . | Note: you need to update source code in app.c to fill your PC’s IP address that running this TCP Server | . | Press the select Button 3 and make one or more item to zero count. After few second, you will see this screen to notice bay empty (e.g. item 1. coca-cola). | In ‘Vending Machine’ webpage, you can pick an ITEM and change the COUNT to a new number, then press UPDATE to confirm. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#running-the-demo"
  },"1451": {
    "doc": "Vending Machine",
    "title": "Comments:",
    "content": ". | Reference Training Module: . | Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | Create your first tcpip application | Look MPLAB Harmony TCP/IP Help documentaion for Harmony 3 Net APIs and how to use MPFS utility to generate MPFS image of web pages. | . | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#comments",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#comments"
  },"1452": {
    "doc": "Vending Machine",
    "title": "Revision:",
    "content": ". | v1.6.0 Regenerated and tested application | v1.5.0 Removed MHC support, regenerated and tested application | v1.4.0 Added MCC support, regenerated and tested application | v1.3.0 Regenerated and tested application | v1.2.0 Regenerated and tested application | v1.1.0 Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html#revision",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html#revision"
  },"1453": {
    "doc": "Vending Machine",
    "title": "Vending Machine",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/same54_vending_machine/readme.html",
    "relUrl": "/apps/sam_e54_xpro/same54_vending_machine/readme.html"
  },"1454": {
    "doc": "SleepWalking",
    "title": "SleepWalking Application on SAM E54 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#sleepwalking-application-on-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#sleepwalking-application-on-sam-e54-xplained-pro-evaluation-kit"
  },"1455": {
    "doc": "SleepWalking",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html"
  },"1456": {
    "doc": "SleepWalking",
    "title": "Description:",
    "content": "This application demonstrates SleepWalking using the Event System. The application uses an ADC with a Window Monitoring feature in Standby mode for the following use cases: . | Standby mode with Interrupts (IRQ) | Standby mode with Event System (SleepWalking) On power up, the application is in STDBY_IRQ_MODE. It is possible to switch from STDBY_IRQ_MODE to STDBY_EVSYS_MODE by pressing the switch button (SW0) embedded on the SAM E54 Xplained Pro board. The application wakes up from Sleep mode and enters into ACTIVE_MODE when the embedded light sensor on the I/O1 Xplained Pro extension kit is covered. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#description",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#description"
  },"1457": {
    "doc": "SleepWalking",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | ADC | CMCC | DMAC | EVSYS | NVMCTRL | PM | RTC | SERCOM | SUPC | SYSTICK | . | STDIO Library | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#modulestechnology-used"
  },"1458": {
    "doc": "SleepWalking",
    "title": "Hardware Used:",
    "content": ". | SAM E54 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#hardware-used",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#hardware-used"
  },"1459": {
    "doc": "SleepWalking",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e54_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | Standalone Data Visualizer | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#softwaretools-used"
  },"1460": {
    "doc": "SleepWalking",
    "title": "Setup:",
    "content": ". | Ensure jumper to measure MCU current is set to MEASURE | Ensure jumper to measure I/O current is set to BYPASS | Connect the I/O1 Xplained Pro Extension Kit to the EXT XPRO connector 2 on the SAM E54 Xplained Pro Evaluation Kit | Connect the micro USB cable from the computer to the DEBUG USB connector on the SAM E54 Xplained Pro Evaluation Kit | | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#setup",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#setup"
  },"1461": {
    "doc": "SleepWalking",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME54P20A” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#programming-hex-file"
  },"1462": {
    "doc": "SleepWalking",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (sleepwalking\\firmware\\\\sam_e54_xpro.X) in MPLAB X IDE | Ensure “SAM E54 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#programmingdebugging-application-project"
  },"1463": {
    "doc": "SleepWalking",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term or any equivalent serial communication tool | In the Tera Term: New Connection window, select the Serial Port number allocated to the connected SAM E54 | Configure the Tera Term Serial port interface to 115200 speed | Reset the board by pressing the reset button. The application will start by displaying the following message on the serial terminal. | Open the standalone Data Visualizer tool | In the Data Visualizer window, select SAM E54 Xplained Pro, and then click Connect . | Once the protocols are displayed, select the protocol Power and then click Start . | The Data Visualizer will display the power consumption details in the Power Analysis window . | When the application starts, the device will run on Standby with IRQ mode. The data analyzer shows the power consumption of the device when the CPU is woken up every 10 milliseconds by an RTC Compare ‘0’ interrupt to start an ADC conversion | Using the SW0 push button, it is possible to change the application mode from Standby with IRQ to SleepWalking. In this mode the CPU is woken up only when an ADC window monitoring interrupt occurs. The data analyzer shows the power consumption of the device when running in Standby with the Event System (SleepWalking) | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#running-the-demo"
  },"1464": {
    "doc": "SleepWalking",
    "title": "Comments:",
    "content": ". | Reference Application Note: SleepWalking with Event System Using the SAM E54 | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM D5x/E5x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony . | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#comments",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#comments"
  },"1465": {
    "doc": "SleepWalking",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application | v1.2.0 - Regenerated and tested application | v1.1.0 regenerated and tested the demo application | v1.0.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html#revision",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html#revision"
  },"1466": {
    "doc": "SleepWalking",
    "title": "SleepWalking",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/sleepwalking/readme.html",
    "relUrl": "/apps/sam_e54_xpro/sleepwalking/readme.html"
  },"1467": {
    "doc": "SAM E54 Xplained Pro Evaluation Kit",
    "title": "SAM E54 Xplained Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM E54 Xplained Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | Getting Started with Drivers using FreeRTOS | Click Here | . | 3 | Low Power | Click Here | . | 4 | SleepWalking | Click Here | . | 5 | Vending Machine | Click Here | . | 6 | CAN USB Bridge | Click Here | . | 7 | File Transfer Protocol - Client Application | Click Here | . | 8 | File Transfer Protocol - Server application | Click Here | . More Application Demos . For more application demos on SAM E54 Xplained Pro Evalution Kit and other Development Boards/Kits having the same part number (ATSAME54P20A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e54_xpro/readme.html",
    "relUrl": "/apps/sam_e54_xpro/readme.html"
  },"1468": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Getting Started with Drivers and Middleware (USB) on SAM E70 Xplained Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#getting-started-with-drivers-and-middleware-usb-on-sam-e70-xplained-evaluation-kit",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#getting-started-with-drivers-and-middleware-usb-on-sam-e70-xplained-evaluation-kit"
  },"1469": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html"
  },"1470": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Description:",
    "content": "This application reads the current room temperature from the AT30TSE758A temperature sensor chip on the I/O1 Xplained Pro every second using I2C. This is indicated by a blinking orange LED on the I/O1 Xplained Pro. Further, it also writes these temperature values into the sensor chip’s own integrated EEPROM using the same I2C peripheral instance. The application also uses an ADC channel to read the output voltage of the TEMT6000 ambient light sensor on the I/O1 Xplained Pro Extension Kit and displays it as a percentage of the sensor’s full-scale output when requested through the serial terminal menu. The serial terminal menu is made available through the SAM E70 Xplained Evaluation Kit’s TARGET USB port by configuring it as a USB CDC class device. This menu allows you to fetch temperature, light sensor data and even toggle the LED on the SAME70 Xplained Evaluation Kit. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#description",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#description"
  },"1471": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | Timer | . | Drivers . | TWIHS(I2C) | USART | USB CDC | . | System Services . | Timer | . | Middleware . | USB Device Stack (USBHS) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#modulestechnology-used"
  },"1472": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Hardware Used:",
    "content": ". | SAM E70 Xplained Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#hardware-used",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#hardware-used"
  },"1473": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e70_xpld . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#softwaretools-used"
  },"1474": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E70 Xplained Evaluation Kit | The SAM E70 Xplained Evaluation Kit allows the Embedded Debugger (EDBG) to be used for programming and debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the SAM E70 Xplained Evaluation Kit. | Connect the Type-A male to micro-B USB cable to the micro-B TARGET USB port which is configured as USB CDC class device to test the demo. | Note: . | The kit can be powered from the EDBG USB or from the target USB. | The kit automatically selects a source to draw power. Priority is given to TARGET USB power input. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#setup",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#setup"
  },"1475": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#programming-hex-file"
  },"1476": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started_drivers_middleware/firmware/sam_e70_xult.X) in MPLAB X IDE | Ensure “SAM E70 Xplained” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#programmingdebugging-application-project"
  },"1477": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Configure the TARGET USB port in the Tera terminal application and change the baud rate to 115200 | Press “h” to show the Getting Started Menu. | 1 - Toggle board LED () | 2 - Show latest temperature value | 3 - Show past 5 temperature values from EEPROM | 4 - Show latest light sensor value | h - Show this menu | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#running-the-demo"
  },"1478": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with USB on SAM MCUs Using MPLAB® Harmony v3 | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#comments",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#comments"
  },"1479": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - regenerated and tested application | v1.2.0 - Created demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#revision",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html#revision"
  },"1480": {
    "doc": "Getting Started with Drivers and Middleware",
    "title": "Getting Started with Drivers and Middleware",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html",
    "relUrl": "/apps/sam_e70_xpld/getting_started_drivers_middleware/readme.html"
  },"1481": {
    "doc": "SAM E70 Xplained Evaluation Kit",
    "title": "SAM E70 Xplained Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM E70 Xplained Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . More Application Demos . For more application demos on SAM E70 Xplained Evaluation Kit and other Development Boards/Kits having the same part number (ATSAME70Q21B) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xpld/readme.html",
    "relUrl": "/apps/sam_e70_xpld/readme.html"
  },"1482": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "File Transfer Protocol Application on SAM E70 Xplained Ultra Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#file-transfer-protocol-application-on-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#file-transfer-protocol-application-on-sam-e70-xplained-ultra-evaluation-kit"
  },"1483": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html"
  },"1484": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Description:",
    "content": "This application demonstrates creating ethernet bootloader where an FTP client downloads a binary file from the FTP server, which in turn is used to program the microcontroller. The FAT-FS File System with SDCARD as storage media is used in the application and the FTP client will write to and read from this FS. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#description",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#description"
  },"1485": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | USART1 | Timer (TC0) | HSMCI | . | System Services . | DEBUG | Command | File System | Time | Console | . | Middleware libraries . | TCP/IP Stack | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#modulestechnology-used"
  },"1486": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Hardware Used:",
    "content": ". | SAM E70 Xplained Ultra Evaluation Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#hardware-used",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#hardware-used"
  },"1487": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#softwaretools-used"
  },"1488": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Setup:",
    "content": ". | Ensure the ERASE (J400) jumper is Open on SAM E70 Xplained Ultra Evaluation Kit | Open the J805 Jumper which on the ETHERNET PHY MODULE . | . | Insert the LAN8740 PHY daughter board on the ETHERNET PHY MODULE header | Connect the micro USB cable from the computer to the DEBUG USB connector on the SAM E70 Xplained Ultra Evaluation Kit | Establish a connection between the router/switch with the SAM E70 Xplained Ultra Evaluation Kit through the RJ45 connector | Copy test.bin from ftp_bootloader to microSD | Insert the microSD card into the microSD card slot on the backside of the hardware board | | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#setup",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#setup"
  },"1489": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#programming-hex-file"
  },"1490": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (ftp_bootloader\\firmware\\\\sam_e70_xult.X) in MPLAB X IDE | Ensure “SAM E70 Xplained Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#programmingdebugging-application-project"
  },"1491": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Running the Demo:",
    "content": "FTP Server Setup . | Before running the FTP client application, an FTP server should be setup. For this demonstration, the FileZilla Server Interface is used as the FTP server running on the user PC. Refer to https://wiki.filezilla-project.org/Documentation for more information on this | FileZilla Server setup: . | Open the FileZilla server interface | In the pop-up window, enter a hostname, port and password for admin interface. Click “Connect” | Click on User icon User or go to Edit-&gt;User for adding client | In the User window, click “General”. Add client by clicking “Add” option enable account and password. This will be the username and password for connecting from the FTP client | | In Shared folders, add the path of folder where the binary to be downloaded is located | | . | . FTP Client Connect . | From a terminal window application (like Tera Term), connect to the COM port enumerated by SAM E70 Xplained Ultra board | Restart the application (i.e reset the SAM E70 Xplained Ultra board) | The IP address will be displayed on the terminal once it is ready. Now, user can connect to the FTP server . | Type “ftpc connect ” . | . | Upon successful connection, enter the login details . | Type “ftpc login ” . | . | Once logged in, use ftpc get command to download a binary from the server . | Type “ftpc get -a -a ” | . | After the binary is successfully downloaded it can be flashed to the MCU by using the ‘boot’ command. | MCU is reset automatically after the programming is complete and application code starts executing. Displaying the message: ** Executing Application code ** | . Output . | | After MCU reset, the following message gets printed: | | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#running-the-demo"
  },"1492": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Comments:",
    "content": ". | Reference Application Note: File Transfer Protocol using MPLAB Harmony v3 TCP/IP Stack | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM E70 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony . | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#comments",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#comments"
  },"1493": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - regenerated and tested the application | v1.2.0 - regenerated and tested the application | v1.1.0 - regenerated and tested the application | v1.0.0 - released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html#revision",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html#revision"
  },"1494": {
    "doc": "Ethernet bootloader - File Transfer Protocol",
    "title": "Ethernet bootloader - File Transfer Protocol",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/ftp_bootloader/readme.html",
    "relUrl": "/apps/sam_e70_xult/ftp_bootloader/readme.html"
  },"1495": {
    "doc": "Getting Started with Drivers",
    "title": "Getting Started Application using Harmony v3 Drivers on SAM E70 Xplained Ultra Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#getting-started-application-using-harmony-v3-drivers-on-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#getting-started-application-using-harmony-v3-drivers-on-sam-e70-xplained-ultra-evaluation-kit"
  },"1496": {
    "doc": "Getting Started with Drivers",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html"
  },"1497": {
    "doc": "Getting Started with Drivers",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM. When a character is entered on the console, the last five written temperature values are read from the EEPROM and displayed on the console. Also, an LED (LED3) is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#description",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#description"
  },"1498": {
    "doc": "Getting Started with Drivers",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | USART | Timer | XDMAC | . | Drivers . | TWIHS(I2C | USART | . | System Services . | Timer | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#modulestechnology-used"
  },"1499": {
    "doc": "Getting Started with Drivers",
    "title": "Hardware Used:",
    "content": ". | SAM E70 Xplained Ultra Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#hardware-used",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#hardware-used"
  },"1500": {
    "doc": "Getting Started with Drivers",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e70_xult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#softwaretools-used"
  },"1501": {
    "doc": "Getting Started with Drivers",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E70 Xplained Ultra Evaluation Kit | The SAM E70 Xplained Ultra Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the SAM E70 Xplained Ultra Evaluation Kit. | . Hardware Modification: . | IO1 Xplained Pro features Microchip’s AT30TSE758 temperature sensor chip with an 8 kbit serial EEPROM. The temperature sensor has two TWI addresses: one for the temperature sensor and one for the EEPROM. The A2 address line of TWI must be soldered to 0. This is done to modify the address of the EEPROM on the I/O1 Xplained Pro Extension Kit so that it does not conflict with the address of EEPROM on SAM E70 Xplained Evaluation Kit. The modification changes the address of temperature sensor to 0x4B and EEPROM to 0x50. These modified addresses are used in this demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#setup",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#setup"
  },"1502": {
    "doc": "Getting Started with Drivers",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#programming-hex-file"
  },"1503": {
    "doc": "Getting Started with Drivers",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started_drv\\firmware\\\\drivers_sam_e70_xult.X) in MPLAB X IDE | Ensure “SAM E70 Xplained Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#programmingdebugging-application-project"
  },"1504": {
    "doc": "Getting Started with Drivers",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED3 blinking at 1 second rate | Press any character on the terminal to display the last five values written to the EEPROM | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#running-the-demo"
  },"1505": {
    "doc": "Getting Started with Drivers",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Drivers and System Services on SAM E70/S70/V70/V71 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#comments",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#comments"
  },"1506": {
    "doc": "Getting Started with Drivers",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html#revision",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html#revision"
  },"1507": {
    "doc": "Getting Started with Drivers",
    "title": "Getting Started with Drivers",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_drv/readme.html",
    "relUrl": "/apps/sam_e70_xult/getting_started_drv/readme.html"
  },"1508": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Getting Started Application using Harmony v3 Drivers and FreeRTOS on SAM E70 Xplained Ultra Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#getting-started-application-using-harmony-v3-drivers-and-freertos-on-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#getting-started-application-using-harmony-v3-drivers-and-freertos-on-sam-e70-xplained-ultra-evaluation-kit"
  },"1509": {
    "doc": "Getting Started with FreeRTOS",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html"
  },"1510": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically every second. Further, the application writes the temperature readings to EEPROM. When a character is entered on the console, the last five written temperature values are read from the EEPROM and displayed on the console. Also, an LED (LED3) is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#description",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#description"
  },"1511": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | USART | Timer | XDMAC | . | Drivers . | TWIHS(I2C) | USART | . | System Services . | Timer | . | Third Party Libraries . | FreeRTOS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#modulestechnology-used"
  },"1512": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Hardware Used:",
    "content": ". | SAM E70 Xplained Ultra Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#hardware-used",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#hardware-used"
  },"1513": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e70_xult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#softwaretools-used"
  },"1514": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E70 Xplained Ultra Evaluation Kit | The SAM E70 Xplained Ultra Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the SAM E70 Xplained Ultra Evaluation Kit. | . Hardware Modification: . | IO1 Xplained Pro features Microchip’s AT30TSE758 temperature sensor chip with an 8 kbit serial EEPROM. The temperature sensor has two TWI addresses: one for the temperature sensor and one for the EEPROM. The A2 address line of TWI must be soldered to 0. This is done to modify the address of the EEPROM on the I/O1 Xplained Pro Extension Kit so that it does not conflict with the address of EEPROM on SAM E70 Xplained Evaluation Kit. The modification changes the address of temperature sensor to 0x4B and EEPROM to 0x50. These modified addresses are used in this demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#setup",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#setup"
  },"1515": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#programming-hex-file"
  },"1516": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started_freertos\\firmware\\\\drivers_freertos_sam_e70_xult.X) in MPLAB X IDE | Ensure “SAM E70 Xplained Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#programmingdebugging-application-project"
  },"1517": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED3 blinking at 1 second rate | Press any character on the terminal to display the last five values written to the EEPROM | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#running-the-demo"
  },"1518": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Drivers on SAM E70/S70/V70/V71 MCUs Using FreeRTOS | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#comments",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#comments"
  },"1519": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html#revision",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html#revision"
  },"1520": {
    "doc": "Getting Started with FreeRTOS",
    "title": "Getting Started with FreeRTOS",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/getting_started_freertos/readme.html",
    "relUrl": "/apps/sam_e70_xult/getting_started_freertos/readme.html"
  },"1521": {
    "doc": "XDMAC with QSPI",
    "title": "XDMAC with QSPI Application on SAM E70 Xplained Ultra Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#xdmac-with-qspi-application-on-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#xdmac-with-qspi-application-on-sam-e70-xplained-ultra-evaluation-kit"
  },"1522": {
    "doc": "XDMAC with QSPI",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html"
  },"1523": {
    "doc": "XDMAC with QSPI",
    "title": "Description:",
    "content": "This application demonstrates the usage of Direct Memory Access Controller (XDMAC) with QSPI on Cortex-M7 based MCU (SAM E70). The application writes and reads 80KB data into the External Serial Flash memory using the QSPI, with and without using XDMAC. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#description",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#description"
  },"1524": {
    "doc": "XDMAC with QSPI",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EFC | MPU | QSPI | XDMAC | SYSTICK | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#modulestechnology-used"
  },"1525": {
    "doc": "XDMAC with QSPI",
    "title": "Hardware Used:",
    "content": ". | SAM E70 Xplained Ultra Evaluation Kit | Logic Analyzer or Oscilloscope | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#hardware-used",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#hardware-used"
  },"1526": {
    "doc": "XDMAC with QSPI",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e70_xult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#softwaretools-used"
  },"1527": {
    "doc": "XDMAC with QSPI",
    "title": "Setup:",
    "content": ". | Connect the micro USB to the Host computer | Connect the Saleae Logic Analyzer and establish a connection with the Host PC | Configure the four channels to measure the QSPI throughput as follows . | Channel 0 is PA19, which is configured to Set and Clear the pin before and after the QSPI Write without DMA | Channel 1 is PB2, which is configured to Set and Clear the pin before and after the QSPI Read without DMA | Channel 2 is PC31, which is configured to Set and Clear the pin before and after the QSPI Write with DMA | Channel 3 is PB3, which is configured to Set and Clear the pin before and after the QSPI Read with DMA | . | | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#setup",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#setup"
  },"1528": {
    "doc": "XDMAC with QSPI",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#programming-hex-file"
  },"1529": {
    "doc": "XDMAC with QSPI",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (qspi_xdmac_read_write/firmware/sam_e70_xult.X) in MPLAB X IDE | Ensure “SAM E70 Xplained Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#programmingdebugging-application-project"
  },"1530": {
    "doc": "XDMAC with QSPI",
    "title": "Running the Demo:",
    "content": ". | Start capturing samples using the Logic Analyzer Software | Reset the hardware to start the application run from the beginning | Stop capturing the sample in the Logic Analyzer Software | Verify the the above mentioned four GPIO Pin waveforms and timestamps to see the QSPI performance with and without using the XDMAC for the following cases . | Write 80KB of data to external serial Flash without using the DMA | Read 80KB of data from the external serial Flash without using the DMA | Write 80KB of data to external serial Flash using the DMA | Read 80KB of data from the external serial Flash using the DMA | | . | LED1 toggles on success else turns ON if any error | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#running-the-demo"
  },"1531": {
    "doc": "XDMAC with QSPI",
    "title": "Comments:",
    "content": ". | Reference Application Note: Using XDMAC with QSPI on CORTEX-M7 MCUs Using MPLAB Harmony v3 | Getting Started Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM E70 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony . | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#comments",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#comments"
  },"1532": {
    "doc": "XDMAC with QSPI",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 Removed MHC support, Regenerated and tested application. | v1.4.0 Added MCC support, Regenerated and tested application. | v1.3.0 regenerated and tested the application | v1.2.0 regenerated and tested the application | v1.1.0 regenerated and tested the application | v1.0.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#revision",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html#revision"
  },"1533": {
    "doc": "XDMAC with QSPI",
    "title": "XDMAC with QSPI",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html",
    "relUrl": "/apps/sam_e70_xult/qspi_xdmac_read_write/readme.html"
  },"1534": {
    "doc": "Getting Started",
    "title": "Getting Started Application on SAM E70 Xplained Ultra Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#getting-started-application-on-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#getting-started-application-on-sam-e70-xplained-ultra-evaluation-kit"
  },"1535": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html"
  },"1536": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to 1 second, 2 seconds, 4 seconds, and back to 500 milliseconds every time you press the switch SW0 on the SAM E70 Xplained Ultra Evaluation Kit. Also, an LED, LED3, is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#description",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#description"
  },"1537": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | USART | Timer | XDMAC | TWIHS(I2C) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#modulestechnology-used"
  },"1538": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM E70 Xplained Ultra Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#hardware-used"
  },"1539": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_e70_xult . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#softwaretools-used"
  },"1540": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM E70 Xplained Ultra Evaluation Kit | The SAM E70 Xplained Ultra Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the SAM E70 Xplained Ultra Evaluation Kit. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#setup",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#setup"
  },"1541": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAME70Q21B” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#programming-hex-file"
  },"1542": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started\\firmware\\\\sam_e70_xult.X) in MPLAB X IDE | Ensure “SAM E70 Xplained Ultra” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#programmingdebugging-application-project"
  },"1543": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED3 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM E70 Xplained Ultra Evaluation Kit to change the default sampling rate to 1 second | Every subsequent pressing of switch SW0 on SAM E70 Xplained Ultra Evaluation Kit changes the default sampling rate to 2 seconds, 4 seconds, and 500 ms and back to 1 second in cyclic order as shown below. | While the temperature sampling rate changes on every switch SW0 press, notice the LED3 toggling at the same sampling rate | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#running-the-demo"
  },"1544": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM E70/S70/V70/V71 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#comments"
  },"1545": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html#revision"
  },"1546": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/same70_getting_started/readme.html",
    "relUrl": "/apps/sam_e70_xult/same70_getting_started/readme.html"
  },"1547": {
    "doc": "SAM E70 Xplained Ultra Evaluation Kit",
    "title": "SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM E70 Xplained Ultra Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | Getting Started with Drivers | Click Here | . | 3 | Getting Started with FreeRTOS | Click Here | . | 4 | XDMAC with QSPI | Click Here | . | 5 | Ethernet bootloader - File Transfer Protocol | Click Here | . More Application Demos . For more application demos on SAM E70 Xplained Ultra Evaluation Kit and other Development Boards/Kits having the same part number (ATSAME70Q21B) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_e70_xult/readme.html",
    "relUrl": "/apps/sam_e70_xult/readme.html"
  },"1548": {
    "doc": "Getting Started",
    "title": "Getting Started Application on SAM L10 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#getting-started-application-on-sam-l10-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#getting-started-application-on-sam-l10-xplained-pro-evaluation-kit"
  },"1549": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html"
  },"1550": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "The application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension. The temperature read is displayed on a serial console periodically every 500 milliseconds. The periodicity of the temperature values displayed on the serial console is changed to one second, two seconds, four seconds, and back to 500 milliseconds every time you press the switch SW0 on the SAM L10 Xplained Pro Evaluation Kit. Also, an LED0 is toggled every time the temperature is displayed on the serial console. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#description",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#description"
  },"1551": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | PORTS | RTC | DMAC | SERCOM(I2C) | SERCOM(USART) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#modulestechnology-used"
  },"1552": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM L10 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#hardware-used"
  },"1553": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_l10_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#softwaretools-used"
  },"1554": {
    "doc": "Getting Started",
    "title": "Setup:",
    "content": ". | Verify that the temperature sensor (I/O1 Xplained Pro Extension Kit) is connected to Extension Header 1 (EXT1) on the SAM L10 Xplained Pro Evaluation Kit | The SAM L10 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM L10 Xplained Pro Evaluation Kit . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#setup",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#setup"
  },"1555": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML10E16A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#programming-hex-file"
  },"1556": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (getting_started\\firmware\\\\sam_l10_xpro.X) in MPLAB X IDE | Ensure “SAM L10 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#programmingdebugging-application-project"
  },"1557": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM L10 Xplained Pro Evaluation Kit to change the default sampling rate to one second | Every subsequent pressing of switch SW0 on SAM L10 Xplained Pro Evaluation Kit changes the default sampling rate to two seconds, four seconds and 500 ms and back to one second in cyclic order as shown below | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#running-the-demo"
  },"1558": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAM L10 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#comments"
  },"1559": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html#revision"
  },"1560": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_getting_started/readme.html",
    "relUrl": "/apps/sam_l10_xpro/saml10_getting_started/readme.html"
  },"1561": {
    "doc": "Low Power",
    "title": "Low Power Application on SAM L10 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#low-power-application-on-sam-l10-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#low-power-application-on-sam-l10-xplained-pro-evaluation-kit"
  },"1562": {
    "doc": "Low Power",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html"
  },"1563": {
    "doc": "Low Power",
    "title": "Description",
    "content": "The application demonstrates, on power-up, the device is set to Standby Sleep mode. The device wakes up from Standby mode and enters Active mode when you cover the light sensor (by placing a hand over it, for example) on the I/O1 Xplained Pro extension kit. The application periodically prints room temperature on a serial terminal while the light sensor is covered. The device goes back to Standby mode when you uncover the light sensor. LED0 in the SAM L10 evaluation kit is toggled every time the temperature is displayed on the serial console. When you press the switch button SW0, the application switches Sleep mode from Standby mode to Idle mode. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#description",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#description"
  },"1564": {
    "doc": "Low Power",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | RTC | USART | DMAC | ADC | PM | SUPC | EIC | EVSYS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#modulestechnology-used"
  },"1565": {
    "doc": "Low Power",
    "title": "Hardware Used:",
    "content": ". | SAM L10 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit Note: The application is being developed on a SAM L10 XPRO board. Ensure that you use the same revision on the evaluation board before going further, else you could face issues with power consumption values. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#hardware-used",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#hardware-used"
  },"1566": {
    "doc": "Low Power",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_l10_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | Data Visualizer | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#softwaretools-used"
  },"1567": {
    "doc": "Low Power",
    "title": "Setup:",
    "content": ". | Connect the I/O1 Xplained Pro extension kit to the Extension Header 1 (EXT1) of the SAML10 Xplained Pro evaluation kit | Probe PA27 (SW0 pin) and PA06 (wake-up test pin) on Extension Header 2 (EXT2) as highlighted in the Hardware Setup figure to measure wake-up time | Connect a USB cable to the DEBUG USB port for programming Note : Make sure common ground is connected with the board while using the logic analyzer or CRO. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#setup",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#setup"
  },"1568": {
    "doc": "Low Power",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML10E16A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#programming-hex-file"
  },"1569": {
    "doc": "Low Power",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (saml10_low_power\\firmware\\\\low_power_app_sam_l10_xpro.X) in MPLAB X IDE. | Ensure “SAML10 Xplained Pro” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#programmingdebugging-application-project"
  },"1570": {
    "doc": "Low Power",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | Perform reset by pressing the “RESET” switch | Verify the application title message is displayed . | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to print the temperature and message on the terminal. You should see the following messages (containing the temperature value in °F) on the terminal every 500 milliseconds for the duration the light sensor is covered | Observe Current Consumption on Data Visualizer Note: The Data Visualizer is a program to process and visualize data. The Data Visualizer can receive data from various sources such as the Embedded Debugger Data Gateway Interface (EDBG DGI) and COM ports. It is possible to track an application in run-time using a terminal graph or oscilloscope. It analyzes the power consumption of an application through correlation of code execution and power consumption when used together with a supported probe or board. | Open the Data Visualizer application from your PC and select the connected SAM L10 Xplained Pro B board on the DGI Control Panel, then click on Connect. The Data Visualizer will then start searching for protocols from the SAM L10 Xplained Pro board through the EDBG . | Once the Data Visualizer is connected to the SAM L10 EDBG, different interfaces will appear. Select the Power interface and click on the Start button to start measuring the power consumption of the device | Ensure that the jumpers for Current Measurement on the SAM L10 Xplained Pro are set to MEASURE for the MCU and BYPASS for the I/Os | The Power Analysis window will appear on the Data Visualizer tool interface. | The image shows the device in Standby mode with its measured power consumption of 7.55µA. | . Note: The average value is considered when measuring the power consumption of the device because the instant value is not stable. | The small peaks can be observed in the step image that illustrates the 500 milliseconds Real-Time Clock (RTC) timer expiry when light sensor on the I/O Xplained Pro board is covered by hand. | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element) to print the temperature on the terminal and observe the power consumption of the device | Press the SW0 button to switch from Standby mode to Idle mode. The following image shows the transition of the power consumption from Standby mode to Idle mode | The following image shows the device in Idle mode with a measured power consumption of 140 µA. | . Note: You can observe that the small peaks coming from RTC timer expiry disappeared because the power consumption in Idle mode is higher than the power required to start ADC conversion. | Place your hand over the light sensor. The device will wake up on the next ADC window monitor interrupt, read and print data on serial and then re-enter Standby mode. The following image shows the transition of the power consumption by switching from Idle mode to Standby mode | . Note that the above results highlight the power consumption is lower in Standby mode than in Idle mode. | Wake-up Time Measurement Using Logic Analyzer/ Cathode-Ray Oscilloscope (CRO) To demonstrate the CPU wake up time, switch SW0 is configured to generate an interrupt. A General Purpose Input/Output (GPIO) is toggled in the Interrupt Service Routine (ISR) of the switch press event. The MCU comes out of Sleep mode when an interrupt occurs (in this case, the switch press interrupt). The time between the switch press and the GPIO toggle in the ISR is the wake up time. | Connect your logic analyzer or your CRO to the board according to the step image | Press the SW0 switch and capture the signals to measure the wake-up time in Standby and Idle mode. The following image shows the wake-up time from Standby mode | The following image shows the wake-up time from Idle mode . By observing the outputs, you can conclude that the wake-up time is greater in Standby mode than in Idle mode . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#running-the-demo",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#running-the-demo"
  },"1571": {
    "doc": "Low Power",
    "title": "Comments:",
    "content": ". | Reference Training Module: Low Power Application on SAM L10 (Cortex M0+) MCUs Using MPLAB Harmony v3 Peripheral Libraries | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#comments",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#comments"
  },"1572": {
    "doc": "Low Power",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested the application | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Regenerated and tested application. | v1.0.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html#revision",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html#revision"
  },"1573": {
    "doc": "Low Power",
    "title": "Low Power",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/saml10_low_power/readme.html",
    "relUrl": "/apps/sam_l10_xpro/saml10_low_power/readme.html"
  },"1574": {
    "doc": "SAM L10 Xplained Pro Evaluation Kit",
    "title": "SAM L10 Xplained Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM L10 Xplained Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Getting Started | Click Here | . | 2 | Low Power | Click Here | . More Application Demos . For more application demos on SAM L10 Xplained Pro Evaluation Kit and other Development Boards/Kits having the same part number (ATSAML10E16A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l10_xpro/readme.html",
    "relUrl": "/apps/sam_l10_xpro/readme.html"
  },"1575": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "TrustZone Getting Started Application on SAM L11 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#trustzone-getting-started-application-on-sam-l11-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#trustzone-getting-started-application-on-sam-l11-xplained-pro-evaluation-kit"
  },"1576": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html"
  },"1577": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Description",
    "content": "This Application demonstrates the TrustZone feature on SAM L11 microcontroller (MCU). The application has two projects pertaining to Secure and Non-Secure modes of SAM L11, that work together on the same MCU and offers security isolation between the trusted and the non-trusted resources in the device. | The Secure mode application reads the current room temperature from the temperature sensor on the I/O1 Xplained Pro Extension Kit every 500 milliseconds. Further, the application writes the temperature readings to EEPROM and reads when a request received from the Non-secure mode application. Also, an LED (LED0) is toggled every time the temperature is displayed on the serial console. The periodicity of the temperature values reading can be changed to 1 second, 2 seconds, 4 seconds, and back to 500 milliseconds every time when the user presses the switch SW0 on the SAM L11 Xplained Pro Evaluation Kit. The temperature readings are transferred to Non-secure mode application when it requests to Secure application through Non Secure Callable (NSC). | The Non-secure mode application requests the Secure mode application temperature values and prints them on a serial console once it receives from the Secure mode application. Further, when it receives a request from the user (in the form of a key press on the serial console), it will request Secure mode application to retrieve the last five stored temperature values in the EEPROM. The Non-secure application prints the last five stored temperature values on the console. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#description",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#description"
  },"1578": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Secure PORT Pins (All pins by default are secure) | Secure I2C | Secure RTC | Secure EIC | Non-secure USART | Non-secure DMAC | Non-secure PORT Pins (USART Pins only) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#modulestechnology-used"
  },"1579": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Hardware Used:",
    "content": ". | SAM L11 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#hardware-used"
  },"1580": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Manifest for Secure and NonSecure projects present in harmony-manifest-success.yml under the project folder firmware/{Secure or NonSecure}/firmware/src/config/sam_l11_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#softwaretools-used"
  },"1581": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Setup:",
    "content": ". | Connect the I/O1 Xplained Pro Extension Kit to the Extension Header 1 (EXT1) of the SAM L11 Xplained Pro Evaluation Kit | The SAM L11 Xplained Pro Evaluation Kit allows the Embedded Debugger (EDBG) to be used for debugging. Connect the Type-A male to micro-B USB cable to the micro-B DEBUG USB port to power and debug the SAM L11 Xplained Pro Evaluation Kit. | . Hardware Modification: . | IO1 Xplained Pro features Microchip’s AT30TSE758 temperature sensor chip with an 8 kbit serial EEPROM. The temperature sensor has two TWI addresses: one for the temperature sensor and one for the EEPROM. The A2 address line of TWI must be soldered to 0. This is done to modify the address of the EEPROM on the I/O1 Xplained Pro Extension Kit so that it does not conflict with the address of EEPROM on SAM E70 Xplained Evaluation Kit. The modification changes the address of temperature sensor to 0x4B and EEPROM to 0x50. These modified addresses are used in this demo application. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#setup",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#setup"
  },"1582": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML11E16A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#programming-hex-file"
  },"1583": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Programming/Debugging Application Project:",
    "content": ". | The Trustzone project can be opened in two ways. | Procedure 1: . | Open MPLAB X IDE | Close all existing projects in IDE (if any project is opened) | Go to File -&gt; Open Project | Select project path “../reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started” | Select “firmware” folder, enable “Open Required Projects” and click on “Open Project” button . | Once the project opens, set the “trustzone_sam_l11_xpro_NonSecure” project as Main Project by right clicking on the project. | . | Procedure 2: . | Open MPLAB X IDE | Close all existing projects in IDE (if any project is opened) | Open the project (../saml11_trustzone_getting_started/firmware/NonSecure/firmware/sam_l11_xpro_NonSecure.X) in MPLAB X IDE. | . | . | Ensure “SAML11 Xplained Pro” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#programmingdebugging-application-project"
  },"1584": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Change the baud rate to 115200 | You should see the temperature values (in °F) being displayed on the terminal every 500 milliseconds, as shown below . | Also, notice the LED0 blinking at 500 millisecond rate | You may vary the temperature by placing your finger on the temperature sensor (for a few seconds) | Press the switch SW0 on SAM L11 Xplained Pro Evaluation Kit to change the default sampling rate to 1 second. | Every subsequent pressing of switch SW0 on SAM L11 Xplained Pro Evaluation Kit changes the default sampling rate to 2 seconds, 4 seconds, and 500 ms and back to 1 second in cyclic order as shown below. | While the temperature sampling rate changes on every switch SW0 press, notice the LED0 toggling at the same sampling rate | Press any character on the terminal to display the last five values written to the EEPROM | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#running-the-demo"
  },"1585": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Comments:",
    "content": ". | Reference Training Module: Arm TrustZone Getting Started Application on SAM L11 MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#comments",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#comments"
  },"1586": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, regenerated and tested application. | v1.4.0 - Added MCC support, regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#revision",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html#revision"
  },"1587": {
    "doc": "TrustZone Getting Started on SAM L11",
    "title": "TrustZone Getting Started on SAM L11",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html",
    "relUrl": "/apps/sam_l11_xpro/saml11_trustzone_getting_started/readme.html"
  },"1588": {
    "doc": "SAM L11 Xplained Pro Evaluation Kit",
    "title": "SAM L11 Xplained Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM L11 Xplained Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Trustzone Getting Started on SAM L11 Xplained Pro Evaluation Kit | Click Here | . More Application Demos . For more application demos on SAM L11 Xplained Pro Evaluation Kit and other Development Boards/Kits having the same part number (ATSAML11E16A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l11_xpro/readme.html",
    "relUrl": "/apps/sam_l11_xpro/readme.html"
  },"1589": {
    "doc": "BLE Fitness Tracker",
    "title": "BLE Fitness Tracker Application on SAM L21 Xplained Pro Evaluation Kit and Click boards",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#ble-fitness-tracker-application-on-sam-l21-xplained-pro-evaluation-kit-and-click-boards",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#ble-fitness-tracker-application-on-sam-l21-xplained-pro-evaluation-kit-and-click-boards"
  },"1590": {
    "doc": "BLE Fitness Tracker",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html"
  },"1591": {
    "doc": "BLE Fitness Tracker",
    "title": "Description:",
    "content": "The application demonstrates a low power solution based on Microchip products for the health care industry and wearable products. The application displays heart rate readings (in beats per minute - bpm) on a very low power consuming display and posts this Heart Rate data to Microchip Bluetooth Data (MBD) android mobile application via BLE (Bluetooth Low Energy). The application will be in continuous low power standby mode until user presses a switch on SAM L21 Xplained board or initiate a communication from Bluetooth using MBD android app. Then device wakes up, reads heart rate , displays on Eink E-Paper display 2,9” 296x128 dots display and posts heart rate value to MBD android app via Bluetooth. The Mikro Elektronika Heart Rate 9 click board is used to read the heart pulse. Mikroelektronika Eink E-Paper display 2,9” 296x128 dots display is used for displaying heart rate. The Eink E-Paper display 2,9” 296x128 dots display device contains the eINK click adapter board and the Eink E-Paper display 2,9” 296x128 dots display. BM71 Bluetooth module is used to send the heart rate data over BLE. The Heart Rate 9 click introduces Microchip’s proprietary method of measuring multiple signals in a body using pseudorandom binary sequence generation and phase division multiplexing This algorithm for processing data from the sensor and it can send data for 3 different diodes (green, ir, red) who give out a diagram of the heartbeat and its frequency per minute. The Eink E-Paper display 2,9” 296x128 dots display is a very low power consumption display and it can retain the information, even after disconnecting from the power source. The host MCU SAM L21 is interfaced with the Heart Rate 9 click over the USART interface and eINK click over SPI Interface. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#description",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#description"
  },"1592": {
    "doc": "BLE Fitness Tracker",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Timer | EIC | SERCOM (SPI) | SERCOM (USART) | SUPC | PM | SysTick | . | BM71 Driver | STDIO Library | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#modulestechnology-used"
  },"1593": {
    "doc": "BLE Fitness Tracker",
    "title": "Hardware Used:",
    "content": ". | SAM L21 Xplained Pro Evaluation Kit | Heart Rate 9 click | MikroElektronika E-Paper display 2,9” 296x128 dots | BM71-XPRO | mikroBUS Xplained Pro | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#hardware-used",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#hardware-used"
  },"1594": {
    "doc": "BLE Fitness Tracker",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_l21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Install Microchip Bluetooth Data Android App in your android mobile | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#softwaretools-used"
  },"1595": {
    "doc": "BLE Fitness Tracker",
    "title": "Adding private characteristics to BM71:",
    "content": "Hardware Setup . | In BM71-XPRO, Change jumper J2 to select USB | In BM71-XPRO, Configure DIP switch SW2 with the below configurations . | All DIP switch ON | . | Power the BM71-XPRO from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J1) | Perform reset by pressing switch SW1 on BM71-XPRO and check blue LD1 is ON | . Programming private characteristics . | Download the manual configuration tool from BM70/71 Firmware &amp; Software Tools v1.11 | Extract and locate configuration tool from below location - Your_downloaded_folder \\\\Firmware &amp; Software Tools v1.11\\\\ConfigurationTool\\\\IS187x_102_BLEDK3v1.11_UI1.00 | Double click on “IS187x_102_BLEDK3v1.11_UI1.00.exe “ | Click on “Load” button and select “Load Text File” | Select “bm71_heart_rate_service_chars_config.txt” from bm71_configuration folder present in firmware folder | Click on “EDIT” option . | Select “0x01: BM71” in BLEDK and click ok . | Click on “Finish” . | Click on “Write” . | Select respective COM Port and set baud rate to 115200 then click on Write . | Click on Yes to successfully update the private characteristics on to BM71 module . | After successful update, click OK and remove the power from BM71-XPRO and change jumper J2 to select EXT . | Turn OFF DIP 1 switch | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#adding-private-characteristics-to-bm71",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#adding-private-characteristics-to-bm71"
  },"1596": {
    "doc": "BLE Fitness Tracker",
    "title": "Setup:",
    "content": ". | Mount Heart Rate 9 click board on mikrobus xplained pro adapter and connect to EXT 1 connector of SAM L21 XPRO Evaluation kit | Mount the eink_epaper_2_9_296_128 (eINK click + eink_epaper_2_9_296_128 display) mikrobus xplained pro adapter and connect to EXT 2 connector of SAM L21 XPRO Evaluation kit | Connect the BM71-XPRO on to EXT 3 connector of SAM L21 XPRO Evaluation kit | Power the SAM L21 XPRO Evaluation kit from a Host PC through a Type-A male to Micro-B USB cable connected to Micro-B port (J105) . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#setup",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#setup"
  },"1597": {
    "doc": "BLE Fitness Tracker",
    "title": "Programming hex file:",
    "content": "The prebuilt hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML21J18B” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#programming-hex-file"
  },"1598": {
    "doc": "BLE Fitness Tracker",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (saml21_ble_fitness_tracker\\firmware\\\\sam_l21_xpro.X) in MPLAB X IDE | Ensure “SAM L21 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and Program Device” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#programmingdebugging-application-project"
  },"1599": {
    "doc": "BLE Fitness Tracker",
    "title": "Running the Demo:",
    "content": "Before proceeding, install the Microchip Bluetooth Data android app in an Android Smartphone. | Enable Bluetooth and location from Smartphone settings | Perform reset by unplugging and re-plugging the power cable of SAM L21 Xplained Pro Evaluation Kit | Parallelly, open the “Microchip Bluetooth Data (MBD)” android app from your smartphone and tap on “Bluetooth Smart” icon on the dashboard. If prompted, allow the application to turn on Bluetooth. | After power-up, the application displays the Microchip logo on the Eink E-Paper display 2,9” 296x128 dots display and initializes the heart rate sensor | After successful initialization of the heart rate sensor, two integrated LEDs on the heart rate 9 click lights up and MCU goes to sleep (low power standby mode) . | Now, scan for Bluetooth devices by tapping START SCAN option on the MBD APP. The BM71 device should appear as MCHP_SAM_L21_HR in the list of Bluetooth devices. | Stop the scan and connect the MCHP BLE device by clicking on MCHP_SAM_L21_HR. This will establish a connection between the MBD BLE application and the BM71 BLE device and wakes up the MCU from sleep mode. | Once BLE device is connected, the application shows the different services screen. Scroll down and tap on the Heart Rate Service, it will redirect to Sensor Location screen. | Keep your finger on Pulse Detection Indicator on the heart rate 9 click sensor as shown in the figure below. | In the bottom right corner of the Sensor Location screen, disable and enable the Notify Button. | Wait till the LED “LED0” on SAM L21 Xplained Pro Evaluation Kit goes off. Once the LED is off, lift your finger. Note: Make sure smartphone screens are not turned off and don’t switch to any other App(s) on your smartphone. | The heart rate value (in bpm - beats per minute) gets displayed on the Sensor Loaction screen as shown in the figure below. Also, the same heart rate value gets displayed on the Eink E-Paper display 2,9” 296x128 dots display and MCU goes back to sleep mode. | . Running the Demo without BLE: . Note: To test the demo without BLE, disconnect the BM71-XPRO from EXT 3 connector of the Curiosity Nano Base board. | Perform reset by unplugging and re-plugging the power cable of SAM L21 Xplained Pro Evaluation Kit | After power-up, the application displays the Microchip logo on the Eink E-Paper display 2,9” 296x128 dots display and initializes the heart rate sensor | After successful initialization of the heart rate sensor, two integrated LEDs on the heart rate 9 click lights up and MCU goes to sleep (low power standby mode) | Press the switch “SW0” on SAM L21 Xplained Pro Evaluation Kit, MCU wakes up from sleep mode and LED “LED0” on SAM L21 Xplained Pro Evaluation Kit glows on | Place your index finger gently on the heart rate 9 click sensor as shown in the figure below | Wait till the LED “LED0” on SAM L21 Xplained Pro Evaluation Kit goes off and then lift your finger | The heart rate value (in bpm - beats per minute) gets displayed on the Eink E-Paper display 2,9” 296x128 dots display and MCU goes back to sleep mode. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#running-the-demo",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#running-the-demo"
  },"1600": {
    "doc": "BLE Fitness Tracker",
    "title": "Comments:",
    "content": ". | Place your index finger gently on the heart rate 9 click sensor, don’t push or put pressure on the sensor (the heart rate values may not be accurate) | Make sure the smartphone screen is not turned off when reading Heart Rate Sensor data using the MBD smartphone APP and also, don’t switch to any other smartphone | Code related for Heart Rate services is added manually. Harmony v3 framework doesn’t generate code for heart rate service | Reference Training Module: Low Power Application on SAM L21 (Cortex M0+) MCUs Using MPLAB Harmony v3 Peripheral Libraries | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#comments",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#comments"
  },"1601": {
    "doc": "BLE Fitness Tracker",
    "title": "Revision:",
    "content": ". | v1.6.0 - Replaced Eink Bundle with eink_epaper_2_9_296_128 Display, regenerated and tested application. | v1.5.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#revision",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html#revision"
  },"1602": {
    "doc": "BLE Fitness Tracker",
    "title": "BLE Fitness Tracker",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html",
    "relUrl": "/apps/sam_l21_xpro/saml21_ble_fitness_tracker/readme.html"
  },"1603": {
    "doc": "Low Power",
    "title": "Low Power Application on SAM L21 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#low-power-application-on-sam-l21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#low-power-application-on-sam-l21-xplained-pro-evaluation-kit"
  },"1604": {
    "doc": "Low Power",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html"
  },"1605": {
    "doc": "Low Power",
    "title": "Description",
    "content": "The application demonstrates low power application on SAM L21 Xplained Pro Evaluation Kit. on power-up, the device is set to Standby Sleep mode. The device wakes up from Standby mode and enters Active mode when you cover the light sensor (by placing a hand over it, for example) on the I/O1 Xplained Pro extension kit. The application periodically prints room temperature on a serial terminal while the light sensor is covered. The device goes back to Standby mode when you uncover the light sensor. LED0 in the SAM L21 evaluation kit is toggled every time the temperature is displayed on the serial console. When you press the switch button SW0, the application switches Sleep mode from Standby mode to Idle mode. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#description",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#description"
  },"1606": {
    "doc": "Low Power",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | I2C | RTC | USART | DMAC | ADC | PM | SUPC | EIC | EVSYS | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#modulestechnology-used"
  },"1607": {
    "doc": "Low Power",
    "title": "Hardware Used:",
    "content": ". | SAM L21 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | . Note: The application is being developed on a SAM L21 XPRO-B board. Ensure that you use the same revision on the evaluation board before going further, else you could face issues with power consumption values. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#hardware-used",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#hardware-used"
  },"1608": {
    "doc": "Low Power",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_l21_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here | Any Serial Terminal application like Tera Term terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#softwaretools-used"
  },"1609": {
    "doc": "Low Power",
    "title": "Setup:",
    "content": ". | Connect the I/O1 Xplained Pro extension kit to the Extension Header 2 (EXT2) of the SAML21 Xplained Pro evaluation kit | Probe PA02 (SW0 pin) and PB05 (wake-up test pin) on Extension Header 1 (EXT1) as highlighted in the Hardware Setup figure to measure wake-up time | Connect a USB cable to the DEBUG USB port for programming | . Note : Make sure common ground is connected with the board while using the logic analyzer or CRO. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#setup",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#setup"
  },"1610": {
    "doc": "Low Power",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML21J18B” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#programming-hex-file"
  },"1611": {
    "doc": "Low Power",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (saml21_low_power\\firmware\\\\sam_l21_xpro.X) in MPLAB X IDE. | Ensure “SAML21 Xplained Pro (EDBG)” is selected as hardware tool to program/debug the application. | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar. | Follow the steps in “Running the Demo” section below. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#programmingdebugging-application-project"
  },"1612": {
    "doc": "Low Power",
    "title": "Running the Demo:",
    "content": ". | Open Tera Term, connect to serial console. If there is any connection issue on tera terminal, unplug the USB cable connected to Micro-B port, and reconnect it back. | Change the baud rate to 115200 | Perform a reset by pressing the “RESET” switch | Verify the application title message is displayed | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element to put the light sensor in a dark environment) to print the temperature and message on the terminal. You should see the following messages (containing the temperature value in °F) on the terminal every 500 milliseconds for the duration the light sensor is covered | Observe Current Consumption on Data Visualizer Note:The Data Visualizer is a program to process and visualize data. The Data Visualizer can receive data from various sources such as the Embedded Debugger Data Gateway Interface (EDBG DGI) and COM ports. It is possible to track an application in run-time using a terminal graph or oscilloscope. It analyzes the power consumption of an application through correlation of code execution and power consumption when used together with a supported probe or board. | Open the Data Visualizer application from your PC and select the connected SAM L21 Xplained Pro B board on the DGI Control Panel, then click on Connect. The Data Visualizer will then start searching for protocols from the SAM L21 Xplained Pro board through the EDBG | Once the Data Visualizer is connected to the SAM L21 EDBG, different interfaces will appear. Select the Power interface and click on the Start button to start measuring the power consumption of the device | Ensure that the jumpers for Current Measurement on the SAM L21 Xplained Pro are set to MEASURE for the MCU and BYPASS for the I/Os | The Power Analysis window will appear on the Data Visualizer tool interface | The step image shows the device in Standby mode with its measured power consumption. You can observe small peaks that illustrate the 500 milliseconds Real-Time Clock (RTC) timer expiry Note: The average value is considered when measuring the power consumption of the device because the instant value is not stable. Then, the power consumption of the device in Standby mode is 6.99 µA. | Cover the light sensor on the I/O Xplained Pro board by placing your hand over it (or another element) to print the temperature on the terminal and observe the power consumption of the device | Press the SW0 button to switch from Standby mode to Idle mode. The following image shows the transition of the power consumption from Standby mode to Idle mode | The following image shows the device in Idle mode with a measured power consumption of 530 µA | . Note: You can observe that the small peaks coming from RTC timer expiry disappeared because the power consumption in Idle mode is higher than the power required to start ADC conversion. | Place your hand over the light sensor. The device will wake up on the next ADC window monitor interrupt, read and print data on serial and then re-enter Standby mode. The following image shows the transition of the power consumption by switching from Idle mode to Standby mode | . Note that the above results highlight the power consumption is lower in Standby mode than in Idle mode. | Wake-up Time Measurement Using Logic Analyzer/ Cathode-Ray Oscilloscope (CRO) To demonstrate the CPU wake up time, switch SW0 is configured to generate an interrupt. A General Purpose Input/Output (GPIO) is toggled in the Interrupt Service Routine (ISR) of the switch press event. The MCU comes out of Sleep mode when an interrupt occurs (in this case, the switch press interrupt). The time between the switch press and the GPIO toggle in the ISR is the wake up time. | Connect your logic analyzer or your CRO to the board according to the step image | Press the SW0 switch and capture the signals to measure the wake-up time in Standby and Idle mode. The following image shows the wake-up time from Standby mode | The following image shows the wake-up time from Idle mode | By observing the outputs, you can conclude that the wake-up time is greater in Standby mode than in Idle mode | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#running-the-demo",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#running-the-demo"
  },"1613": {
    "doc": "Low Power",
    "title": "Comments:",
    "content": ". | This application is developed by modifying the generated “eic.c” file. If you need to reconfigure or regenerate this demo using the MCC, make sure you don’t replace this file. This change is required to measure the instant wakeup time of the device. | Reference Training Module: Low Power Application on SAM L21 (Cortex M0+) MCUs Using MPLAB Harmony v3 Peripheral Libraries | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#comments",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#comments"
  },"1614": {
    "doc": "Low Power",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and Tested the application. | v1.5.0 - Removed MHC support, Regenerated and tested application. | v1.4.0 - Added MCC support, Regenerated and tested application. | v1.3.0 - Regenerated and tested application. | v1.2.0 - Regenerated and tested application. | v1.1.0 regenerated and tested the demo application | v1.0.0 released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html#revision",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html#revision"
  },"1615": {
    "doc": "Low Power",
    "title": "Low Power",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/saml21_low_power/readme.html",
    "relUrl": "/apps/sam_l21_xpro/saml21_low_power/readme.html"
  },"1616": {
    "doc": "SAM L21 Xplained Pro Evaluation Kit",
    "title": "SAM L21 Xplained Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM L21 Xplained Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | Low Power | Click Here | . | 2 | BLE Fitness Tracker | Click Here | . More Application Demos . For more application demos on SAM L21 Xplained Pro Evaluation Kit and other Development Boards/Kits having the same part number (ATSAML21J18B) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l21_xpro/readme.html",
    "relUrl": "/apps/sam_l21_xpro/readme.html"
  },"1617": {
    "doc": "SD Card USB Data Logger Application",
    "title": "SD Card, USB Data Logger Application on SAM L22 Xplained Pro Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#sd-card-usb-data-logger-application-on-sam-l22-xplained-pro-evaluation-kit",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#sd-card-usb-data-logger-application-on-sam-l22-xplained-pro-evaluation-kit"
  },"1618": {
    "doc": "SD Card USB Data Logger Application",
    "title": "  Download  ",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html"
  },"1619": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Description",
    "content": "This application shows an example of using the MPLAB Harmony v3 File System to store the sensor data (light intensity values) and temperature values into a SD card using the SDSPI and a SPI driver. The SD card is also enumerated as a MSD(Mass Storage Device) device on the PC(USB Host) enabling logged data viewing. The SDSPI driver uses an instance of the SPI driver to communicate to the SD card over the SPI bus. The application creates a directory named Dir1 in the root directory and creates a new file named DATA_LOG.txt. The application writes the light sensor and temperature values into this newly created file every 1 second and also display it on the SLCD. If the directory and file already exists the values are logged into the existing file itself. The logged light intensity and temperature values along with time stamp are read via USB with the SD card enumerated as an MSD( Mass Storage Device). The application parallelly continues to log the data with the SD card enumerated as an MSD. ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#description",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#description"
  },"1620": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Timer | DMAC | ADC . | PORTS | EVENT SYSTEM | SERCOM (USART) | SERCOM (SPI) | SERCOM(I2C) | RTC | . | . | Drivers . | SDSPI Driver . | USB Full Speed Driver | SPI Driver | SLCD | . | . | Libraries . | USB MSD Library | File System Library | Debug System service Library | STDIO Library | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#modulestechnology-used",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#modulestechnology-used"
  },"1621": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Hardware Used:",
    "content": ". | SAM L22 Xplained Pro Evaluation Kit | I/O1 Xplained Pro Extension Kit | Touch SLCD1 Xplained pro | Micro-SD card formatted to FAT32 filesystem. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#hardware-used",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#hardware-used"
  },"1622": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/sam_l22_xpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version.Alternatively, Click Here | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#softwaretools-used",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#softwaretools-used"
  },"1623": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Setup:",
    "content": ". | Verify that the I/O1 Xplained Pro Extension Kit is connected to Extension Header 1 (EXT1) on the SAM L22 Xplained Pro Evaluation Kit . | Insert microSD(upto 32GB) card on to the I/O1 Xplained Pro Extension Kit . | Insert the Touch SLCD1 Xplained pro into EXT 5 . | The SAM L22 Xplained Pro Evaluation Kit allows using the Embedded Debugger (EDBG) for debugging. Connect the Type-A male to micro-B USB cable to micro-B DEBUG USB port to power and debug the SAM L22 Xplained Pro Evaluation Kit. | SAM L22 Xplained pro will be in battery backup mode initially. The device is not woken up when switched from battery backup power to Main Power. Press the RESET push button on the SAM L22 Xplained pro to wake up the device. | Place the jumper between CAP &amp; PB03 in the VBAT select jumper. | The system time can be set via the SetTime() function in app.c file. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#setup",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#setup"
  },"1624": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps . Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, click the “Browse” button to select the prebuilt hex file. | Select Device has “ATSAML22N18A” | Ensure the proper tool is selected under “Hardware Tool” | Click on “Next” button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on “Finish” button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime. | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#programming-hex-file",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#programming-hex-file"
  },"1625": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (saml22_sdcard_usb_slcd__datalogger/firmware/sam_l22_xpro.X) in MPLAB X IDE | Ensure “SAM L22 Xplained Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “Make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#programmingdebugging-application-project"
  },"1626": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Running the Demo:",
    "content": ". | When Powered up, the Application shows the light intensity(ALS in Lux) and temperature (TEMP in °C) on the SLCD. | Light intensity ADC count, Light intensity and temperature values are stored every 1 second along with time stamp. To read the logged light intensity values, connect the Target USB port on the board to the computer using a micro USB cable. | Access the DATA_LOG.txt via USB inside the Dir1 folder.(see below image) . | The sample log file looks as below. | Always eject the USB drive before removing it. | To reset the system time press the SW0 on the SAM L22. | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#running-the-demo",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#running-the-demo"
  },"1627": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#comments",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#comments"
  },"1628": {
    "doc": "SD Card USB Data Logger Application",
    "title": "Revision:",
    "content": ". | v1.6.0 - Regenerated and tested application | v1.5.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#revision",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html#revision"
  },"1629": {
    "doc": "SD Card USB Data Logger Application",
    "title": "SD Card USB Data Logger Application",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html",
    "relUrl": "/apps/sam_l22_xpro/saml22_sdcard_usb_slcd_datalogger/readme.html"
  },"1630": {
    "doc": "SAM L22 Xplained Pro Evaluation Kit",
    "title": "SAM L22 Xplained Pro Evaluation Kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM L22 Xplained Pro Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | SD Card, USB Data Logger with SLCD | Click Here | . More Application Demos . For more application demos on SAM L22 Xplained Pro Evaluation Kit and other Development Boards/Kits having the same part number (ATSAML22N18A) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps/sam_l22_xpro/readme.html",
    "relUrl": "/apps/sam_l22_xpro/readme.html"
  },"1631": {
    "doc": "32-bit MCU Reference Applications",
    "title": "Reference Application Repository",
    "content": "This repository contains the MPLAB® Harmony 3 reference applications developed on Microchip 32-bit SAM/PIC MCU and MPU development boards/kits. ",
    "url": "http://localhost:4000/reference_apps/apps/readme.html#reference-application-repository",
    "relUrl": "/apps/readme.html#reference-application-repository"
  },"1632": {
    "doc": "32-bit MCU Reference Applications",
    "title": "32-bit MCU Reference Applications",
    "content": "The following reference applications are provided to evaluate solutions on 32-bit SAM and PIC MCUs. | Board/Kit | Link | . | | PIC32CZ CA90 Curiosity Ultra Development Board | . | | PIC32CZ CA80 Curiosity Ultra Development Board | . | | PIC32CX SG41 Curiosity Ultra Evaluation Board | . | | PIC32CX SG61 Curiosity Ultra Evaluation Board | . | | PIC32CM LE00 Curiosity Pro Evaluation Kit | . | | PIC32CM LS00 Curiosity Pro Evaluation Kit | . | | PIC32CM LS60 Curiosity Pro Evaluation Kit | . | | PIC32CM JH01 Curiosity Pro Development Board | . | | SAM D21 IoT v2 Development Board | . | | PIC32CM LS60 Smart Lock Reference Board | . | | PIC32MZ DA Radial Graphics Development Board (RGDB) | . | | PIC32MK MCM Curiosity Pro Development Board | . | | PIC32CM MC00 Curiosity Pro Development Board | . | | PIC32CM MC00 Curiosity Nano Evaluation Kit | . | | SAM E51 Curiosity Nano Evaluation Kit | . | | PIC32MZ DA Curiosity Development Kit | . | | SAM D21 Curiosity Nano Evaluation Kit | . | | Curiosity PIC32MZ EF 2.0 Development Board | . | | SAM L10 Xplained Pro Evaluation Kit | . | | SAM L21 Xplained Pro Evaluation Kit | . | | SAM C21 Xplained Pro evaluation kit | . | | SAMC21N Xplained Pro Evaluation Kit | . | | SAM E70 Xplained Ultra Evaluation Kit | . | | SAM E70 Xplained Evaluation Kit | . | | SAM E54 Xplained Pro Evaluation Kit | . | | SAM E54 Curiosity Ultra Development Board | . | | SAM D21 Xplained Pro Evaluation Kit | . | | PIC32MK General Purpose (GP) Development Kit | . | | Curiosity PIC32MX470 Development Board | . | | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | | SAM L11 Xplained Pro Evaluation Kit | . | | SAM L22 Xplained Pro Evaluation Kit | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MCU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc . ",
    "url": "http://localhost:4000/reference_apps/apps/readme.html",
    "relUrl": "/apps/readme.html"
  },"1633": {
    "doc": "Graphics Getting Started",
    "title": "Graphics Getting Started  Application on SAM9X60 Curiosity Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#graphics-getting-started--application-on-sam9x60-curiosity-development-board",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#graphics-getting-started--application-on-sam9x60-curiosity-development-board"
  },"1634": {
    "doc": "Graphics Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html"
  },"1635": {
    "doc": "Graphics Getting Started",
    "title": "Description",
    "content": "This graphics application demonstrates how to display the Microchip Graphics Quick Start project template to the Maxtouch 5-inch display on the SAM9X60 Curiosity Development board. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#description",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#description"
  },"1636": {
    "doc": "Graphics Getting Started",
    "title": "Key Highlights of SAM9X60 Curiosity Development Board:",
    "content": ". | LCD Interface. | External Non-Volatile Memories like NAND, SD, and MicroSD card interfaces. | Additional sensors can be interfaced using “click boards” through an on-board mikroBUS connector. | Two mechanical programmable buttons. | One User Input Switch and one RGB LED. | UART, USB and CAN Interfaces. | Raspberry pi connectors. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#key-highlights-of-sam9x60-curiosity-development-board",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#key-highlights-of-sam9x60-curiosity-development-board"
  },"1637": {
    "doc": "Graphics Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Flexcom | LCDC Interface | TC0 (TWI/I2C) | MAXTOUCH Controller interface | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#modulestechnology-used"
  },"1638": {
    "doc": "Graphics Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM9X60 Curiosity development board | High-Performance WVGA LCD Display Module with maXTouch ® Technology | Micro SD Card | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#hardware-used",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#hardware-used"
  },"1639": {
    "doc": "Graphics Getting Started",
    "title": "Software/Tools Used:",
    "content": ". | MPLAB® X IDE | MPLAB® XC32 Compiler | MPLAB® Code Configurator (MCC) | . This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/lcdc_rgba8888_mxt_9x60_wvga to know the MPLAB® X IDE, MCC Plugin, libraries version . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#softwaretools-used"
  },"1640": {
    "doc": "Graphics Getting Started",
    "title": "Hardware Setup : ",
    "content": ". | Connect the ribbon cable from the display to the J13 connector of the SAM9X60 Curiosity Development Board. | Power up the board by connecting the USB cable to the USB port J1 on the SAM9X60 curiosity development board. | Connect external debugger to J12. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html"
  },"1641": {
    "doc": "Graphics Getting Started",
    "title": "Developing a graphics getting started demo",
    "content": "Details . | Launch MPLAB® X IDE- From the main menu, click on File, then New Project. Under “Projects” choose 32-bit MCC Harmony Project, click Next- For Framework Path choose the location on your PC where you want to download the Harmony 3 framework- Click Next. | Enter Location , Folder and Name of the project. Click Next. | In the Configuration Settings window, for Name enter lcdc_rgba8888_mxt_9x60_wvga, for Device Family select SAM, for Target Device select SAM9X60D1G. Click Finish. This creates an empty project and set this project as main project if there are other projects open in the project explorer window. | From main menu, click on Tools -&gt; Embedded -&gt; MPLAB® Code Configurator or click MCC button in the MPLAB® X IDE tool bar. It will launch Content manger Wizard. Then select MPLAB® Harmony. | In addition to the required packages, download the optional packages gfx_sam9x60, bsp, csp, core, gfx, dev_packs and then click Finish. Content download will take some time. Please wait till all the contents are downloaded. | Now project graph will be displayed. From device resource add Board Support Packages for SAM9X60 Curiosity Kit BSP to Project Graph. | From device resource add Graphics -&gt; Templates -&gt; Legato Graphics w/PDA TM5000 Display to Project Graph. You will be prompted to allow auto-connection and auto-activation of several components- Click on Yes for all of them except “FreeRTOS”. | Choosing the Legato Graphics w/PDA TM5000 Display template automatically populates rest of the project components. This can be seen in the way the project graph is setup and connected. | In the project graph, click on Flexcom6. In the Configuration Options window, select clock speed as 100,000 (100KHz). | In the project graph, click on LE LCDC Driver. In the Configuration Options window, select output color mode as 18BPP. | From the project graph window, plugins menu select Pin Configuration. | You can see that PA30 and PA31 are set to FLEXCOM6. Enable pullups for those pins. Ensure all the pins are configured as below: . | Now Save all. Then click generate code. This will generate code for all the peripherals that have been added in the project graph. | Now let us use Microchip Graphics Composer(MGC) to design the graphics to be displayed on the LCD screen and generate the legato library. From the Project graph -&gt; plugin, launch Legato Graphics Composer. (From next software update, this plugin will be renamed to Microchip Graphics Composer) . | From the window that pops-up, click on Create a new project using the new project wizard. | In the Display Configuration window, choose WVGA (800x480) for Presets and click on Apply. You will see that the Width and Height are updated. Click Next. | For Color Mode -&gt; select RGBA_8888. Click Next. For Memory Profile -&gt; select MPU. Click Next. In the Project Template window, select the Start with a basic quickstart project template checkbox. Click Next. Click Finish . | You will see the following screen generated by the composer. | After the graphics display is composed, you can generate the design files by clicking the Generate Code from the File option in the main menu . | You can save the design files by clicking on File from the main menu and selecting Save As. Provide a filename with _design and save it in the ( That way the next time MGC is launched, the design file is automatically opened) and click Save. | You can now exit Microchip Graphics Composer by clicking on Exit from File option in the main menu. | From MCC, click on Generate Code. This will generate code for the quickstart template designed using Microchip Graphics Composer. | Lastly change the following code. In Legato -&gt; renderer -&gt; legato_renderer.c, add proper section for no cache attribute as shown below: The .region_nocache memory location is defined in the linker file and lets the linker know which memory region is to be used for scratch buffers. | Now right click on the project and click Properties. For Connected Hardware Tool -&gt; select connected hardware debugger used, for Compiler Toolchain -&gt; select XC32 and click Apply. | From J-32 , Option categories choose Communication and for JTAG Method, select 4-wire JTAG. | Select Bootstrap for Categories and select the Use Bootstrap checkbox. For bootstrap file -&gt; select the at91bootstrap elf file from here- Click on Apply and OK. | Clean and build the project. You should see a message on the output console that the project was successfully built. This completes the development of the basic graphics quickstart getting started application. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#developing-a-graphics-getting-started-demo",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#developing-a-graphics-getting-started-demo"
  },"1642": {
    "doc": "Graphics Getting Started",
    "title": "Debugging Application Project on MPLAB® X IDE:",
    "content": ". | Open the project (sam9x60_cu_graphics_getting_started/firmware/sam9x60_cu.X) in MPLAB® X IDE. | Ensure “SAM9X60D1G” is selected as hardware tool to program/debug the application. | Build the code and Debug the code by clicking on the “Debug” button in MPLAB® X IDE tool bar. | Run the application by clicking “run” button in MPLAB® X IDE tool bar. | Now the below legato quickstart template application will get displayed on the LCD connected with SAM9X60 Curiosity development board. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#debugging-application-project-on-mplab-x-ide",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#debugging-application-project-on-mplab-x-ide"
  },"1643": {
    "doc": "Graphics Getting Started",
    "title": "Running the pre-built harmony application from SD Card:",
    "content": "The pre-built application bin file can be programmed by following the below steps . Steps to program the bin file on SD card . | Take a micro-SD Card formatted with FAT32 file system. | Copy the boot.bin and harmony.bin files from this location to the micro-SD card using your PC. | Insert the SD card to J3 on the SAM9X60 Curiosity development board. | . Steps to run the bin file from SD card . | Press the reset button. | It will display the below graphics getting started demo -a legato quickstart template application on the display connected with SAM9X60 Curiosity development board. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#running-the-pre-built-harmony-application-from-sd-card",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#running-the-pre-built-harmony-application-from-sd-card"
  },"1644": {
    "doc": "Graphics Getting Started",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section- If you need to enhance/customize this application demo, you need to use the MPLAB® Harmony v3 Software framework- Refer links below to setup and build your applications using MPLAB® Harmony. | How to Setup MPLAB® Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB® Harmony v3 Project | Click Here for more graphics demos | MPLAB® Harmony v3 is also configurable through MPLAB® Code Configurator (MCC)- Refer to the below links for specific instructions to use MPLAB® Harmony v3 with MCC. | Getting Started with MPLAB® Harmony v3 Using MPLAB® Code Configurator | MPLAB® Code Configurator Content Manager for MPLAB® Harmony v3 Projects | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#comments",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#comments"
  },"1645": {
    "doc": "Graphics Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#revision",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html#revision"
  },"1646": {
    "doc": "Graphics Getting Started",
    "title": "Graphics Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_graphics_getting_started/readme.html"
  },"1647": {
    "doc": "Snake Game",
    "title": "Snake Game Application on SAM9X60 Curiosity Development Board + High-Performance WVGA LCD Display Module with maXTouch Technology using Microchip Graphics Composer.",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#snake-game-application-on-sam9x60-curiosity-development-board--high-performance-wvga-lcd-display-module-with-maxtouch-technology-using-microchip-graphics-composer",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#snake-game-application-on-sam9x60-curiosity-development-board--high-performance-wvga-lcd-display-module-with-maxtouch-technology-using-microchip-graphics-composer"
  },"1648": {
    "doc": "Snake Game",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html"
  },"1649": {
    "doc": "Snake Game",
    "title": "Description:",
    "content": "This demonstration represents the classic snake game wherein the player maneuvers the snake and tries to eat the mice (food), which eventually grows the length of the snake. The player needs to protect the snake from hitting the boundary. The application uses the Legato Graphics library to implement the user interface. The template of each screen is made using the Microchip Graphics Composer, while the snake is created using rectangle widgets used inside a double chained list. Player can change the direction of the snake by swiping left, right, up, and down on the maXTouch® display. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#description",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#description"
  },"1650": {
    "doc": "Snake Game",
    "title": "Key Highlights of SAM9X60 Curiosity Development Board:",
    "content": ". | LCD Interface. | External Non-Volatile Memories like NAND, SD, and MicroSD card interfaces. | Additional sensors can be interfaced using “click boards” through an on-board mikroBUS connector. | Two mechanical programmable buttons. | One User Input Switch and one RGB LED. | UART, USB and CAN Interfaces. | Raspberry pi connectors. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#key-highlights-of-sam9x60-curiosity-development-board",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#key-highlights-of-sam9x60-curiosity-development-board"
  },"1651": {
    "doc": "Snake Game",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | Maxtouch Controller Interface | LCDC display driver | Flexcom (TWI/I2C) | TC0 | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#modulestechnology-used",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#modulestechnology-used"
  },"1652": {
    "doc": "Snake Game",
    "title": "Hardware Used:",
    "content": ". | SAM9X60 Curiosity development board | High-Performance WVGA LCD Display Module with maXTouch ® Technology | Micro SD Card | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#hardware-used",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#hardware-used"
  },"1653": {
    "doc": "Snake Game",
    "title": "Software/Tools Used:",
    "content": ". | MPLAB® X IDE | MPLAB® XC32 Compiler | MPLAB® Code Configurator (MCC) | . This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default to know the MPLAB® X IDE, MCC, libraries version. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#softwaretools-used",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#softwaretools-used"
  },"1654": {
    "doc": "Snake Game",
    "title": "Setup:",
    "content": ". | Connect the ribbon cable from the display to the J13 connector of the SAM9X60 Curiosity Development Board. | Power up the board by connecting the powered USB cable to the USB port J1 on the SAM9X60 curiosity development board. | Connect external J32 debugger at J12. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#setup",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#setup"
  },"1655": {
    "doc": "Snake Game",
    "title": "Programming/Debugging Application Project on MPLAB® X IDE:",
    "content": ". | Open the project (sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/firmware/sam9x60_cu.X) in MPLAB® X IDE. | Now right click on the project and click Properties. For Connected Hardware Tool -&gt; select connected external hardware debugger, for Compiler Toolchain -&gt; select XC32 and click Apply. | From J-Link , Option categories choose Communication and for JTAG Method, select 4-wire JTAG. | Select Bootstrap for Categories and select the Use Bootstrap checkbox. For bootstrap file, select the at91bootstrap elf file from here- Click on Apply and OK. | Clean and build the project. You should see a message on the output console that the project was successfully built. | Debug the code by clicking on the “Debug” button in MPLAB® X IDE tool bar. | Run the application by clicking “run” button in MPLAB® X IDE tool bar. | A splash screen should appear followed by the Menu screen. | Select the level from the menu screen by touching the level button on the display. | Swipe left, right, up or down on the display to change the snake direction in order to reach the food. | By pressing the User Switch user can go back to the Menu. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#programmingdebugging-application-project-on-mplab-x-ide",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#programmingdebugging-application-project-on-mplab-x-ide"
  },"1656": {
    "doc": "Snake Game",
    "title": "Running the pre-built harmony application from SD Card:",
    "content": "The pre-built application bin file can be programmed by following the below steps: . Steps to program the bin file on SD card . | Take a micro-SD Card formatted with FAT32 file system. | Copy the boot.bin and harmony.bin files from this location to the micro-SD card using your PC. | Insert the SD card to J3 on the SAM9X60 Curiosity development board. | . Steps to run the bin file from SD card . | Perform a reset by pressing RESET button on the SAM9X60 Curiosity Development Board | After the board powers up, a splash screen should appear followed by the Menu screen. | Select the level from the menu screen by touching the level button on the display. | Swipe left, right, up or down on the display to change the snake direction in order to reach the food. | By pressing the User Switch user can go back to the Menu. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#running-the-pre-built-harmony-application-from-sd-card",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#running-the-pre-built-harmony-application-from-sd-card"
  },"1657": {
    "doc": "Snake Game",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section- If you need to enhance/customize this application demo, you need to use the MPLAB® Harmony v3 Software framework- Refer links below to setup and build your applications using MPLAB® Harmony. | How to Setup MPLAB® Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB® Harmony v3 Project | Getting Started with MPLAB® Harmony v3 Using MPLAB® Code Configurator | MPLAB® Code Configurator Content Manager for MPLAB® Harmony v3 Projects | Microchip Graphics Composer | Click Here for more graphics demos | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#comments",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#comments"
  },"1658": {
    "doc": "Snake Game",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#revision",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html#revision"
  },"1659": {
    "doc": "Snake Game",
    "title": "Snake Game",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/sam9x60_cu_snake_game/readme.html"
  },"1660": {
    "doc": "SAM9X60 Curiosity Development Board",
    "title": "SAM9X60 Curiosity Development Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM9X60 Curiosity Development Board. | SI No | Demo Name | Download Link | . | 1 | Graphics Getting Started | Click Here | . | 2 | Snake Game | Click Here | . More Application Demos . For more application demos on SAM9X60 Curiosity Development Board and other Development Boards/Kits having the same part number (SAM9X60) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_curiosity_dev_board/readme.html",
    "relUrl": "/apps_mpu/sam9x60_curiosity_dev_board/readme.html"
  },"1661": {
    "doc": "QSPI XIP",
    "title": "Blink LED Application getting executed from QSPI flash on SAM9X60 Evaluation kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#blink-led-application-getting-executed-from-qspi-flash-on-sam9x60-evaluation-kit",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#blink-led-application-getting-executed-from-qspi-flash-on-sam9x60-evaluation-kit"
  },"1662": {
    "doc": "QSPI XIP",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html"
  },"1663": {
    "doc": "QSPI XIP",
    "title": "Description",
    "content": "This application demonstrates how to run and debug an application executed from QSPI flash on SAM9X60 Evaluation Kit. Blue LED turn ON when user input key(sw1) is pressed. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#description",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#description"
  },"1664": {
    "doc": "QSPI XIP",
    "title": "Key Highlights of SAM9X60 Evaluation kit:",
    "content": ". | LCD Interface. | External Non-Volatile Memories like NAND, SD, and MicroSD card interfaces. | Additional sensors can be interfaced using “click boards” through an on-board mikroBUS connector. | Two mechanical programmable buttons. | One User Input Switch(sw1) and one RGB LED. | UART, USB and CAN Interfaces. | Raspberry pi connectors. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#key-highlights-of-sam9x60-evaluation-kit",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#key-highlights-of-sam9x60-evaluation-kit"
  },"1665": {
    "doc": "QSPI XIP",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | BSP | DBGU | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#modulestechnology-used",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#modulestechnology-used"
  },"1666": {
    "doc": "QSPI XIP",
    "title": "Hardware Used:",
    "content": ". | SAM9X60 Evaluation kit. | SD Card. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#hardware-used",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#hardware-used"
  },"1667": {
    "doc": "QSPI XIP",
    "title": "Software/Tools Used:",
    "content": ". | MPLAB® X IDE. | MPLAB® XC32 Compiler. | MPLAB® Code Configurator (MCC). | . This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default to know the MPLAB® X IDE, MCC Plugin, libraries version. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#softwaretools-used",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#softwaretools-used"
  },"1668": {
    "doc": "QSPI XIP",
    "title": "Hardware Setup : ",
    "content": ". | Power up the board by connecting 5V/2A power adapter to J1 or connect the USB Micro-B port(J7) to the Host PC using a micro-USB cable. | Connect the USB Micro-B port (J22- J-Link-CDC) on board to the computer using a micro-USB cable (to print debug messages on the serial console). | Default jumper settings should be as follows: | Press the start button(nSTART switch) on the board. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html"
  },"1669": {
    "doc": "QSPI XIP",
    "title": "Developing an application executed from QSPI flash memory:",
    "content": "Details . | Launch MPLAB® X IDE- From the main menu, click on File, then New Project. Under Projects choose 32-bit MCC Harmony Project, click Next- For Framework Path choose the location on your PC where you want to download the Harmony 3 framework- Click Next. Note: If you have already downloaded the Harmony 3 framework, enter the location of the harmony framework. | Enter Location , Folder and Name of the project. Click Next. | In the Configuration Settings window, for Name enter default, for Device Family select SAM, for Target Device select SAM9X60. Click Finish. This creates an empty project and set this project as main project. If there are other projects open in the project explorer window, set this project as main project by right clicking on the project, choose ‘Set as Main Project’. | After the project is created, MCC will be automatically launched. (To launch MCC manually, from main menu, click on Tools -&gt; Embedded -&gt; MPLAB® Code Configurator or click MCC button in the MPLAB® X IDE tool bar). It will launch Content manger Wizard. Then select MPLAB® Harmony. | In addition to the required packages, download the optional packages bsp, csp, core, dev_packs and then click Finish. Content download will take some time. Please wait till all the contents are downloaded. | Now a project graph will be displayed. From Device Resource add Board Support Packages for SAM9X60 Evaluation kit BSP to Project Graph. | From Device Resource, Peripherals -&gt; add DBGU to the Project Graphand ensure the configuartion options of DBGU as shown below. This helps to print the debug messages (console serial communication messages) via comm port. | Ensure all the pins are configured as below: PA9 and PA10 are for console serial debugging. PD18 should be configured for user input switch. PB11, PB12, PB13 are for LEDs red, green, and blue respectively. Configure the pins PB19, PB20,PB21, PB22, PB23, PB24 for QSPI as mentioned in the below image. | Now Save all. Then click generate code. This will generate code for all the Device Resource that have been added in the project graph. | Up to this point in the project creation process, you used MPLAB Code Configurator(MCC) to configure and generate code to initialize the device (SAM9X60) . Refer initialization.c to find all the device resource added in the project graph got initialized. All that is left is for the user to write the application code in the main.c file. Documentation for each of the peripheral libraries or bsp libraries can be accessed as follows: . | Peripheral libraries APIs can be accessed as a HTML file (*.html) from the Harmony 3 Framework path. (//csp/docs/index.html) | BSP libraries APIs can be found in bsp.h | . | APIs used for this application are as follows: . | bool DBGU_Write( void* buffer, const size_t size ); | bool DBGU_WriteIsBusy( void ); | LED_BLUE_On(); | LED_BLUE_Off); | SW1_Get(); | . | Sample code can be found here. | Now right click on the project and click Properties. For Connected Hardware Tool -&gt; select connected hardware debugger used, for Compiler Toolchain -&gt; select XC32 and click Apply. | From J-32/J-Link, Option categories choose Communication and for JTAG Method, select 4-wire JTAG. | Select Bootstrap for Categories and select the Use Bootstrap checkbox. For bootstrap file -&gt; select the at91bootstrap elf file from here- Click on Apply and OK. | By default, MPLAB X only produces ELF and Hex format output files. To generate application output in binary format, a post build step needs to be added to the project properties. To do this, go to project properties, building, click the check box Execute this line after build, then enter the below command. \${MP_CC_DIR}/xc32-objcopy -O binary \${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.elf \${DISTDIR}/harmony.bin | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#developing-an-application-executed-from-qspi-flash-memory",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#developing-an-application-executed-from-qspi-flash-memory"
  },"1670": {
    "doc": "QSPI XIP",
    "title": "Linker file modifications to execute an application from QSPI flash(offset 0x40000)",
    "content": "In this example we have demonstrated an application getting executed from QSPI flash offset 0x40000. Note : To change the QSPI offset from where application will get executed, at91bootstrap kconfig must be configured and built. The following linker file(ddram.ld) modifications are required to enable application getting executed from QSPI: . | Define only two memory regions: . | Assign text section to rom(qspi) and data section to relocate section(so, it will be copied from qspi memory to sram during runtime). Note : bss and relocate sections should be NOLOAD sections bss and relocate sections should be load from rom(qspi) and run from ram(sram) . | Remove cache aligned sections and assign _ramcode_lma and _ramdata_lma to ram as shown below. | Sample linker file can be found here. | Its a good practice to remove unused input section while building output binary. To do this, go to project properties , xc32-ld config , check Remove Unused Sections as shown below. | . *Now clean and build the project. You should see a message on the output console that the project was successfully built. This completes the development of the application. The harmony.bin file can be found in your /project_directory/dist/default/production/harmony.bin. &lt;/details&gt; . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#linker-file-modifications-to-execute-an-application-from-qspi-flashoffset-0x40000",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#linker-file-modifications-to-execute-an-application-from-qspi-flashoffset-0x40000"
  },"1671": {
    "doc": "QSPI XIP",
    "title": "SAM-BA Installation and Setup:",
    "content": ". | Install SAM-BA tool on your windows host PC. | To Download the latest version of SAM-BA tool for Windows click this link. | Download the ZIP file and unzip it into a working directory of your choice. | Add the SAM-BA directory path to the environment variables. | To do this from your PC –&gt; Open the Start Search, type in “env”. | Choose “Edit the system environment variables” –&gt; Click “Environment Variables” –&gt; “System Variables” –&gt; add SAM-BA directory path to path variables. | . | Once the SAM-BA Host program has been installed, the execution of the application is from the Windows command prompt. | . | Setup to flash using SAM-BA: . | Open Disable boot Jumper(J13) on SAM9X60 Evaluation Kit. | Ensure there is no SD memory card inserted and there is no application on any of the external NVMs. | Press start button. | Push and hold the “BOOT_DIS” button.(This disables booting from the onboard memories - NAND and NOR(QSPI) flash Memory) | Reset the board by pressing and then releasing the reset “nRST” button. | Release the “BOOT_DIS” button. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#sam-ba-installation-and-setup",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#sam-ba-installation-and-setup"
  },"1672": {
    "doc": "QSPI XIP",
    "title": "Configure first stage bootloader to boot from QSPI flash:",
    "content": "Use the below SAM-BA commands to configure first stage bootloader to boot from QSPI. Click here to learn about boot process and first stage boot configuration. Note: It is not a mandatory step. | sam-ba -p j-link -b sam9x60-ek -a bootconfig -c writecfg:bscr:EMULATION_ENABLED // Enable Emulation | sam-ba -p j-link -b sam9x60-ek -a bootconfig -c readcfg:bscr // Read bscr and verify emulation is enabled | sam-ba -p j-link -b sam9x60-ek -a bootconfig -c resetemul // Emulation SRAM Reset | sam-ba -p j-link -b sam9x60-ek -a bootconfig -c writecfg:bcp-emul:DBGU,QSPI0_IOSET1 // Enable debug, QSPI0 as external NVM | sam-ba -p j-link -b sam9x60-ek -a bootconfig -c readcfg:bcp-emul // Read bcp_emul and verify whether QSPI is set as external NVM Now reset the board by pressing reset button. | . Note: Boot configuration using Emulation SRAM has to be set every power cycle. User can also write boot configuration packet(BCP) to OTPC(One Time Programmable Memory Controller). Refer SAM-BA installation directory on how to write BCP to OTPC . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#configure-first-stage-bootloader-to-boot-from-qspi-flash",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#configure-first-stage-bootloader-to-boot-from-qspi-flash"
  },"1673": {
    "doc": "QSPI XIP",
    "title": "Debugging Application Project on MPLAB® X IDE:",
    "content": ". | Open the project (sam9x60_ek_blink_led_qspi_xip/firmware/sam9x60_ek.X) in MPLAB® X IDE. | In the project properties, ensure SAM9X60 is selected as the ‘Device’ and for Connected Hardware Tool, select connected J-Link debugger with the board to program/debug the application. | Build the code. The harmony.bin file can be found in your /project_directory/dist/default/production/harmony.bin. | Before debugging ensure that harmony.bin file in your project directory is flashed in the QSPI offset. | Refer the section “SAM-BA Installation and Setup” for initial device setup and tool installation procedure. | Use the below sam-ba commands to erase QSPI flash and program the application. | sam-ba -p j-link -b sam9x60-ek -a qspiflash -c erase //To erase entire QSPI flash | sam-ba -p j-link -b sam9x60-ek -a qspiflash -c erase:0x40000:0x20000 //Erase only 0x20000 bytes of data from the QSPI offset 0x40000 | sam-ba -p j-link -b sam9x60-ek -a qspiflash -c write:harmony.bin:0x40000 //Program the application in the QSPI offset 0x40000 Note : Don’t flash boot.bin to QSPI memory to debug the application on MPLAB® X IDE. | . | Debug the code by clicking on the “Debug” button in MPLAB® X IDE tool bar and observe that the application is getting executed from QSPI flash memory. | Run the application by clicking the “run” button in MPLAB® X IDE tool bar. A terminal emulation program running on the Host PC communicates with the SAM9X60 Evaluation kit J-Link CDC. Ensure the terminal emulation program(Eg: PUTTY) is configured to the COM port and settings are: . | Speed: 115200 | Data: 8 | Parity: None | Stop Bits: 1 | . | Now, you will get the debug message on the serial console as “This application is getting executed from QSPI-offset 0x40000”. Now press the user button(sw1) and observe LED getting turned ON. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#debugging-application-project-on-mplab-x-ide",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#debugging-application-project-on-mplab-x-ide"
  },"1674": {
    "doc": "QSPI XIP",
    "title": "Running the pre-built harmony application from QSPI flash memory:",
    "content": "The boot.bin and harmony.bin files can be found from this location The pre-built application bin file and boot bin file can be programmed to QSPI flash using SAM-BA . Refer the above section: “SAM-BA Installation and Setup” for initial device setup and tool installation procedure. SAM-BA commands to program the boot and application file to QSPI flash: . | sam-ba -p j-link -b sam9x60-ek -a qspiflash -c erase //To erase entire QSPI flash | sam-ba -p j-link -b sam9x60-ek -a qspiflash -c writeboot:boot.bin //To program bootstrap bin file | sam-ba -p j-link -b sam9x60-ek -a qspiflash -c write:harmony.bin:0x40000 //Program the application in the QSPI offset 0x40000 Note : Flash both boot.bin and harmony.bin to QSPI memory to execute the application from QSPI upon reset . | . Steps to execute the harmony application from QSPI flash: . | Press the reset button. | Now, you will get the debug message on the serial console as “This application is getting executed from QSPI-offset 0x40000”. Now press the user button(sw1) and observe LED getting turned ON. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#running-the-pre-built-harmony-application-from-qspi-flash-memory",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#running-the-pre-built-harmony-application-from-qspi-flash-memory"
  },"1675": {
    "doc": "QSPI XIP",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section- If you need to enhance/customize this application demo, you need to use the MPLAB® Harmony v3 Software framework- Refer links below to setup and build your applications using MPLAB® Harmony. | How to Setup MPLAB® Harmony v3 Software Development Framework | Click Here to learn more about SAM9X60-EK | MPLAB® Harmony v3 is also configurable through MPLAB® Code Configurator (MCC)- Refer to the below links for specific instructions to use MPLAB® Harmony v3 with MCC. | Getting Started with MPLAB® Harmony v3 Using MPLAB® Code Configurator | MPLAB® Code Configurator Content Manager for MPLAB® Harmony v3 Projects | Click Here for more Harmony V3 applications | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#comments",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#comments"
  },"1676": {
    "doc": "QSPI XIP",
    "title": "Revision:",
    "content": "– v1.6.0 - Released demo application . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#revision",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html#revision"
  },"1677": {
    "doc": "QSPI XIP",
    "title": "QSPI XIP",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html",
    "relUrl": "/apps_mpu/sam9x60_ek/sam9x60_ek_blink_led_qspi_xip/readme.html"
  },"1678": {
    "doc": "SAM9X60 Evaluation kit",
    "title": "SAM9X60 Evaluation kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM9X60 Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | QSPI XIP | Click Here | . More Application Demos . For more application demos on SAM9X60 Evaluation Kit and other Development Boards/Kits having the same part number (SAM9X60) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x60_ek/readme.html",
    "relUrl": "/apps_mpu/sam9x60_ek/readme.html"
  },"1679": {
    "doc": "USB Host APP Getting Started",
    "title": "USB Host Getting Started Application on SAM9X75 Early Access Evaluation Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#usb-host-getting-started-application-on-sam9x75-early-access-evaluation-board",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#usb-host-getting-started-application-on-sam9x75-early-access-evaluation-board"
  },"1680": {
    "doc": "USB Host APP Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html"
  },"1681": {
    "doc": "USB Host APP Getting Started",
    "title": "Description",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Host HID Client Driver to enumerate and operate a HID keyboard device. This application creates a USB Host application that uses the USB Host Layer, HID Client driver and HID Keyboard Usage driver to enumerate a USB keyboard and understand keyboard press release events. The keyboard events are displayed using a terminal emulator on a personal computer. A green LED will turn ON when keyboard is connected and will turn OFF when the keyboard is disconnected. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#description",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#description"
  },"1682": {
    "doc": "USB Host APP Getting Started",
    "title": "Key Highlights of SAM9X75 Early Access Evaluation Board:",
    "content": ". | MIPI and LVDS LCD Interfaces. | External Non-Volatile Memories like NAND, and SD card interfaces. | Additional sensors can be interfaced using “click boards” through an on-board mikroBUS connector. | Two mechanical programmable buttons. | One User Input Switch and one RGB LED. | UART, USB and CAN Interfaces. | Raspberry pi connectors. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#key-highlights-of-sam9x75-early-access-evaluation-board",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#key-highlights-of-sam9x75-early-access-evaluation-board"
  },"1683": {
    "doc": "USB Host APP Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | USB | TC0 | DBGU | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#modulestechnology-used"
  },"1684": {
    "doc": "USB Host APP Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAM9X75 Early Access Evaluation Board. | A commercially available USB Keyboard. | SD Card. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#hardware-used",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#hardware-used"
  },"1685": {
    "doc": "USB Host APP Getting Started",
    "title": "Jumper Settings:",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#jumper-settings",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#jumper-settings"
  },"1686": {
    "doc": "USB Host APP Getting Started",
    "title": "Software/Tools Used:",
    "content": ". | MPLAB® X IDE. | MPLAB® XC32 Compiler. | MPLAB® Code Configurator (MCC). | . This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default to know the MPLAB® X IDE, MCC Plugin, libraries version Note: USB label should be v3.11.0 or higher. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#softwaretools-used"
  },"1687": {
    "doc": "USB Host APP Getting Started",
    "title": "Hardware Setup : ",
    "content": ". | Power up the board by connecting 5V/2A power adapter to the SAM9X75 Early Access Evaluation Board. | Press the start(nSTART switch) button on the board. | Connect the USB Keyboard to the J29-B connector of the SAM9X75 Early Access Evaluation Board. | Connect the UART port (J34) on board to the computer using a USB to 5V Serial UART Cable(to enable debug com port). | Connect external JTAG debugger to J37. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html"
  },"1688": {
    "doc": "USB Host APP Getting Started",
    "title": "Developing a USB Host demo application",
    "content": "Details . | Launch MPLAB® X IDE- From the main menu, click on File, then New Project. Under Projects choose 32-bit MCC Harmony Project, click Next- For Framework Path choose the location on your PC where you want to download the Harmony 3 framework- Click Next. | Enter Location , Folder and Name of the project. Click Next. | In the Configuration Settings window, for Name enter default, for Device Family select SAM, for Target Device select SAM9X75. Click Finish. This creates an empty project and set this project as main project. If there are other projects open in the project explorer window, set this project as main project by right clicking on the project, choose ‘Set as Main Project’. | After the project is created, MCC will be automatically launched. (To launch MCC manually, from main menu, click on Tools -&gt; Embedded -&gt; MPLAB® Code Configurator or click MCC button in the MPLAB® X IDE tool bar.) It will launch Content manger Wizard. Then select MPLAB® Harmony. | In addition to the required packages(csp, dev_packs), download the optional packages usb, bsp, core and then click Finish. Content download will take some time. Please wait till all the contents are downloaded. | Now a project graph will be displayed. From Device Resource add Board Support Packages for SAM9X75 Evaluation Board BSP to Project Graph. | From Device Resource, Libraries -&gt; Host Stack , add HID Client Driver to the Project Graph. You will be prompted to allow auto-connection and auto-activation of several components- Click on Yes for all of them except “FreeRTOS”. | Choosing the HID Client Driver template automatically populates the rest of the project components. This can be seen in the way the project graph is set up and connected. | From Device Resource, Peripherals -&gt; add DBGU to the Project Graph. This helps to print the debug messages (console serial communication messages) via comm port. | In the project graph, right click on TMR in Time and then add satisfiers TC0. | From the project graph window, click the HID Client Driver and in the Configuration Options choose Use Keyboard Driver . | From the project graph window, click the USB Host Port HS Driver and in the Configuration Options enter Port Selection as 0x02(SAM9X75 Early Access Evaluation Board has two host std Type A receptacle’s, user can choose the one they want to enable(0x01 or 0x02)) . | Refer section 29.5 of the SAM9X75 data sheet which says “The USB device and host ports requires both the 48 MHz signal and the peripheral clock”. Main clock= 24MHz, UPLL Clock= 24MHz*40/2 =480MHz Here UPLL Multiplier= 39 , USB Clock= 480MHz/10 = 48MHz Here USB Divider= 9. Based on this calculations, configure the USB and peripherals clock signals as mentioned in the next step. | From the project graph window, click the system and in the Configuration Options , do the clock settings as shown below: . | Ensure all the pins are configured as below: PA26 and PA27 are for serial debugging. PC19, PC20, PC21 are for LEDs red, blue, and green respectively. PC27 and PC29 are VBUS Enable of USB. | Now Save all. Then click generate code. This will generate code for all the Device Resource that have been added in the project graph. | Up to this point in the project creation process, you used MPLAB Code Configurator(MCC) to configure and generate code to initialize the device (SAM9X75) and initialize USB host driver. Refer initialization.c to find all the device resource added in the project graph got initialized. All that is left is for the user to write the application code in the app.c file. Documentation for each of the peripheral libraries or diver libraries can be accessed as follows: . | Peripheral libraries APIs can be accessed as a HTML file (*.html) from the Harmony 3 Framework path. (/framework_path/csp/docs/index.html) | BSP libraries APIs can be found in bsp.h | USB host driver APIs can be accessed as a HTML file (*.html) from the Harmony 3 Framework path. (/framework_path/usb/docs/index.html) | . | APIs used for this application are as follows: . | bool DBGU_Write( void* buffer, const size_t size ); | bool DBGU_WriteIsBusy( void ); | bool USB_HOST_HID_KEYBOARD_EventHandlerSet(USB_HOST_HID_KEYBOARD_EVENT_HANDLER appKeyboardEventHandler); | bool USB_HOST_BusEnable(USB_HOST_BUS bus); | bool USB_HOST_BusIsEnabled(USB_HOST_BUS bus); | LED_GREEN_On(); | . | Sample code can be found here and Its header file can be found here. | Now right click on the project and click Properties. For Connected Hardware Tool -&gt; select connected hardware debugger used, for Compiler Toolchain -&gt; select XC32 and click Apply. | From J-32/J-Link, Option categories choose Communication and for JTAG Method, select 4-wire JTAG. | Select Bootstrap for Categories and select the Use Bootstrap checkbox. For bootstrap file -&gt; select the at91bootstrap elf file from here- Click on Apply and OK. | By default, MPLAB X only produces ELF and Hex format output files. To generate application output in binary format, a post build step needs to be added to the project properties. To do this project properties, building, click the check box Execute this line after build, then enter the below command. \${MP_CC_DIR}/xc32-objcopy -O binary \${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.elf \${DISTDIR}/harmony.bin . | . | Clean and build the project. You should see a message on the output console that the project was successfully built. This completes the development of the usb host getting started application. | The harmony.bin binaries will be avialbale at ./firmware/sam9x75_ea.X/dist/default/production. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#developing-a-usb-host-demo-application",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#developing-a-usb-host-demo-application"
  },"1689": {
    "doc": "USB Host APP Getting Started",
    "title": "Debugging Application Project on MPLAB® X IDE:",
    "content": ". | Open the project (sam9x75_ea_usb_host_getting_started/firmware/sam9x75_ea.X) in MPLAB® X IDE. | In the project properties, ensure SAM9X75 is selected as the ‘Device’ and for Connected Hardware Tool, select connected hardware debugger with the board to program/debug the application. | Build the code and debug the code by clicking on the “Debug” button in MPLAB® X IDE tool bar. | Run the application by clicking the “run” button in MPLAB® X IDE tool bar. | Ensure Console Serial communications between the Host PC and the SAM9X75 EA Evaluation Board take place through UART debug port J34. A terminal emulation program running on the Host PC communicates with the SAM9X75 Early Access Evaluation DBGU UART port. Ensure the terminal emulation program(Eg: PUTTY) is configured to the COM port and settings are: . | Speed: 115200 | Data: 8 | Parity: None | Stop Bits: 1 | . | Once the USB host operation is enabled, you will get the debug message on the serial console as “Connect Keyboard”. Once Keyboard is connected, green LED will turn ON and you will get the messages as shown below. Once the Keyboard is disconnected, green LED will turn OFF. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#debugging-application-project-on-mplab-x-ide",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#debugging-application-project-on-mplab-x-ide"
  },"1690": {
    "doc": "USB Host APP Getting Started",
    "title": "Running the pre-built harmony application from SD Card:",
    "content": "The pre-built application bin file can be programmed by following the below steps. Steps to program the bin file on SD card . | Take a SD Card formatted with FAT32 file system. | Copy the boot.bin and harmony.bin files from this location to the SD card using your PC. | Insert the SD card to J8 on the SAM9X75 Early Access Evaluation Board. | . Steps to run the bin file from SD card . | Press the reset button. | Once the USB host operation is enabled, you will get the debug message on the serial console as “Connect Keyboard”. Once keyboard is connected, green LED will turn ON and you will get the messages as shown below. Once the keyboard is disconnected, green LED will turn OFF. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#running-the-pre-built-harmony-application-from-sd-card",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#running-the-pre-built-harmony-application-from-sd-card"
  },"1691": {
    "doc": "USB Host APP Getting Started",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section- If you need to enhance/customize this application demo, you need to use the MPLAB® Harmony v3 Software framework- Refer links below to setup and build your applications using MPLAB® Harmony. | How to Setup MPLAB® Harmony v3 Software Development Framework | Click Here to learn more about USB | MPLAB® Harmony v3 is also configurable through MPLAB® Code Configurator (MCC)- Refer to the below links for specific instructions to use MPLAB® Harmony v3 with MCC. | Getting Started with MPLAB® Harmony v3 Using MPLAB® Code Configurator | MPLAB® Code Configurator Content Manager for MPLAB® Harmony v3 Projects | Click Here for more Harmony V3 applications | Click Here for more Harmony V3 USB applications | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#comments",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#comments"
  },"1692": {
    "doc": "USB Host APP Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#revision",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html#revision"
  },"1693": {
    "doc": "USB Host APP Getting Started",
    "title": "USB Host APP Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/sam9x75_ea_usb_host_getting_started/readme.html"
  },"1694": {
    "doc": "SAM9X75 Early Access Evaluation Board",
    "title": "SAM9X75 Early Access Evaluation Board",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAM9X75 Early Access Evaluation Board. | SI No | Demo Name | Download Link | . | 1 | USB-HOST application Getting Started | Click Here | . More Application Demos . For more application demos on SAM9X75 Early Access Evaluation Board and other Development Boards/Kits having the same part number (SAM9X75) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sam9x75_early_access_eval_board/readme.html",
    "relUrl": "/apps_mpu/sam9x75_early_access_eval_board/readme.html"
  },"1695": {
    "doc": "QSPI XIP",
    "title": "Blink LED Application getting executed from QSPI flash on SAMA7G54 Evaluation kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#blink-led-application-getting-executed-from-qspi-flash-on-sama7g54-evaluation-kit",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#blink-led-application-getting-executed-from-qspi-flash-on-sama7g54-evaluation-kit"
  },"1696": {
    "doc": "QSPI XIP",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html"
  },"1697": {
    "doc": "QSPI XIP",
    "title": "Description",
    "content": "This application demonstrates how to run and debug an application executed from QSPI flash on SAMA7G54 Evaluation Kit. Blue LED turns ON when user input key(sw1) is pressed. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#description",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#description"
  },"1698": {
    "doc": "QSPI XIP",
    "title": "Key Highlights of SAMA7G54 Evaluation kit:",
    "content": ". | 2-lane MIPI-CSI2 (D-PHY) | 12-bit RGB camera | Dual Ethernet (Gigabit and 10/100) | Audio sub-system | 2 SSC and 2 I2SMCC | 2x 4-channel PDMs (up to 8 microphones) | 6 CAN-FD | 3 High-Speed USB ports | 12 FLEXCOMs (USART, SPI, TWI) | 1Gb Octal SPI Flash | 2 EEPROMs w/ EUI-48TM MAC ID | 1 SD card slot | 2 Ethernet ports (Gigabit and 10/100) | Pad for ATWILC3000 Wi-Fi/BT module (unpopulated) | 40-pin Raspberry Pi expansion header | 2 mikroBUS connectors | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#key-highlights-of-sama7g54-evaluation-kit",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#key-highlights-of-sama7g54-evaluation-kit"
  },"1699": {
    "doc": "QSPI XIP",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | BSP | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#modulestechnology-used",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#modulestechnology-used"
  },"1700": {
    "doc": "QSPI XIP",
    "title": "Hardware Used:",
    "content": ". | SAMA7G54 Evaluation kit. | SD Card. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#hardware-used",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#hardware-used"
  },"1701": {
    "doc": "QSPI XIP",
    "title": "Software/Tools Used:",
    "content": ". | MPLAB® X IDE. | MPLAB® XC32 Compiler. | MPLAB® Code Configurator (MCC). | . This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default to know the MPLAB® X IDE, MCC Plugin, libraries version. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#softwaretools-used",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#softwaretools-used"
  },"1702": {
    "doc": "QSPI XIP",
    "title": "Hardware Setup : ",
    "content": ". | Power up the board by connecting 5V/2A power adapter to J1 or connect the USB Micro-B port(J7) to the Host PC using a micro-USB cable. | Connect the USB Micro-B port (J24- J-Link-CDC) on board to the computer using a micro-USB cable (to print debug messages on the serial console). | Default jumper settings should be as follows: | Press the start button(nSTART switch) on the board. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html"
  },"1703": {
    "doc": "QSPI XIP",
    "title": "Developing an application executed from QSPI flash memory:",
    "content": "Details . | Launch MPLAB® X IDE- From the main menu, click on File, then New Project. Under Projects choose 32-bit MCC Harmony Project, click Next- For Framework Path choose the location on your PC where you want to download the Harmony 3 framework- Click Next. Note: If you have already downloaded the Harmony 3 framework, enter the location of the harmony framework. | Enter Location , Folder and Name of the project. Click Next. | In the Configuration Settings window, for Name enter default, for Device Family select SAM, for Target Device select SAMA7G54. Click Finish. This creates an empty project and set this project as main project. If there are other projects open in the project explorer window, set this project as main project by right clicking on the project, choose ‘Set as Main Project’. | After the project is created, MCC will be automatically launched. (To launch MCC manually, from main menu, click on Tools -&gt; Embedded -&gt; MPLAB® Code Configurator or click MCC button in the MPLAB® X IDE tool bar). It will launch Content manger Wizard. Then select MPLAB® Harmony. | In addition to the required packages, download the optional packages bsp, csp, core, dev_packs and then click Finish. Content download will take some time. Please wait till all the contents are downloaded. | Now a project graph will be displayed. From Device Resource add Board Support Packages for SAMA7G5 Evaluation kit BSP to Project Graph. | Ensure all the pins are configured as below: PA13, PB8, PD20 are for LEDs green, red and blue respectively. PA12 is configured for user button. Configure the pins PB9-PB21 for QSPI as mentioned in the below image. | Now Save all. Then click generate code. This will generate code for all the Device Resource that have been added in the project graph. | Up to this point in the project creation process, you used MPLAB Code Configurator(MCC) to configure and generate code to initialize the device (SAMA7G54) . Refer initialization.c to find all the device resource added in the project graph got initialized. All that is left is for the user to write the application code in the main.c file. Documentation for each of the peripheral libraries or bsp libraries can be accessed as follows: . | Peripheral libraries APIs can be accessed as a HTML file (*.html) from the Harmony 3 Framework path. (/framework_path/csp/docs/index.html) | BSP libraries APIs can be found in bsp.h | . | APIs used for this application are as follows: . | LED_BLUE_On(); | LED_BLUE_Off); | USER_BUTTON_Get(); | . | Sample code can be found here. | Now right click on the project and click Properties. For Connected Hardware Tool -&gt; select connected hardware debugger used, for Compiler Toolchain -&gt; select XC32 and click Apply. | From J-32/J-Link, Option categories choose Communication and for JTAG Method, select 4-wire JTAG. | Select Bootstrap for Categories and select the Use Bootstrap checkbox. For bootstrap file -&gt; select the at91bootstrap elf file from here- Click on Apply and OK. | By default, MPLAB X only produces ELF and Hex format output files. To generate application output in binary format, a post build step needs to be added to the project properties. To do this, go to project properties, building, click the check box Execute this line after build, then enter the below command. \${MP_CC_DIR}/xc32-objcopy -O binary \${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.elf \${DISTDIR}/harmony.bin . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#developing-an-application-executed-from-qspi-flash-memory",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#developing-an-application-executed-from-qspi-flash-memory"
  },"1704": {
    "doc": "QSPI XIP",
    "title": "Linker file modifications to execute an application from QSPI flash(offset 0x40000)",
    "content": "In this example we have demonstrated an application getting executed from QSPI flash offset 0x40000. Note : To change the QSPI offset from where application will get executed, at91bootstrap kconfig must be configured and built. The following linker file(ddr.ld) modifications are required to enable application getting executed from QSPI: . | Define only two memory regions: . | Assign text section to rom(qspi) and data section to relocate section(so, it will be copied from qspi to sram during runtime). Note : bss and relocate sections should be NOLOAD sections bss and relocate sections should be load from rom(qspi) and run from ram(sram) . | Remove cache aligned sections and assign _ramcode_lma and _ramdata_lma to ram as shown below. | Sample linker file can be found here. | Its a good practice to remove unused input section while building output binary. To do this, go to project properties , xc32-ld config , check Remove Unused Sections as shown below. | . *Now clean and build the project. You should see a message on the output console that the project was successfully built. This completes the development of the application. The harmony.bin file can be found in your /project_directory/dist/default/production/harmony.bin. &lt;/details&gt; . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#linker-file-modifications-to-execute-an-application-from-qspi-flashoffset-0x40000",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#linker-file-modifications-to-execute-an-application-from-qspi-flashoffset-0x40000"
  },"1705": {
    "doc": "QSPI XIP",
    "title": "SAM-BA Installation and Setup:",
    "content": ". | Install SAM-BA tool on your windows host PC. | To Download the latest version of SAM-BA tool for Windows click this link. | Download the ZIP file and unzip it into a working directory of your choice. | Add the SAM-BA directory path to the environment variables. | To do this from your PC –&gt; Open the Start Search, type in “env”. | Choose “Edit the system environment variables” –&gt; Click “Environment Variables” –&gt; “System Variables” –&gt; add SAM-BA directory path to path variables. | . | Once the SAM-BA Host program has been installed, the execution of the application is from the Windows command prompt. | . | Setup to flash using SAM-BA: . | Open Disable boot Jumper(J22) on SAMA7G54 Evaluation Kit. | Ensure there is no SD memory card inserted and there is no application on any of the external NVMs. | Press start button. | Push and hold the “BOOT_DIS” button.(This disables booting from the onboard memories - NAND and NOR(QSPI) flash Memory) | Reset the board by pressing and then releasing the reset “nRST” button. | Release the “BOOT_DIS” button. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#sam-ba-installation-and-setup",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#sam-ba-installation-and-setup"
  },"1706": {
    "doc": "QSPI XIP",
    "title": "Configure first stage bootloader to boot from QSPI flash:",
    "content": "Use the below SAM-BA commands to configure first stage bootloader to boot from QSPI. To learn about the boot process and first stage boot configuration, refer section 19-Boot Strategies of the SAMA7G5 series data sheet. Note: It is mandatory to enable boot configuration packet to boot from QSPI for SAMA7G5 series. | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c writecfg:bscr:EMULATION_ENABLED // Enable Emulation | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c readcfg:bscr // Read bscr and verify emulation is enabled | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c resetemul // Emulation SRAM Reset | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c refreshcfg:emul //Refresh Emulation SRAM. | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c writecfg:bcp-emul:DBGU,QSPI0_IOSET1 // Enable debug, QSPI0 as external NVM | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c readcfg:bcp-emul // Read bcp_emul and verify whether QSPI is set as external NVM Now reset the board by pressing reset button. | . Note: Boot configuration using Emulation SRAM has to be set every power cycle. User can also write boot configuration packet(BCP) to OTPC(One Time Programmable Memory Controller). Refer SAM-BA installation directory on how to write BCP to OTPC Below steps can be used to program BCP to OTPC: . | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c writecfg:bscr:EMULATION_DISABLED //Disable Emulation | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c readcfg:bscr // Read bscr and verify emulation is disabled | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c refreshcfg:otp //Refresh otp | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c writecfg:bcp-otp:DBGU,QSPI0_IOSET1 // Enable debug, QSPI0 as external NVM | sam-ba -p j-link -b sama7g5-ek -a bootconfig -c readcfg:bcp-otp // Read bcp_otp and verify whether QSPI is set as external NVM | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#configure-first-stage-bootloader-to-boot-from-qspi-flash",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#configure-first-stage-bootloader-to-boot-from-qspi-flash"
  },"1707": {
    "doc": "QSPI XIP",
    "title": "Debugging Application Project on MPLAB® X IDE:",
    "content": ". | Open the project (sama7g54_ek_blink_led_qspi_xip/firmware/sama7g54_ek.X) in MPLAB® X IDE. | In the project properties, ensure SAMA7G54 is selected as the ‘Device’ and for Connected Hardware Tool, select connected J-Link debugger with the board to program/debug the application. | Build the code. The harmony.bin file can be found in your /project_directory/dist/default/production/harmony.bin. | Before debugging ensure that harmony.bin file in your project directory is flashed in the QSPI offset. | Refer the section “SAM-BA Installation and Setup” for initial device setup and tool installation procedure. | Use the below sam-ba commands to erase QSPI flash and program the application. | sam-ba -p j-link -b sama7g5-ek -a qspiflash -c erase //To erase entire QSPI flash | sam-ba -p j-link -b sama7g5-ek -a qspiflash -c erase:0x40000:0x20000 //Erase only 0x20000 bytes of data from the QSPI offset 0x40000 | sam-ba -p j-link -b sama7g5-ek -a qspiflash -c write:harmony.bin:0x40000 //Program the application in the QSPI offset 0x40000 Note : Don’t flash boot.bin to QSPI memory to debug the application on MPLAB® X IDE. | . | Debug the code by clicking on the “Debug” button in MPLAB® X IDE tool bar and observe that the application is getting executed from QSPI flash memory. | Run the application by clicking the “run” button in MPLAB® X IDE tool bar. A terminal emulation program running on the Host PC communicates with the SAMA7G54 Evaluation kit J-Link CDC. Ensure the terminal emulation program(Eg: PUTTY) is configured to the COM port and settings are: . | Speed: 115200 | Data: 8 | Parity: None | Stop Bits: 1 | . | Now, you will get the debug message on the serial console. Now press the user button(sw1) and observe LED getting turned ON. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#debugging-application-project-on-mplab-x-ide",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#debugging-application-project-on-mplab-x-ide"
  },"1708": {
    "doc": "QSPI XIP",
    "title": "Running the pre-built harmony application from QSPI Flash:",
    "content": "The boot.bin and harmony.bin files can be found from this location The pre-built application bin file and boot bin file can be programmed to QSPI flash using SAM-BA . Refer the above section: “Flash the Application Project using SAM-BA” for initial device setup and tool installation procedure. SAM-BA commands to program the boot and application file to QSPI flash: . | sam-ba -p j-link -b sama7g5-ek -a qspiflash -c erase //To erase entire QSPI flash | sam-ba -p j-link -b sama7g5-ek -a qspiflash -c writeboot:boot.bin //To program bootstrap bin file | sam-ba -p j-link -b sama7g5-ek -a qspiflash -c write:harmony.bin:0x40000 //Program the application in the QSPI offset 0x40000 Note : Flash both boot.bin and harmony.bin to QSPI memory to execute the application from QSPI upon reset . | . Steps to execute the harmony.bin file from QSPI flash: . | Press the reset button. | Now, you will get the debug message on the serial console. Now press the user button(sw1) and observe LED getting turned ON. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#running-the-pre-built-harmony-application-from-qspi-flash",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#running-the-pre-built-harmony-application-from-qspi-flash"
  },"1709": {
    "doc": "QSPI XIP",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of box by following the instructions above in “Running the Demo” section- If you need to enhance/customize this application demo, you need to use the MPLAB® Harmony v3 Software framework- Refer links below to setup and build your applications using MPLAB® Harmony. | How to Setup MPLAB® Harmony v3 Software Development Framework | MPLAB® Harmony v3 is also configurable through MPLAB® Code Configurator (MCC)- Refer to the below links for specific instructions to use MPLAB® Harmony v3 with MCC. | Getting Started with MPLAB® Harmony v3 Using MPLAB® Code Configurator | MPLAB® Code Configurator Content Manager for MPLAB® Harmony v3 Projects | Click Here for more Harmony V3 applications | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#comments",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#comments"
  },"1710": {
    "doc": "QSPI XIP",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#revision",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html#revision"
  },"1711": {
    "doc": "QSPI XIP",
    "title": "QSPI XIP",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_blink_led_qspi_xip/readme.html"
  },"1712": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Ethernet Web Server Getting Started Application on SAMA7G54-EK Evaluation Kit",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#ethernet-web-server-getting-started-application-on-sama7g54-ek-evaluation-kit",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#ethernet-web-server-getting-started-application-on-sama7g54-ek-evaluation-kit"
  },"1713": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html"
  },"1714": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Description",
    "content": "This application demonstrates the ability of the MPLAB Harmony to configure demo board as TCP IP web server. The demo board configured as web server will host webpage stored in SDCARD. The Webpage will be accessed through IP Address provided in debug window. From the webpage, LEDs on the demo board will be controlled. Temperature is read from the temp sensor on a Thermo 3 Click connected to the board using TWI/I2C protocol. The temperature value is also displayed on the webpage. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#description",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#description"
  },"1715": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Key Highlights of SAMA7G54-EK Evaluation Kit:",
    "content": ". | External Non-Volatile Memories like QSPI, e.MMC and SD card interfaces. | Additional sensors can be interfaced using “click boards” through an on-board mikroBUS connector. | Two mechanical programmable buttons. | One User Input Switch and one RGB LED. | UART, USB and CAN Interfaces. | Raspberry pi connectors. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#key-highlights-of-sama7g54-ek-evaluation-kit",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#key-highlights-of-sama7g54-ek-evaluation-kit"
  },"1716": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | FLEXCOM | TC0 | SDMMC | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#modulestechnology-used"
  },"1717": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Hardware Used:",
    "content": ". | SAMA7G54-EK Evaluation Kit. | SD Card. | Thermo 3 Click. | RJ45 Ethernet Cable. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#hardware-used",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#hardware-used"
  },"1718": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Jumper Settings:",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#jumper-settings",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#jumper-settings"
  },"1719": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Software/Tools Used:",
    "content": ". | MPLAB® X IDE. | MPLAB® XC32 Compiler. | MPLAB® Code Configurator (MCC). | . This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/default to know the MPLAB® X IDE, MCC Plugin, libraries version. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#softwaretools-used"
  },"1720": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Hardware Setup: ",
    "content": ". | Connect RJ45 ethernet cable to the J5 Connector (Gigabit Ethernet port) of SAMA7G54-EK Evaluation Kit and to Router. | Connect Thermo 3 click board to the J10 connector (mikroBUS socket) of SAMA7G54-EK Evaluation Kit. | Power up the SAMA7G54-EK Evaluation Kit by connecting 5V/2A power adapter to J1 connector or by connecting micro-usb cable to J7 connector. | Press the start (nSTART switch) button on the board. | Connect the UART port (J24) on board to the computer using a micro-usb cable (to enable debug com port). | Connect external JTAG debugger to J27 or Onboard debugger micro-usb cable to J24. J24 will work as CDC COM Port as well as Onboard debugger. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html"
  },"1721": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Developing a Ethernet Web Server demo application",
    "content": "Details . | Open MPLAB® X IDE from the main menu. | Create a New Project by clicking the New Project icon or by selecting File -&gt; New Project. | In the New Project window, under Projects: select 32-Bit MCC Harmony Project and click Next. | In the Framework Path, enter the path of the folder where you would like to download the Harmony 3 framework packages and Click Next. | In the Project Settings dialog window, fill in or select the information needed for below: a. Location: Enter a valid path to store the application project. b. Folder: Enter Project Folder name. c. Name: Enter Project Name. d. Path: Selecting the above fields auto populates the Path. e. Click Next . | In the Configuration Settings dialog window, fill in or select the information for below: a. Name: Fill configuration name as default. b. Device Family: From drop down list select SAM. c. Target Device: From drop down list select SAMA7G54. d. Click Finish. | This creates an empty project and set this project as main project. If there are other projects open in the project explorer window, set this project as main project by right clicking on the project, choose Set as Main Project. | Once the project is created, MCC will be automatically launched. (To launch MCC manually, from main menu, click on Tools -&gt; Embedded -&gt; MPLAB® Code Configurator or click MCC button in the MPLAB® X IDE tool bar.) It will launch Content manger Wizard. Then click Select MPLAB Harmony. | In addition to the required packages(csp,dev_packs), download the optional packages bsp, core, net, wolfssl and then click Finish. Content download will take some time. Please wait till all the contents are downloaded. | Once the download is complete, click Save in Save MCC Configuration file window. | Now a project graph will be displayed. From Device Resources window, click add button to add Board Support Packages for SAMA7G5 Evaluation kit BSP to Project Graph. | In Project Graph, Select TCP/IP Configuration from plugins drop-down list. | Now TCP/IP Configuration window will be displayed. Click Application in TCP/IP Layers on the left side pane. | To add DHCP CLIENT to Active Components window, drag and drop it from Available Components. Click Yes for adding Harmony Core. | Click No for FreeRTOS component. This example is a Bare metal project. | DHCP CLIENT is moved to Active Components window. | Similarly add DNS CLIENT, HTTPNET SERVER and SNTP to Active Components window. | Click Presentation in TCP/IP Layers on the left side pane. a. Add Presentation Layer to Active Components window by dragging and dropping it from Available Components window. | Click Transport in TCP/IP Layers on the left side pane. | Add TCP to Active Components window by dragging and dropping it from Available Components window. This will add Crypto Library also to the project. a. Click Yes to add Crypto Library. The wolfCrypt Library will be added to the project. b. Click Yes to add wolfCrypt Library. c. Click Yes to connect Crypto Library and wolfCrypt Library in project graph. d. TCP added to project. | Add UDP to Active Components window by dragging and dropping from Available Components window. | Click Network in TCP/IP Layers on the left side pane. | Add IPv4, ARP and ICMPv4 to Active Components window by dragging and dropping them from Available Components window. | Click Data Link in TCP/IP Layers on the left side pane. | Click next to Network Interface in Active Components window to add an Interface. This will add NETCONFIG-0 to Network Interface section in Active Components window. | Add GMAC0 to MAC section in Active Components window by dragging and dropping from MAC Components window. | Add KSZ9131 and MIIM Driver to PHY section in Active Components window by drag and drop from PHY Components window. | Connect NETCONFIG-0 with GMAC0 and GMAC0 with KSZ9131 in Active Components window by clicking and dragging the or button. | Click Basic Config in TCP/IP Layers on the left side pane. | Add TCPIP CMD to Active Components window by dragging and dropping from Available Components window. | Click Overview on the left side pane to see the complete configuration. | Click Config Summary on the left side pane to see the summary of configuration. The missing mandatory and optional components will be listed here. | Add Harmony components listed in Unsatisfied Dependencies. a. Close TCP/IP Configuration window. b. In Project Graph, Select Root in View: tab and add all Unsatisfied Dependencies. | We need SDCARD to store webpages. To access SDCARD, we need to enable SDMMC module in project. a. From Device Resources window, expand Peripherals and expand SDMMC to view SDMMC list. | Click add button to add SDMMC1 to Project Graph. | SDMMC1 added to Project Graph window. | From Device Resources window, expand System Services to view the list. | Click add button to add COMMAND, DEBUG, TIME and FILE SYSTEM to Project Graph. | COMMAND, DEBUG, TIME and FILE SYSTEM are added to Project Graph window. | Add SYS_CONSOLE dependency. a. Right Click on SYS_CONSOLE button on TCP/IP STACK box. b. Select Satisfiers → CONSOLE. | Add COMMAND and DEBUG System Service to CONSOLE. a. Right Click on SYS_CONSOLE button on DEBUG box. b. Select Satisfiers → CONSOLE. c. Right Click on SYS_CONSOLE button on COMMAND box. d. Select Satisfiers → CONSOLE. | Add SDHC consumers. a. Right Click on SDHC button on SDMMC1 box. b. Select consumers → SDMMC. | Add SDMMC consumers. a. Right Click on DRV_MEDIA button on SDMMC box. b. Select consumers → FILE SYSTEM. | Add TIME satisfiers. a. Right Click on TMR button on TIME box. b. Select Satisfiers → TC0. | From Device Resources window, expand Peripherals and expand FLEXCOM to view FLEXCOM list. a. Click add button to add FLEXCOM3 and FLEXCOM9 to Project Graph. | FLEXCOM3 and FLEXCOM9 added to Project Graph window. | In SAMA7G54-EK Evaluation Kit, Debug UART is connected to FLEXCOM3 peripheral module. a. To add UART consumers, Right Click on UART button on FLEXCOM3 box. b. Select consumers → CONSOLE. | In SAMA7G54-EK Evaluation Kit, Thermo 3 click board is connected to MikroBUS 1 Slot. I2C communication Protocol is required to access Thermo 3 click board. The I2C/TWI lines of MikroBUS 1 Slot are connected to FLEXCOM9 peripheral module. a. To add I2C consumers, Right Click on I2C button on FLEXCOM9 box. b. Select consumers → I2C. | Add wolfCrypt Library consumers. a. Right Click on LIB_WOLFCRYPT button on wolfCrypt Library box. b. Select consumers → wolfSSL Library. c. Right Click on TLS Provider button on TCP/IP STACK box. d. Select Satisfiers → wolfSSL Library. | Update the System Heap size and all other Stack Size. a. Select the System in the Project Graph window. b. In Configuration Options window, update the System Heap size and all other Stack Size as shown in the image below. | Start Clock Configuration from Plugins drop-down menu. | Verify the clock configuration. The application demo can work with default clock configuration. a. Verify the Processor Clock (CPU_CLK) is 800,000,000 Hz. b. Verify the Master Clock (MCK0) is 200,000,000 Hz. c. Verify the Peripheral Clocks are enabled for FLEXCOM3, FLEXCOM9, GMAC0, SDMMC1 and TC0. Select the System in the Project Graph window. In Configuration Options, expand Clock then expand Peripheral Clocks. d. GMAC0 requires 125,000,000 Hz clock frequency. We need to use ETHPLL as clock source. To Enable ETHPLL, select the System in the Project Graph window. In Configuration Options, expand Clock then expand ETHPLL. Now click on the check box of Enable PLL and update the value as shown below. e. Enable GMAC0 clock. Select the System in the Project Graph window. In Configuration Options, expand Clock then expand Generic Clocks. f. Expand GMAC0 and click on Enable check box. Update GCLKCSS as ETHPLL. g. Enable SDMMC1 clock. Select the System in the Project Graph window. In Configuration Options, expand Clock then expand Generic Clocks. h. Expand SDMMC1 and Click on Enable check box. Update GCLKCSS as MAINCK. | Start interrupt Configuration from Plugins drop-down menu. a. Verify whether FLEXCOM3, FLEXCOM9, GMAC0, SDMMC1 and TC0_CH0 interrupt is enabled. | Start Pin Configuration from Plugins drop-down menu. a. Refer to the SAMA7G54-EK User’s Guide for the UART pins. b. Configure the pins for UART as shown below. c. Refer to the SAMA7G54-EK User’s Guide for TWI pins. d. Configure the pins for TWI as shown below. e. Configure the pins for SDMMC1 as shown below. f. Refer to Gigabit Ethernet Interface Schematic in SAMA7G54-EK User’s Guide for the GMAC0 pins g. Configure the pins for GMAC0 as shown below. | Update HTTPNET SERVER Listening port and default HTTP NET file. a. In Project Graph window, Select APPLICATION LAYER from the list in view: tab. b. Click on HTTPNET SERVER box in Project Graph. c. In Configuration Options, in HTTPNER SERVER expand Advanced Settings. Update Default HTTP NET file as index.html and update HTTP NET Listening Port as 443. | Enable Encryption setting. a. In Project Graph window, Select PRESENTATION LAYER from the list in view: tab. b. Click on Presentation Layer box in Project Graph. c. In Configuration Options window, Enable Support Encryption? by clicking on the check box. d. In Configuration Options window, expand Support Encryption? Update Encryption Provider as WolfSSL from list and enable Support Server Encryption? by clicking on the check box. | Update TCP/IP stack Dynamic RAM Size to 92160. a. In Project Graph window, select BASIC CONFIGURATION from the list in view: tab. b. Click on TCPIP CORE box in Project Graph. c. In Configuration Options, expand Heap Configuration and update TCP/IP stack Dynamic RAM Size to 92160. | Update KSZ9131 PHY Address to 7. a. In Project Graph window, select DATA LINK LAYER from the list in view: tab. b. Click on KSZ9131 box in Project Graph. c. In Configuration Options window, in KSZ9131 Update PHY Address to 7. | Now Save all. Then click generate code. This will generate code for all the Device Resource that have been added in the project graph. | Up to this point in the project creation process, you used MPLAB Code Configurator (MCC) to configure and generate code to initialize the device (SAMA7G54). Refer initialization.c to find that all the device resource added in the project graph got initialized. All that is left is for the user to write the application code in the app.c file. Documentation for each of the peripheral libraries or driver libraries can be accessed as follows: a. Peripheral libraries APIs can be accessed as a HTML file (.html) from the Harmony 3 Framework path. (/framework_path/csp/docs/index.html) b. BSP libraries APIs can be found in bsp.h c. TCP/IP Stack APIs can be accessed as a HTML file (.html) from the Harmony 3 Framework path. (/framework_path/net/docs/index.html) . | APIs used for this application are as follows: . | LED_GREEN_On | LED_GREEN_Off | LED_Red_On | LED_Red_Off | LED_Blue_On | LED_Blue_Off | FLEXCOM9_TWI_CallbackRegister | FLEXCOM9_TWI_Write | FLEXCOM9_TWI_IsBusy | FLEXCOM9_TWI_Read | SYS_FS_Mount | TCPIP_STACK_Status | SYS_CONSOLE_PRINT | SYS_CONSOLE_MESSAGE | TCPIP_STACK_NumberOfNetworksGet | TCPIP_STACK_NetAddress | TCPIP_STACK_NetNameGet | TCPIP_STACK_NetIsReady | TCPIP_STACK_IndexToNet | . | Sample code can be found here app, http net app, http net print, main and Its header file can be found here app, http net print. | Now right click on the project and click Properties. For Connected Hardware Tool -&gt; select connected hardware debugger used, for Compiler Toolchain -&gt; select XC32 and click Apply. | From J-32/J-Link, In Option categories choose Communication and for JTAG Method, select 4-wire JTAG. | Select bootstrap from Categories and select the Use Bootstrap checkbox. For bootstrap file -&gt; select the at91bootstrap.elf file from here- Click on Apply and OK. | By default, MPLAB X only produces ELF and Hex format output files. To generate application output in binary format, a post build step needs to be added to the project properties. To do this, right click on project and select properties, select building, click the check box Execute this line after build, then enter the below command. \${MP_CC_DIR}/xc32-objcopy -O binary \${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.elf \${DISTDIR}/harmony.bin . Click on Apply and OK. | Clean and build the project. You should see a message on the output console that the project was successfully built. This completes the development of the ethernet web server getting started application. | The harmony.bin binaries will be available at ./firmware/sama7g54_ek.X/dist/default/production. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#developing-a-ethernet-web-server-demo-application",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#developing-a-ethernet-web-server-demo-application"
  },"1722": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Debugging Application Project on MPLAB® X IDE:",
    "content": ". | Open the project (sama7g54_ek_ethernet_web_server_getting_started/firmware/sama7g54_ek.X) in MPLAB® X IDE. | In the project properties, ensure SAMA7G54 is selected as the Device and for Connected Hardware Tool, select the hardware debugger connected to the board to program/debug the application. | Build and debug the code by clicking on the Debug button in MPLAB® X IDE tool bar. | Run the application by clicking the run button in MPLAB® X IDE tool bar. | Ensure Console Serial communications between the Host PC and the SAMA7G54-EK Evaluation Board take place through UART port J24. A terminal emulation program running on the Host PC communicates with the SAMA7G54-EK Evaluation Kit UART port. Ensure the terminal emulation program (Eg: Tera term) is configured to the COM port and settings are: . | Speed: 115200 | Data: 8 | Parity: None | Stop Bits: 1 | . | Once the board is powered up, you will see the Blue LED turn ON. The following message is displayed on the console: | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#debugging-application-project-on-mplab-x-ide",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#debugging-application-project-on-mplab-x-ide"
  },"1723": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Running the pre-built harmony application from SD Card:",
    "content": "The pre-built application bin file can be programmed by following the below steps. Steps to program the bin file on SD card . | Take an SD Card formatted with FAT32 file system. | Copy the boot.bin, harmony.bin files from this location to the SD card. | Copy the webpage files from this location also to the SD card. | Insert the SD card to J4 on the SAMA7G54-EK Evaluation Kit. | . Steps to run the bin file from SD card . | Press the reset button. | The following debug messages will be displayed on the console. Note the IP Address. | Enter the IP Address (Example: https://10.40.24.92) in web browser and press enter. The following webpage will be displayed on your browser. | Now control each LED from webpage and view LED status updated. View the temperature displayed on the webpage. | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#running-the-pre-built-harmony-application-from-sd-card",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#running-the-pre-built-harmony-application-from-sd-card"
  },"1724": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Comments:",
    "content": ". | This application demo builds and works out of the box by following the instructions above in “Running the Demo” section- If you need to enhance/customize this application demo, you need to use the MPLAB® Harmony v3 Software framework- Refer links below to setup and build your applications using MPLAB® Harmony. | How to Setup MPLAB® Harmony v3 Software Development Framework | MPLAB® Harmony v3 is also configurable through MPLAB® Code Configurator (MCC)- Refer to the below links for specific instructions to use MPLAB® Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB® Harmony v3 Using MPLAB® Code Configurator | MPLAB® Code Configurator Content Manager for MPLAB® Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#comments",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#comments"
  },"1725": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#revision",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html#revision"
  },"1726": {
    "doc": "Ethernet Web Server Getting Started",
    "title": "Ethernet Web Server Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html",
    "relUrl": "/apps_mpu/sama7g54_ek/sama7g54_ek_ethernet_web_server_getting_started/readme.html"
  },"1727": {
    "doc": "SAMA7G54 Evaluation kit",
    "title": "SAMA7G54 Evaluation kit",
    "content": ". This folder contains the MPLAB® Harmony 3 reference applications developed on SAMA7G54 Evaluation Kit. | SI No | Demo Name | Download Link | . | 1 | QSPI XIP | Click Here | . | 2 | Ethernet Web Server | Click Here | . More Application Demos . For more application demos on SAMA7G54 Evaluation Kit and other Development Boards/Kits having the same part number (SAMA7) CLICK HERE . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/sama7g54_ek/readme.html",
    "relUrl": "/apps_mpu/sama7g54_ek/readme.html"
  },"1728": {
    "doc": "32-bit MPU Reference Applications",
    "title": "Reference Application Repository",
    "content": "This repository contains the MPLAB® Harmony 3 reference applications developed on Microchip 32-bit MPU development boards/kits. ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/readme.html#reference-application-repository",
    "relUrl": "/apps_mpu/readme.html#reference-application-repository"
  },"1729": {
    "doc": "32-bit MPU Reference Applications",
    "title": "32-bit MPU Reference Applications",
    "content": "The following reference applications are provided to evaluate solutions on 32-bit MPUs. | Board/Kit | Link | . | | SAM9X75 Early Access Evaluation Board | . | | SAM9X60 Curiosity Development Board | . | | SAM9X60 Evaluation Kit | . | | SAMA7G54 Evaluation Kit | . Note: . The applications in this repository are an alternative source of reference involving integration of multiple technologies, extending hardware capabilities and demonstrating specific MPU features. Peripheral/Technology specific applications are available in technology repositories like csp, core, usb, net, audio, gfx_apps, etc . ",
    "url": "http://localhost:4000/reference_apps/apps_mpu/readme.html",
    "relUrl": "/apps_mpu/readme.html"
  },"1730": {
    "doc": "Getting Started",
    "title": "Getting Started Application on PIC32CM JH01 Curiosity Pro Development Board",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#getting-started-application-on-pic32cm-jh01-curiosity-pro-development-board",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#getting-started-application-on-pic32cm-jh01-curiosity-pro-development-board"
  },"1731": {
    "doc": "Getting Started",
    "title": "  Download  ",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html"
  },"1732": {
    "doc": "Getting Started",
    "title": "Description:",
    "content": "This application demonstrates an LED (LED0) toggle on timeout basis and print the LED toggling rate on the serial terminal. The periodicity of the timeout will change from 500 milliseconds to one second, two seconds, four seconds and back to 500 milliseconds every time you press the switch SW0 on the PIC32CM JH01 Curiosity Pro Development Board. The demo application has extended functionality to read and print the current room temperature periodically when the extension header (EXT1) is plugged with the I/O1 Xplained Pro Extension Kit. The temperature reading is displayed on a serial console periodically . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#description",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#description"
  },"1733": {
    "doc": "Getting Started",
    "title": "Modules/Technology Used:",
    "content": ". | Peripheral Modules . | EIC | RTC | GPIO | DMAC | SERCOM (USART) | SERCOM(I2C) | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#modulestechnology-used",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#modulestechnology-used"
  },"1734": {
    "doc": "Getting Started",
    "title": "Hardware Used:",
    "content": ". | PIC32CM JH01 Curiosity Pro Development Board | I/O1 Xplained Pro Extension Kit | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#hardware-used",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#hardware-used"
  },"1735": {
    "doc": "Getting Started",
    "title": "Software/Tools Used:",
    "content": "This project has been verified to work with the following versions of software tools: . Refer Project Manifest present in harmony-manifest-success.yml under the project folder firmware/src/config/pic32cm_jh01_cpro . | Refer the Release Notes to know the MPLAB X IDE and MCC Plugin version. Alternatively, Click Here. | Any Serial Terminal application like Tera Term/PuTTY terminal application. | . Because Microchip regularly update tools, occasionally issue(s) could be discovered while using the newer versions of the tools. If the project doesn’t seem to work and version incompatibility is suspected, It is recommended to double-check and use the same versions that the project was tested with. To download original version of MPLAB Harmony v3 packages, refer to document How to Use the MPLAB Harmony v3 Project Manifest Feature . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#softwaretools-used",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#softwaretools-used"
  },"1736": {
    "doc": "Getting Started",
    "title": "Hardware Setup 1: ",
    "content": ". | Connect the PIC32CM JH01 Curiosity Pro Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html"
  },"1737": {
    "doc": "Getting Started",
    "title": "Hardware Setup 2: ",
    "content": ". | Connect the PIC32CM JH01 Curiosity Pro Development Board to the Host PC as a USB Device through a Type-A male to micro-B USB cable connected to Micro-B USB (Debug USB) port | To test the extended functionality, connect the I/O1 Xplained Pro Extension Kit to the extension header EXT1 (J200) on the PIC32CM JH01 Curiosity Pro Development Board. | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html"
  },"1738": {
    "doc": "Getting Started",
    "title": "Programming hex file:",
    "content": "The pre-built hex file can be programmed by following the below steps. Steps to program the hex file . | Open MPLAB X IDE | Close all existing projects in IDE, if any project is opened. | Go to File -&gt; Import -&gt; Hex/ELF File | In the “Import Image File” window, Step 1 - Create Prebuilt Project, Click the “Browse” button to select the prebuilt hex file. | Select Device has “PIC32CM5164JH01100” | Ensure the proper tool is selected under “Hardware Tool” | Click on Next button | In the “Import Image File” window, Step 2 - Select Project Name and Folder, select appropriate project name and folder | Click on Finish button | In MPLAB X IDE, click on “Make and Program Device” Button. The device gets programmed in sometime | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#programming-hex-file",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#programming-hex-file"
  },"1739": {
    "doc": "Getting Started",
    "title": "Programming/Debugging Application Project:",
    "content": ". | Open the project (pic32cm_jh01_cpro_getting_started/firmware/pic32cm_jh01_cpro.X) in MPLAB X IDE | Ensure “PIC32CM JH01 Curiosity Pro” is selected as hardware tool to program/debug the application | Build the code and program the device by clicking on the “make and program” button in MPLAB X IDE tool bar | Follow the steps in “Running the Demo” section below | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#programmingdebugging-application-project",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#programmingdebugging-application-project"
  },"1740": {
    "doc": "Getting Started",
    "title": "Running the Demo:",
    "content": ". | Open the Tera Term/PuTTY terminal application on your PC (from the Windows® Start menu by pressing the Start button) | Set the baud rate to 115200 | An LED (LED0) on the PIC32CM JH01 Curiosity Pro Development Board toggles on every timeout basis and the default periodicity of the timeout is 500 milliseconds | And also, the LED toggling rate is displayed on the serial terminal | Press the switch SW0 on the PIC32CM JH01 Curiosity Pro Development Board to change the default periodicity of the timeout to one second | Every subsequent pressing of the switch SW0 on the PIC32CM JH01 Curiosity Pro Development Board changes the periodicity of the timeout to 2 seconds, 4 seconds, 500 milliseconds, and back to 1 second in cyclic order | See the following figure for the output. | To Test the Extended functionality using I/O1 Xplained Pro Extension Kit: . | Perform Hardware Setup 2 steps mentioned above, if not done already. | Reset or power cycle the device. LED0 toggles for every 500 milliseconds during power cycle and the LED toggling rate is displayed on the serial terminal. | Press any key on your Computer’s keyboard to read and print the Temperature from the I/O1 Xplained Pro Extension Kit). | The temperature read is displayed on a serial console on a periodical basis. | The periodicity of reading temperature will be changed between 500 milliseconds, one second, two seconds, four seconds, and back to 500 milliseconds every time the user presses the switch SW0 on the PIC32CM JH01 Curiosity Pro Development Board. | Press any key on the keyboard to start printing the LED Toggling rate | The subsequent key press from the keyboard switches between printing the LED Toggling rate or temperature values on the serial terminal. | See the following figure for the output. | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#running-the-demo",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#running-the-demo"
  },"1741": {
    "doc": "Getting Started",
    "title": "Comments:",
    "content": ". | Reference Training Module: Getting Started with Harmony v3 Peripheral Libraries on SAMC2x MCUs | This application demo builds and works out of box by following the instructions above in “Running the Demo” section. If you need to enhance/customize this application demo, you need to use the MPLAB Harmony v3 Software framework. Refer links below to setup and build your applications using MPLAB Harmony. | How to Setup MPLAB Harmony v3 Software Development Framework | How to Build an Application by Adding a New PLIB, Driver, or Middleware to an Existing MPLAB Harmony v3 Project | MPLAB Harmony v3 is also configurable through MPLAB Code Configurator (MCC). Refer to the below links for specific instructions to use MPLAB Harmony v3 with MCC. | Create a new MPLAB Harmony v3 project using MCC | Update and Configure an Existing MHC-based MPLAB Harmony v3 Project to MCC-based Project | Getting Started with MPLAB Harmony v3 Using MPLAB Code Configurator | MPLAB Code Configurator Content Manager for MPLAB Harmony v3 Projects | . | . | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#comments",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#comments"
  },"1742": {
    "doc": "Getting Started",
    "title": "Revision:",
    "content": ". | v1.6.0 - Released demo application | . ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#revision",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html#revision"
  },"1743": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html",
    "relUrl": "/apps/pic32cm_jh01_curiosity_pro/pic32cm_jh01_cpro_getting_started/readme.html"
  },"1744": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": ". ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"1745": {
    "doc": "Release notes",
    "title": "Reference Applications Release v1.6.0 (September 2023)",
    "content": "New Applications . | Application | Description | MCU | Development Board/Kit | . | pic32cm_ls60_cpro_secure_boot | Secure Boot Application | PIC32CM LS | PIC32CM LS60 Curiosity Pro Evaluation Kit | . | pic32cm_ls60_aws_iot_core | AWS Cloud IoT Core Application | PIC32CM LS | PIC32CM LS60 Curiosity Pro Evaluation Kit | . | pic32cm_ls60_secure_iot_gateway | Secure IoT Gateway Application | PIC32CM LS | PIC32CM LS60 Curiosity Pro Evaluation Kit | . | pic32cm_ls60_cpro_tz_getting_started | TrustZone Getting Started Application | PIC32CM LS | PIC32CM LS60 Curiosity Pro Evaluation Kit | . | pic32cm_ls60_rd_smart_lock | Smart Lock Application | PIC32CM LS | PIC32CM LS60 Smart Lock Reference Board | . | pic32cm_ls00_cpro_tz_getting_started | TrustZone Getting Started Application | PIC32CM LS | PIC32CM LS00 Curiosity Pro Evaluation Kit | . | pic32cm_le00_cpro_getting_started_ext | Getting Started Extended Application | PIC32CM LS | PIC32CM LE00 Curiosity Pro Evaluation Kit | . | pic32cx_sg61_getting_started | Getting Started Application | PIC32CX SG | PIC32CX SG61 Curiosity Ultra Evaluation Board | . | pic32cx_sg41_getting_started | Getting Started Application | PIC32CX SG | PIC32CX SG61 Curiosity Ultra Evaluation Board | . | pic32cz_ca90_getting_started_ext | Getting Started Extended Application | PIC32CZ CA | PIC32CZ CA90 Curiosity Ultra Development Board | . | pic32cz_ca80_getting_started_ext | Getting Started Extended Application | PIC32CZ CA | PIC32CZ CA80 Curiosity Ultra Development Board | . | pic32cm_jh01_cpro_getting_started | Getting Started Application | PIC32CM JH | PIC32CM JH01 Curiosity Pro Development Board | . | mcp25625 | MikroElektronika MCP25625 Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | eink_epaper_2_9_296_128 | MikroElektronika Eink E-Paper display 2,9” 296x128 dots Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | 13dof | MikroElektronika 13dof Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | microsd | MikroElektronika microsd Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | pic32mzef_web_photo_frame | Web Photo Frame Application | PIC32MZ | Curiosity PIC32MZ EF 2.0 Development Board | . | samiot2_aws_cloud_core | AWS Cloud IoT Core Application | SAM D21 | SAM-IoT WX v2 Development Board | . | samiot2_azure_cloud_core | Microsoft Azure Cloud IoT Core Application | SAM D21 | SAM-IoT WX v2 Development Board | . | pic32mzda_miwi_iot | MiWi IoT gateway Application | PIC32MZ DA | PIC32MZ DA Radial Graphics Development Board | . | sam9x60_cu_graphics_getting_started | Graphics Getting Started Application | SAM9X60 | SAM9X60 Curiosity Development Board | . | sam9x60_cu_snake_game | Snake Game Application | SAM9X60 | SAM9X60 Curiosity Development Board | . | sam9x60_ek_blink_led_qspi_xip | Blink LED Application | SAM9X60 | SAM9X60 Evaluation Kit | . | sam9x75_ea_usb_host_getting_started | USB Host Getting Started Application | SAM9X75 | SAM9X75 Early Access Evaluation Board | . | sama7g54_ek_blink_led_qspi_xip | Blink LED Application | SAMA7G54 | SAMA7G54 Evaluation Kit | . | sama7g54_ek_ethernet_web_server_getting_started | Ethernet Web Server Getting Started Application | SAMA7G54 | SAMA7G54 Evaluation Kit | . Updated Applications . | Application | Description | MCU | Development Board/Kit | Comment | . | sdcard_player | SD Card Audio Player Application | PIC32MZ | Curiosity PIC32MZ EF 2.0 Development Board | Added display capability | . | same54_can_usb_bridge | CAN to USB bridge and CAN based NVM bootloader Host Applicatio | SAM E54 | SAM E54 Xplained Pro | Updated to add host bootlaoder | . Deleted Applications . | Application | Description | Comment | . | google_cloud_iot_core | Google Cloud IoT Core | Removed as the Google has discontinued cloud services. Alternative cloud demo on AWS Cloud IoT Core and Microsoft Azure Cloud IoT Core) is available | . | samiot2_google_cloud_core | Google Cloud IoT Core | Removed as the Google has discontinued cloud services. Alternative cloud demo on AWS Cloud IoT Core and Microsoft Azure Cloud IoT Core) is available | . | same51n_google_cloud_iot_core | Google Cloud IoT Core | Removed as the Google has discontinued cloud services. Alternative cloud demo on AWS Cloud IoT Core and Microsoft Azure Cloud IoT Core) is available | . | pic32cmmc_smart_tag_google_cloud_iot_core | Smart Tag Google Cloud IoT Core | Removed as the Google has discontinued cloud services. Alternative cloud demo on AWS Cloud IoT Core and Microsoft Azure Cloud IoT Core is available | . | same54_sdcard_usb_audio_player | SD Card USB Audio Player | Removed the demo. This would be added in a subsequent release on the v2 version of SAM E54 Curiosity Ultra Development Board | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.15 | MPLAB® XC32 C/C++ Compiler v4.30 | IAR EWARM v9.40 | MPLAB® X IDE plug-ins: . | MPLAB Code Configurator (MCC) v5.3.7 | . | . ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#reference-applications-release-v160-september-2023",
    "relUrl": "/release_notes.html#reference-applications-release-v160-september-2023"
  },"1746": {
    "doc": "Release notes",
    "title": "Reference Applications Release v1.5.0 (June 2022)",
    "content": ". | Removed MHC plugin configuration for all demo applications | . New Applications . | Application | Description | MCU | Development Board/Kit | . | saml21_ble_fitness_tracker | BLE Fitness Tracker Application | SAM L21 | SAM L21 Xplained Pro Evaluation Kit | . | ble2 | MikroElektronika BLE 2 Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | lr | MikroElektronika LR Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | grid_eye | MikroElektronika GRID EYE Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | usb_spi | MikroElektronika USB SPI Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | pic32mk_mcm_curiosity_getting_started_ext | Getting Started Extended Application | PIC32MK | PIC32MK MCM Curiosity Pro Development Board | . | saml22_sdcard_usb_slcd_datalogger | SD Card, USB Data Logger | SAM L22 | SAM L22 Xplained Pro Evaluation Kit | . | same54_can_usb_bridge | CAN USB bridge Application | SAM E54 | SAM E54 Xplained Pro | . Updated Applications . | Updated applications for documentation errors, broken images and links. | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.00 | MPLAB® XC32 C/C++ Compiler v4.00 | IAR EWARM v8.50 | MPLAB® X IDE plug-ins: . | MPLAB Code Configurator (MCC) v5.1.4 | . | . ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#reference-applications-release-v150-june-2022",
    "relUrl": "/release_notes.html#reference-applications-release-v150-june-2022"
  },"1747": {
    "doc": "Release notes",
    "title": "Reference Applications Release v1.4.1 (March 2022)",
    "content": "New Applications . | N/A | . Updated Applications . | Fixed images and hyperlink in pic32cmmc_smart_tag_google_cloud_iot_core and same51n_google_cloud_iot_core demo documentation. | . Known Issues . | Same as v1.4.0 | . Development Tools . | Same as v1.4.0 | . ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#reference-applications-release-v141-march-2022",
    "relUrl": "/release_notes.html#reference-applications-release-v141-march-2022"
  },"1748": {
    "doc": "Release notes",
    "title": "Reference Applications Release v1.4.0 (December 2021)",
    "content": ". | Added MCC support for all demo applications | . New Applications . | Application | Description | MCU | Development Board/Kit | . | pic32mzef_thermal_camera_heat_map | Thermal Camera based Heat Map Application | PIC32MZ | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32cmmc_smart_tag_google_cloud_iot_core | Smart Tag Google Cloud IoT Core Application | PIC32CM MC00 | PIC32CM MC00 Curiosity Nano Evaluation Kit | . | samd21_low_power | Low Power | SAM D21 | SAM D21 Xplained Pro Evaluation Kit | . | samd21_sdcard_usb_datalogger | SD Card, USB Data Logger | SAM D21 | SAM D21 Xplained Pro Evaluation Kit | . | wifi_7 | MikroElektronika WIFI 7 Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | oled_c | MikroElektronika OLED C Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | usb_i2c | MikroElektronika USB I2C Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | rfid | MikroElektronika RFID Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . Updated Applications . | Application | Description | MCU | Development Board/Kit | Comment | . | pic32cmmc_smart_appliance_control | Smart Appliance Control Application | PIC32CM MC00 | PIC32CM MC00 Curiosity Nano Evaluation Kit | Added display capability | . | same54_getting_started_freertos | Getting Started with Harmony Drivers using FreeRTOS | SAM E54 | SAM E54 Xplained Pro Evaluation Kit | Updated hardware setup image | . | usb_uart | MikroElektronika USB UART Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | Updated click interface APIs | . | pic32cmmc_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32CM MC00 | PIC32CM MC00 Curiosity Nano Evaluation Kit | Updated hardware setup image | . | getting_started_ext | Getting Started Extended using Harmony v3 Peripheral Libraries | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | Extended functionality to toggle LED3 on SW3 press | . | google_cloud_iot_core | Google Cloud IoT Core | SAM D21 | SAM-IoT WG Development Board | AP mode support added and fixed clound connectivity issue | . | ble_weather_station | BLE based Weather Station and Motion Sensor Application on SAM D21 Curiosity Nano and Nano Base for Click boards | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to use click rotunes | . | location_sos | Location Tagged SOS using Curiosity Nano Base for click boards and GSM-GPS click | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to use click routines | . Deleted Applications . | Application | Description | Comment | . | pic32cmmc_temp_based_fan_control_oled_c | Temperature based Fan Speed Control with OLED C click display | Removed as the same functionality is provided by Smart Appliance Control demo | . | msd_multiple_luns | USB MSD with Multiple Drives Application | Removed as the same functionality is provided in MPLAB Harmony v3 USB apps repository | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v5.50 | MPLAB® XC32 C/C++ Compiler v3.01 | IAR EWARM v8.50 | MPLAB® X IDE plug-ins: . | MPLAB Harmony 3 Launcher v3.6.4 | MPLAB Harmony Configurator (MCC) v5.0.3 | . | . ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#reference-applications-release-v140-december-2021",
    "relUrl": "/release_notes.html#reference-applications-release-v140-december-2021"
  },"1749": {
    "doc": "Release notes",
    "title": "Reference Applications Release v1.3.0 (June 2021)",
    "content": "New Applications . | Application | Description | MCU | Development Board/Kit | . | same51n_google_cloud_iot_core | Google Cloud IoT Core Application | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | same54c_motion_surveillance | Motion Surveillance Application | SAM E54 | SAM E54 Curiosity Ultra Development Board | . | pic32cmmc_smart_appliance_control | Smart Appliance Control Application | PIC32CM MC00 | PIC32CM MC00 Curiosity Nano Evaluation Kit | . | 10dof | MikroElektronika 10DOF Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | eeprom4 | MikroElektronika EEPROM 4 Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | leddriver3 | MikroElektronika LED DRIVER 3 Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | gsm_gps | MikroElektronika GSM-GPS Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | pir | MikroElektronika PIR Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | thumbstick | MikroElektronika Thumbstick Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | usb_uart | MikroElektronika USB UART Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | xpro_adapter | MikroElektronika XPRO Adapter Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | eink_bundle | MikroElektronika EINK Bundle Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | fan | MikroElektronika Fan Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | heartrate9 | MikroElektronika Heart Rate 9 Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | ir_thermo2 | MikroElektronika IrThermo 2 Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | weather | MikroElektronika Weather Click Board example | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | . | same54_getting_started_freertos | Getting Started with Harmony Drivers using FreeRTOS | SAM E54 | SAM E54 Xplained Pro Evaluation Kit | . | samc21_getting_started_freertos | Getting Started with Harmony Drivers using FreeRTOS | SAM C21 | SAM C21 Xplained Pro Evaluation Kit | . Updated Applications . | Application | Description | MCU | Development Board/Kit | Comment | . | snake_game | Snake Game | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | Removed video reference in readme | . | ack_bootloader | Amazon Alexa Connect Kit (ACK) OTA Bootloader | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v4.0 | . | ack_helloworld | Amazon Alexa Connect Kit (ACK) Hello World | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v4.0 | . | ack_microwave | Amazon Alexa Connect Kit (ACK) Microwave | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v4.0 | . | ack_smartlight | Amazon Alexa Connect Kit (ACK) SmartLight | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v4.0 | . | ack_dashreplenishment | Amazon Alexa Connect Kit (ACK) DashReplenishment | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v4.0 | . | google_cloud_iot_core | Google Cloud IoT Core | SAM D21 | SAM-IoT WG Development Board | Updated to integrate CryptAuthLib, Harmony System service and WINC driver | . | fitness_tracker | Fitness Tracker | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to replace Heart rate 3 click board with Heart rate 9 click board | . | ble_fitness_tracker | BLE Fitness Tracker | SAM E51 | SAM E51 Curiosity Nano Evaluation Kit | Updated to replace Heart rate 3 click board with Heart rate 9 click board | . | pic32mzda_sdcard_usb_audio_player | SD Card USB Audio Player | PIC32MZ DA | PIC32MZ DA Curiosity Development Kit | Updated to support multiple bit rates, fixed display refresh rate. Removed unused Audio decoders (Adpcm and mp3) files | . Deleted Applications . | Application | Description | Comment | . | audio_player_lab1 | Audio-Tone using a Lookup Table | Removed MEB-II based audio demo as hardware is matured | . | audio_player_lab2 | Audio-Tone Application by reading the tone from a text file stored in an SD card | Removed MEB-II based audio demo as hardware is matured | . | audio_player_lab3 | SD Card Reader and Audio-Tone Application by reading the tone from a text file stored in an SD card | Removed MEB-II based audio demo as hardware is matured | . | audio_player_lab4 | SD Card Reader “.wav” Audio player | Removed MEB-II based audio demo as hardware is matured | . | audio_player_lab5 | SD Card Audio Player/Reader with Aria Graphics | Removed MEB-II based audio demo as hardware is matured | . Known Issues . | None | . Development Tools . | Refer demo specific documentation in folder “docs” to know the tools and Harmony 3 packages used. | . ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#reference-applications-release-v130-june-2021",
    "relUrl": "/release_notes.html#reference-applications-release-v130-june-2021"
  },"1750": {
    "doc": "Release notes",
    "title": "Reference Applications Release v1.2.0 (January 2021)",
    "content": "New Applications . | Application | Description | MCU | Development Board/Kit | . | pic32cm_mc_curiosity_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32CM MC00 | PIC32CM MC Curiosity Pro Development Board | . | pic32cmmc_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32CM MC00 | PIC32CM MC00 Curiosity Nano Evaluation Kit | . | pic32cmmc_temp_based_fan_control_oled_c | Temperature based Fan Speed Control with OLED C click display | PIC32CM MC00 | PIC32CM MC00 Curiosity Nano Evaluation Kit | . | getting_started_drivers_middleware | Getting Started with Drivers and Middleware | SAM E70 | SAM E70 Xplained Evaluation Kit | . | same54c_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM E54 | SAM E54 Curiosity Ultra Development Board | . | samd21_getting_started_freertos | Getting Started with Harmony v3 Drivers using FreeRTOS | SAM D21 | SAM D21 Xplained Pro Evaluation Kit | . | same51n_low_power_with_oled_c_click | Low Power Application with OLED C Click | SAME 51 | SAM E51 Curiosity Nano Evaluation Kit | . Updated Applications . | Application | Description | MCU | Development Board/Kit | Comment | . | snake_game | Snake Game | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | Fixed image view issue in documentation | . | ack_bootloader | Amazon Alexa Connect Kit (ACK) OTA Bootloader | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v3.2 | . | ack_helloworld | Amazon Alexa Connect Kit (ACK) Hello World | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v3.2 | . | ack_microwave | Amazon Alexa Connect Kit (ACK) Microwave | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v3.2 | . | ack_smartlight | Amazon Alexa Connect Kit (ACK) SmartLight | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v3.2 | . | ack_dashreplenishment | Amazon Alexa Connect Kit (ACK) DashReplenishment | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | Updated to support ACK SDK v3.2 | . | google_cloud_iot_core | Google Cloud IoT Core | SAM D21 | SAM-IoT WG Development Board | Update demo to support 32 character length password and SSID to support single space character | . | snake_game | Snake Game | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | Fixed image view issue in documentation | . | sdadc_conversion_interrupt | SDADC Conversion Interrupt Mode | SAM C21N | SAM C21N Xplained Pro Evaluation Kit | Updated documentation with reference application note link | . | sdadc_conversion_polling | SDADC Conversion Polling Mode | SAM C21N | SAM C21N Xplained Pro Evaluation Kit | Updated documentation with reference application note link | . Known Issues . | The application “sam_d21_iot/google_cloud_iot_core” is developed by applying a patch (available in folder “google_cloud_iot_core/firmware/app_patch”) to MPLAB Harmony v3. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “google_cloud_iot_core/firmware/app_patch” folder. The patch is applied due to a known issue in the application. This issue is expected to be fixed in a future release of “reference_apps” repository. | The application “pic32mz_ef_curiosity_v2/wifi_rgb_easy_configuration” is developed by applying a patch (available in folder “wifi_rgb_easy_configuration/firmware/wifi_repo_patch”) to MPLAB Harmony v3. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “wifi_rgb_easy_configuration/firmware/wifi_repo_patch” folder. The patch is applied due to a known issue in “wireless” repo. This issue is expected to be fixed in a future release of “wireless” repo. | The application demo “pic32mz_ef_sk_meb2/audio_player/audio_player_lab5” is developed using Aria Graphics library. From gfx v3.9.0 onwards Aria Graphics support is deprecated and archived in a separate gfx_aria v3.7.1 repo. If you wish to regenerate this demo, follow the notes mentioned in “Software/Tools Used” section in readme for audio_player_lab5. | . Development Tools . | Refer demo specific documentation in folder “docs” to know the tools and Harmony 3 packages used. | . ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#reference-applications-release-v120-january-2021",
    "relUrl": "/release_notes.html#reference-applications-release-v120-january-2021"
  },"1751": {
    "doc": "Release notes",
    "title": "Reference Applications Release v1.1.0 (September 2020)",
    "content": "New Applications . | Application | Description | MCU | Development Board/Kit | . | google_cloud_iot_core | Google Cloud IoT Core | SAM D21 | SAM-IoT WG Development Board | . | same51n_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAME 51 | SAM E51 Curiosity Nano Evaluation Kit | . | ble_fitness_tracker | BLE Fitness Tracker | SAME 51 | SAM E51 Curiosity Nano Evaluation Kit | . | pic32mzda_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32MZ DA | Curiosity PIC32MZ DA Development Board | . | pic32mzda_sdcard_usb_audio_player | SD Card USB Audio Player | PIC32MZ DA | Curiosity PIC32MZ DA Development Board | . | ack_bootloader | Amazon Alexa Connect Kit (ACK) OTA Bootloader | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | . | ack_helloworld | Amazon Alexa Connect Kit (ACK) Hello World | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | . | ack_microwave | Amazon Alexa Connect Kit (ACK) Microwave | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | . | ack_smartlight | Amazon Alexa Connect Kit (ACK) SmartLight | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | . | ack_dashreplenishment | Amazon Alexa Connect Kit (ACK) DashReplenishment | SAM D21 | SAM D21 Curiosity Nano Evaluation Kit | . | pic18f_to_samd21_migration | Application migration from 8-bit PIC18F to 32-bit SAM D21 | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . | atmega4809_to_samd21_migration | Application migration from 8-bit PIC18F to 32-bit SAM D21 | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . | wifi_rgb_easy_configuration | WiFi based RGB LED Control | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . | snake_game | Snake Game | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . | same54_vending_machine | Vending Machine | SAM E54 | SAM E54 Xplained Pro Evaluation Kit | . | same54_low_power | Low Power | SAM E54 | SAM E54 Xplained Pro Evaluation Kit | . | samd21_ac_sleepwalk_singleshot_gcc | AC Sleepwalking Application built with GCC Toolchain | SAM D21 | SAM D21 Xplained Pro Evaluation Kit | . | sdadc_conversion_interrupt | SDADC Conversion Interrupt Mode | SAM C21N | SAM C21N Xplained Pro Evaluation Kit | . | sdadc_conversion_polling | SDADC Conversion Polling Mode | SAM C21N | SAM C21N Xplained Pro Evaluation Kit | . | same54_sdcard_usb_audio_player | SD Card USB Audio Player | SAM E54 | SAM E54 Curiosity Ultra Development Board | . | same54_uart_live_update | Live Update | SAM E54 | SAM E54 Curiosity Ultra Development Board | . | saml11_trustzone_getting_started | TrustZone Getting Started | SAM L11 | SAML11 Xplained Pro Evaluation Kit | . Updated Applications . - NA - . Known Issues . | The application “sam_d21_iot/google_cloud_iot_core” is developed by applying a patch (available in folder “google_cloud_iot_core/firmware/app_patch”) to MPLAB Harmony v3. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “google_cloud_iot_core/firmware/app_patch” folder. The patch is applied due to a known issue in the application. This issue is expected to be fixed in a future release of “reference_apps” repository. | The application “sam_d21_cnano/ble_weather_station” is developed by applying a patch (available in folder “ble_weather_station/firmware/app_patch”) to MPLAB Harmony v3. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “ble_weather_station/firmware/app_patch” folder. The patch is applied due to a known issue in “bt” repo and in the application. This issue is expected to be fixed in a future release of “reference_apps” repository and “bt” repository. | The application “sam_e51_cnano/ble_weather_station” is developed by applying a patch (available in folder “ble_fitness_tracker/firmware/app_patch”) to MPLAB Harmony v3. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “ble_fitness_tracker/firmware/app_patch” folder. The patch is applied due to a known issue in “bt” repo and in the application. This issue is expected to be fixed in a future release of “reference_apps” repository and “bt” repository. | The application “pic32mz_ef_curiosity_v2/snake_game” is developed by applying a patch (available in folder “snake_game/firmware/gfx_ssd_driver_patch”) to MPLAB Harmony v3 “gfx” repository. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “snake_game/firmware/gfx_ssd_driver_patch” folder. The patch is applied due to a known issue in “gfx” repo v3.7.0. This issue is expected to be fixed in a future release of “gfx” repository. | The application demos “pic32mz_ef_curiosity_v2/snake_game”, “pic32mz_da_curiosity/pic32mzda_sdcard_usb_audio_player”, “sam_e54_cult/same54_sdcard_usb_audio_player” and “pic32mz_ef_sk_meb2/audio_player/audio_player_lab5” having Graphics features are developed using Graphics library “gfx” v3.7.0. These demos could version incompatibility when regenerated with a higher version of “gfx” repo. This limitation is expected to be fixed in a future release of “reference_apps” repository. | . Development Tools . | Refer demo specific documentation in folder “docs” to know the tools and Harmony 3 packages used. | . ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#reference-applications-release-v110-september-2020",
    "relUrl": "/release_notes.html#reference-applications-release-v110-september-2020"
  },"1752": {
    "doc": "Release notes",
    "title": "Reference Applications Release v1.0.0 (June 2020)",
    "content": "New Applications . The following table provides the list of new applications: . | Application | Description | MCU | Development Board/Kit | . | samd21n_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . | fitness_tracker | Fitness Tracker using Curiosity Nano Base for click boards, Heart Rate 3 click and EINK CLICK BUNDLE | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . | location_sos | Location Tagged SOS using Curiosity Nano Base for click boards and GSM-GPS click | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . | ble_weather_station | BLE based Weather Station and Motion Sensor Application on SAM D21 Curiosity Nano and Nano Base for Click boards | SAMD 21 | SAM D21 Curiosity Nano Evaluation Kit | . | pic32mzef_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . | getting_started_ext | Getting Started Extended using Harmony v3 Peripheral Libraries | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . | getting_started_middleware | Getting Started Application using Harmony v3 Drivers, System Services, Middleware and FreeRTOS | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . | msd_multiple_luns | USB MSD with Multiple Drives | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . | sdcard_player | SD Card Audio Player | PIC32MZ EF | Curiosity PIC32MZ EF 2.0 Development Board | . | saml10_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM L10 | SAM L10 Xplained Pro Evaluation Kit | . | saml10_low_power | Low Power | SAM L10 | SAM L10 Xplained Pro Evaluation Kit | . | saml21_low_power | Low Power | SAM L21 | SAM L21 Xplained Pro Evaluation Kit | . | samc21_low_power | Low Power | SAM C21 | SAM C21 Xplained Pro Evaluation Kit | . | same70_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . | getting_started_drv | Getting Started using Harmony v3 Drivers | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . | getting_started_freertos | Getting Started using Harmony v3 Drivers and FreeRTOS | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . | qspi_xdmac_read_write | XDMAC with QSPI | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . | ftp_bootloader | Ethernet bootloader - File Transfer Protocol | SAM E70 | SAM E70 Xplained Ultra Evaluation Kit | . | same54_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM E54 | SAM E54 Xplained Pro Evaluation Kit | . | sleepwalking | SleepWalking | SAM E54 | SAM E54 Xplained Pro Evaluation Kit | . | samd21_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM D21 | SAM D21 Xplained Pro Evaluation Kit | . | samc21n_getting_started | Getting Started using Harmony v3 Peripheral Libraries | SAM C21N | SAM C21N Xplained Pro Evaluation Kit | . | pic32mk_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32MK | PIC32MK General Purpose (GP) Development Board | . | pic32mx470_getting_started | Getting Started using Harmony v3 Peripheral Libraries | PIC32MX | Curiosity PIC32MX470 Development Board | . | audio_player_lab1 | Audio-Tone using a Lookup Table | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . | audio_player_lab2 | Audio-Tone Application by reading the tone from a text file stored in an SD card | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . | audio_player_lab3 | SD Card Reader and Audio-Tone Application by reading the tone from a text file stored in an SD card | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . | audio_player_lab4 | SD Card Reader “.wav” Audio player | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . | audio_player_lab5 | SD Card Audio Player/Reader with Aria Graphics | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit + Multimedia Expansion Board II | . | pic32mz_uart_live_update | Live update on PIC32MZ | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU Starter Kit | . Updated Applications . - NA - . Known Issues . | The demo “pic32mz_ef_sk_meb2/audio_player/audio_player_lab5” is developed by applying a patch (available in folder “audio_player_lab5/firmware/gfx_repo_patch”) to the MPLAB Harmony v3 “gfx” repository. If you need to reconfigure or regenerate this demo using the MHC, please refer the “Notes.txt” file under audio_player_lab5/firmware/gfx_repo_patch” folder. The patch is applied due to a known issue with MHC v3.5.0 for Aria GAC Code Generation. This issue is expected to be fixed in gfx release v3.7.0. | The application “pic32mz_ef_curiosity_v2/msd_multiple_luns” is developed by by applying a patch (available in folder “msd_multiple_luns/firmware/usb_repo_patch”) to MPLAB Harmony v3 “usb” repository. If you need to reconfigure or regenerate this demo using MHC, please refer the “Notes.txt” file under “msd_multiple_luns/firmware/usb_repo_patch” folder. The patch is applied due to a known issue with MHC v3.5.0 for USB Code Generation for this demo application. This issue is expected to be fixed in a future release of “usb” repository. | . Development Tools . | Refer demo specific documentation in folder “docs” to know the tools and Harmony 3 packages used. | . ",
    "url": "http://localhost:4000/reference_apps/release_notes.html#reference-applications-release-v100-june-2020",
    "relUrl": "/release_notes.html#reference-applications-release-v100-june-2020"
  },"1753": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": " ",
    "url": "http://localhost:4000/reference_apps/release_notes.html",
    "relUrl": "/release_notes.html"
  },"1754": {
    "doc": "Harmony 3 Reference Applications Package",
    "title": "Harmony 3 Reference Applications Package",
    "content": "# MPLAB® Harmony 3 Reference Applications MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller unit(MCU) and microprocessor unit (MPU). Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 Reference Application Package. Reference applications are standalone applications which demonstrates specific features or capabilities of Microchip 32-bit SAM/PIC MCUs and MPUs. These applications are developed on Microchip 32-bit SAM/PIC MCU and MPU development boards/kits. In addition to having the MCU/MPU, the 32-bit SAM and PIC MCU/MPU development boards/kits also provide support to exercise the features of MCU/MPU through additional hardware like displays, communication buses, transceivers, sensors, external memories, etc. The additional hardware features are available on the MCU/MPU development boards/kits or is available as plugin through interface headers like mikroBUS Click or Xplained Pro extensions. Following are the typical application types in this repository - Large feature-rich applications involving integration of several technologies like Audio, USB, TCP/IP, Wireless, Security, Low Power, RTOS, etc. - Applications demonstrating certain capabilities of the Microchip 32-bit SAM/PIC MCUs and MPUs. For example: Low Power application on SAM L21 Xplained Pro Evaluation Kit demonstrating idle and standby modes - Applications demonstrating capabilities of Microchip 32-bit SAM/PIC MCUs and MPUs development boards/kits (Curiosity, Nano, etc.) which allows extending hardware capability through mikroBUS Click or Xplained Pro extensions - Getting started applications pertaining to the Microchip's MCU/MPU products. These getting started applications demonstrates usage of MPLAB Harmony 3 framework by exercising commonly used peripheral features The above application types serve as a reference source to evaluate solutions on 32-bit SAM/PIC MCUs and MPUs by developing applications using MPLAB Harmony 3 software framework. **Repository and demo application support:** - The following table lists the fundamental and few technology specific repositories in MPLAB Harmony 3 Software Framework | Repository | # Demo Application | --- | ---| [csp](https://github.com/Microchip-MPLAB-Harmony/csp/tree/master/apps) | Simple applications that directly control the SAM and PIC peripherals | [core](https://github.com/Microchip-MPLAB-Harmony/core/tree/master/apps) | Applications that use the drivers and system services that have advanced capabilities and a higher level of abstraction that gives better hardware independence | [usb](https://github.com/Microchip-MPLAB-Harmony/usb/tree/master/apps) | Applications that demonstrate the capabilities of the MPLAB Harmony USB stack | [net](https://github.com/Microchip-MPLAB-Harmony/net/tree/master/apps) | Applications that demonstrate the capabilities of the MPLAB Harmony TCP/IP stack. These applications use well-known protocols like TCP, UDP, HTTP, SMTP, etc. | [gfx](https://github.com/Microchip-MPLAB-Harmony/gfx/tree/master/apps) | Quick start applications that demonstrates MPLAB Harmony Aria/Legato Graphics Libraries | [gfx_apps](https://github.com/Microchip-MPLAB-Harmony/gfx_apps/tree/master/apps) | Non quick start applications that demonstrates MPLAB Harmony Aria/Legato Graphics Libraries | [audio](https://github.com/Microchip-MPLAB-Harmony/audio/tree/master/apps) | Applications that demonstrates capabilities of the MPLAB Harmony audio offerings, drivers for hardware codecs that can be connected to development boards, audio decoders, etc. | ### Note: The above is not an exhaustive list of all MPLAB Harmony 3 packages and corresponding application offerings. Refer the MPLAB Harmony 3 GitHub [Launch page](https://github.com/Microchip-MPLAB-Harmony) to view the complete list of MPLAB Harmony 3 packages. In each of these packages refer the underlying “apps” folder for the applications offering. **To know more about 32-bit Microcontroller Applications, Reference Designs and Solutions, [Click Here](https://www.microchip.com/en-us/products/microcontrollers-and-microprocessors/32-bit-mcus/applications-reference-designs-and-solutions)** Refer to the following links for release notes and reference application information. - [Release Notes](/reference_apps/release_notes.html) - [MPLAB® Harmony License](/reference_apps/mplab_harmony_license.html) - [MPLAB® Harmony 3 Reference Apps Wiki](https://github.com/Microchip-MPLAB-Harmony/reference_apps/wiki) - [MPLAB® Harmony 3 Reference Applications Index](/reference_apps/apps/readme.html) # Contents Summary | Folder | Description | --- | --- | apps | 32-bit MCU Example reference applications | apps_mpu | 32-bit MPU Example reference applications | docs | Reference applications help documentation | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/MicrochipTech/MPLAB-Harmony-Reference-Apps/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/MicrochipTech/MPLAB-Harmony-Reference-Apps.svg)](https://github.com/MicrochipTech/MPLAB-Harmony-Reference-Apps/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/MicrochipTech/MPLAB-Harmony-Reference-Apps.svg)](https://github.com/MicrochipTech/MPLAB-Harmony-Reference-Apps/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/MicrochipTech/MPLAB-Harmony-Reference-Apps.svg)](https://github.com/MicrochipTech/MPLAB-Harmony-Reference-Apps/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/MicrochipTech/MPLAB-Harmony-Reference-Apps.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/MicrochipTech/MPLAB-Harmony-Reference-Apps.svg?style=social)]() [![](https://img.shields.io/github/watchers/MicrochipTech/MPLAB-Harmony-Reference-Apps.svg?style=social)]() ",
    "url": "http://localhost:4000/reference_apps/",
    "relUrl": "/"
  }
}
`;
var data_for_search
(function (jtd, undefined) {

// Event handling

jtd.addEvent = function(el, type, handler) {
  if (el.attachEvent) el.attachEvent('on'+type, handler); else el.addEventListener(type, handler);
}
jtd.removeEvent = function(el, type, handler) {
  if (el.detachEvent) el.detachEvent('on'+type, handler); else el.removeEventListener(type, handler);
}
jtd.onReady = function(ready) {
  // in case the document is already rendered
  if (document.readyState!='loading') ready();
  // modern browsers
  else if (document.addEventListener) document.addEventListener('DOMContentLoaded', ready);
  // IE <= 8
  else document.attachEvent('onreadystatechange', function(){
      if (document.readyState=='complete') ready();
  });
}

// Show/hide mobile menu

function initNav() {
  jtd.addEvent(document, 'click', function(e){
    var target = e.target;
    while (target && !(target.classList && target.classList.contains('nav-list-expander'))) {
      target = target.parentNode;
    }
    if (target) {
      e.preventDefault();
      target.parentNode.classList.toggle('active');
    }
  });

  const siteNav = document.getElementById('site-nav');
  const mainHeader = document.getElementById('main-header');
  const menuButton = document.getElementById('menu-button');

  jtd.addEvent(menuButton, 'click', function(e){
    e.preventDefault();

    if (menuButton.classList.toggle('nav-open')) {
      siteNav.classList.add('nav-open');
      mainHeader.classList.add('nav-open');
    } else {
      siteNav.classList.remove('nav-open');
      mainHeader.classList.remove('nav-open');
    }
  });
}
// Site search

function initSearch() {

   	 data_for_search = JSON.parse(myVariable);
     lunr.tokenizer.separator = /[\s/]+/


      var index = lunr(function () {
        this.ref('id');
        this.field('title', { boost: 200 });
        this.field('content', { boost: 2 });
        this.field('url');
        this.metadataWhitelist = ['position']

		var location = document.location.pathname;
		var path = location.substring(0, location.lastIndexOf("/"));
		var directoryName = path.substring(path.lastIndexOf("/")+1);
		var fileName = location.substring(location.lastIndexOf("/")+1);
		// var ParentDirectoryName = path.substring(path.lastIndexOf("/")-12);

		var s_before = "http://localhost:4000/reference_apps/";
		var repo_name = "reference_apps";

        var cur_path_from_repo = path.substring(path.lastIndexOf(repo_name));

        // Decrement depth by 2 as HTML files are placed in repo_name/docs
        var cur_depth_from_doc_folder = (cur_path_from_repo.split("/").length - 2);
        var rel_path_to_doc_folder = "";

        if (cur_depth_from_doc_folder == 0) {
            rel_path_to_doc_folder = "./"
        }
        else {
            for (var i = 0; i < cur_depth_from_doc_folder; i++)
            {
                rel_path_to_doc_folder = rel_path_to_doc_folder + "../"
            }
        }


        for (var i in data_for_search) {
			data_for_search[i].url = data_for_search[i].url.replace(s_before, rel_path_to_doc_folder);

			if (data_for_search[i].title == "Harmony 3 Reference Applications Package")
			{
				data_for_search[i].url = data_for_search[i].url + "index.html"
			}

          this.add({
            id: i,
            title: data_for_search[i].title,
            content: data_for_search[i].content,
            url: data_for_search[i].url
          });
        }
      });

      searchLoaded(index, data_for_search);
}
function searchLoaded(index, docs) {
  var index = index;
  var docs = docs;
  var searchInput = document.getElementById('search-input');
  var searchResults = document.getElementById('search-results');
  var mainHeader = document.getElementById('main-header');
  var currentInput;
  var currentSearchIndex = 0;

  function showSearch() {
    document.documentElement.classList.add('search-active');
  }

  function hideSearch() {
    document.documentElement.classList.remove('search-active');
  }

  function update() {
    currentSearchIndex++;

    var input = searchInput.value;
    if (input === '') {
      hideSearch();
    } else {
      showSearch();
      // scroll search input into view, workaround for iOS Safari
      window.scroll(0, -1);
      setTimeout(function(){ window.scroll(0, 0); }, 0);
    }
    if (input === currentInput) {
      return;
    }
    currentInput = input;
    searchResults.innerHTML = '';
    if (input === '') {
      return;
    }

    var results = index.query(function (query) {
      var tokens = lunr.tokenizer(input)
      query.term(tokens, {
        boost: 10
      });
      query.term(tokens, {
        wildcard: lunr.Query.wildcard.TRAILING
      });
    });

    if ((results.length == 0) && (input.length > 2)) {
      var tokens = lunr.tokenizer(input).filter(function(token, i) {
        return token.str.length < 20;
      })
      if (tokens.length > 0) {
        results = index.query(function (query) {
          query.term(tokens, {
            editDistance: Math.round(Math.sqrt(input.length / 2 - 1))
          });
        });
      }
    }

    if (results.length == 0) {
      var noResultsDiv = document.createElement('div');
      noResultsDiv.classList.add('search-no-result');
      noResultsDiv.innerText = 'No results found';
      searchResults.appendChild(noResultsDiv);

    } else {
      var resultsList = document.createElement('ul');
      resultsList.classList.add('search-results-list');
      searchResults.appendChild(resultsList);

      addResults(resultsList, results, 0, 10, 100, currentSearchIndex);
    }

    function addResults(resultsList, results, start, batchSize, batchMillis, searchIndex) {
      if (searchIndex != currentSearchIndex) {
        return;
      }
      for (var i = start; i < (start + batchSize); i++) {
        if (i == results.length) {
          return;
        }
        addResult(resultsList, results[i]);
      }
      setTimeout(function() {
        addResults(resultsList, results, start + batchSize, batchSize, batchMillis, searchIndex);
      }, batchMillis);
    }

    function addResult(resultsList, result) {
      var doc = docs[result.ref];

      var resultsListItem = document.createElement('li');
      resultsListItem.classList.add('search-results-list-item');
      resultsList.appendChild(resultsListItem);

      var resultLink = document.createElement('a');
      resultLink.classList.add('search-result');
      resultLink.setAttribute('href', doc.url);
      resultsListItem.appendChild(resultLink);

      var resultTitle = document.createElement('div');
      resultTitle.classList.add('search-result-title');
      resultLink.appendChild(resultTitle);

      var resultDoc = document.createElement('div');
      resultDoc.classList.add('search-result-doc');
      resultDoc.innerHTML = '<svg viewBox="0 0 24 24" class="search-result-icon"><use xlink:href="#svg-doc"></use></svg>';
      resultTitle.appendChild(resultDoc);

      var resultDocTitle = document.createElement('div');
      resultDocTitle.classList.add('search-result-doc-title');
      resultDocTitle.innerHTML = doc.doc;
      resultDoc.appendChild(resultDocTitle);
      var resultDocOrSection = resultDocTitle;

      if (doc.doc != doc.title) {
        resultDoc.classList.add('search-result-doc-parent');
        var resultSection = document.createElement('div');
        resultSection.classList.add('search-result-section');
        resultSection.innerHTML = doc.title;
        resultTitle.appendChild(resultSection);
        resultDocOrSection = resultSection;
      }

      var metadata = result.matchData.metadata;
      var titlePositions = [];
      var contentPositions = [];
      for (var j in metadata) {
        var meta = metadata[j];
        if (meta.title) {
          var positions = meta.title.position;
          for (var k in positions) {
            titlePositions.push(positions[k]);
          }
        }
        if (meta.content) {
          var positions = meta.content.position;
          for (var k in positions) {
            var position = positions[k];
            var previewStart = position[0];
            var previewEnd = position[0] + position[1];
            var ellipsesBefore = true;
            var ellipsesAfter = true;
            for (var k = 0; k < 5; k++) {
              var nextSpace = doc.content.lastIndexOf(' ', previewStart - 2);
              var nextDot = doc.content.lastIndexOf('. ', previewStart - 2);
              if ((nextDot >= 0) && (nextDot > nextSpace)) {
                previewStart = nextDot + 1;
                ellipsesBefore = false;
                break;
              }
              if (nextSpace < 0) {
                previewStart = 0;
                ellipsesBefore = false;
                break;
              }
              previewStart = nextSpace + 1;
            }
            for (var k = 0; k < 10; k++) {
              var nextSpace = doc.content.indexOf(' ', previewEnd + 1);
              var nextDot = doc.content.indexOf('. ', previewEnd + 1);
              if ((nextDot >= 0) && (nextDot < nextSpace)) {
                previewEnd = nextDot;
                ellipsesAfter = false;
                break;
              }
              if (nextSpace < 0) {
                previewEnd = doc.content.length;
                ellipsesAfter = false;
                break;
              }
              previewEnd = nextSpace;
            }
            contentPositions.push({
              highlight: position,
              previewStart: previewStart, previewEnd: previewEnd,
              ellipsesBefore: ellipsesBefore, ellipsesAfter: ellipsesAfter
            });
          }
        }
      }

      if (titlePositions.length > 0) {
        titlePositions.sort(function(p1, p2){ return p1[0] - p2[0] });
        resultDocOrSection.innerHTML = '';
        addHighlightedText(resultDocOrSection, doc.title, 0, doc.title.length, titlePositions);
      }

      if (contentPositions.length > 0) {
        contentPositions.sort(function(p1, p2){ return p1.highlight[0] - p2.highlight[0] });
        var contentPosition = contentPositions[0];
        var previewPosition = {
          highlight: [contentPosition.highlight],
          previewStart: contentPosition.previewStart, previewEnd: contentPosition.previewEnd,
          ellipsesBefore: contentPosition.ellipsesBefore, ellipsesAfter: contentPosition.ellipsesAfter
        };
        var previewPositions = [previewPosition];
        for (var j = 1; j < contentPositions.length; j++) {
          contentPosition = contentPositions[j];
          if (previewPosition.previewEnd < contentPosition.previewStart) {
            previewPosition = {
              highlight: [contentPosition.highlight],
              previewStart: contentPosition.previewStart, previewEnd: contentPosition.previewEnd,
              ellipsesBefore: contentPosition.ellipsesBefore, ellipsesAfter: contentPosition.ellipsesAfter
            }
            previewPositions.push(previewPosition);
          } else {
            previewPosition.highlight.push(contentPosition.highlight);
            previewPosition.previewEnd = contentPosition.previewEnd;
            previewPosition.ellipsesAfter = contentPosition.ellipsesAfter;
          }
        }

        var resultPreviews = document.createElement('div');
        resultPreviews.classList.add('search-result-previews');
        resultLink.appendChild(resultPreviews);

        var content = doc.content;
        for (var j = 0; j < Math.min(previewPositions.length, 3); j++) {
          var position = previewPositions[j];

          var resultPreview = document.createElement('div');
          resultPreview.classList.add('search-result-preview');
          resultPreviews.appendChild(resultPreview);

          if (position.ellipsesBefore) {
            resultPreview.appendChild(document.createTextNode('... '));
          }
          addHighlightedText(resultPreview, content, position.previewStart, position.previewEnd, position.highlight);
          if (position.ellipsesAfter) {
            resultPreview.appendChild(document.createTextNode(' ...'));
          }
        }
      }
      var resultRelUrl = document.createElement('span');
      resultRelUrl.classList.add('search-result-rel-url');
      resultRelUrl.innerText = doc.relUrl;
      resultTitle.appendChild(resultRelUrl);
    }

    function addHighlightedText(parent, text, start, end, positions) {
      var index = start;
      for (var i in positions) {
        var position = positions[i];
        var span = document.createElement('span');
        span.innerHTML = text.substring(index, position[0]);
        parent.appendChild(span);
        index = position[0] + position[1];
        var highlight = document.createElement('span');
        highlight.classList.add('search-result-highlight');
        highlight.innerHTML = text.substring(position[0], index);
        parent.appendChild(highlight);
      }
      var span = document.createElement('span');
      span.innerHTML = text.substring(index, end);
      parent.appendChild(span);
    }
  }

  jtd.addEvent(searchInput, 'focus', function(){
    setTimeout(update, 0);
  });

  jtd.addEvent(searchInput, 'keyup', function(e){
    switch (e.keyCode) {
      case 27: // When esc key is pressed, hide the results and clear the field
        searchInput.value = '';
        break;
      case 38: // arrow up
      case 40: // arrow down
      case 13: // enter
        e.preventDefault();
        return;
    }
    update();
  });

  jtd.addEvent(searchInput, 'keydown', function(e){
    switch (e.keyCode) {
      case 38: // arrow up
        e.preventDefault();
        var active = document.querySelector('.search-result.active');
        if (active) {
          active.classList.remove('active');
          if (active.parentElement.previousSibling) {
            var previous = active.parentElement.previousSibling.querySelector('.search-result');
            previous.classList.add('active');
          }
        }
        return;
      case 40: // arrow down
        e.preventDefault();
        var active = document.querySelector('.search-result.active');
        if (active) {
          if (active.parentElement.nextSibling) {
            var next = active.parentElement.nextSibling.querySelector('.search-result');
            active.classList.remove('active');
            next.classList.add('active');
          }
        } else {
          var next = document.querySelector('.search-result');
          if (next) {
            next.classList.add('active');
          }
        }
        return;
      case 13: // enter
        e.preventDefault();
        var active = document.querySelector('.search-result.active');
        if (active) {
          active.click();
        } else {
          var first = document.querySelector('.search-result');
          if (first) {
            first.click();
          }
        }
        return;
    }
  });

  jtd.addEvent(document, 'click', function(e){
    if (e.target != searchInput) {
      hideSearch();
    }
  });
}

// Switch theme

jtd.getTheme = function() {
  var cssFileHref = document.querySelector('[rel="stylesheet"]').getAttribute('href');
  return cssFileHref.substring(cssFileHref.lastIndexOf('-') + 1, cssFileHref.length - 4);
}

jtd.setTheme = function(theme) {
  var cssFile = document.querySelector('[rel="stylesheet"]');
  cssFile.setAttribute('href', 'http://localhost:4000/reference_apps/assets/css/just-the-docs-' + theme + '.css');
}

// Document ready

jtd.onReady(function(){
  initNav();
  initSearch();
});

})(window.jtd = window.jtd || {});


