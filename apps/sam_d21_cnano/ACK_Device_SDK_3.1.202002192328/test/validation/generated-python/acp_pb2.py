# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: acp.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from v3avs_capabilities import V3AVS_pb2 as v3avs__capabilities_dot_V3AVS__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='acp.proto',
  package='acp',
  syntax='proto3',
  serialized_pb=_b('\n\tacp.proto\x12\x03\x61\x63p\x1a\x1ev3avs_capabilities/V3AVS.proto\"\xac\x01\n\x10metric_datapoint\x12-\n\tdata_type\x18\x01 \x01(\x0e\x32\x1a.acp.metric_datapoint.Type\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x0f\n\x07\x63ounter\x18\x06 \x01(\r\x12\x0c\n\x04text\x18\x08 \x01(\t\x12\x0e\n\x06number\x18\t \x01(\x02\",\n\x04Type\x12\x0b\n\x07\x43OUNTER\x10\x00\x12\x0c\n\x08\x44ISCRETE\x10\x02\x12\t\n\x05GAUGE\x10\x04\"*\n\x04time\x12\n\n\x02hh\x18\x01 \x01(\x05\x12\n\n\x02mm\x18\x02 \x01(\x05\x12\n\n\x02ss\x18\x03 \x01(\x05\"\'\n\x08property\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\"\xae\x0e\n\x03\x63md\x12\x35\n\x12get_next_event_obj\x18\x0c \x01(\x0b\x32\x17.acp.cmd.get_next_eventH\x00\x12\x41\n\x18get_firmware_version_obj\x18\x0e \x01(\x0b\x32\x1d.acp.cmd.get_firmware_versionH\x00\x12\x43\n\x19trigger_factory_reset_obj\x18\x0f \x01(\x0b\x32\x1e.acp.cmd.trigger_factory_resetH\x00\x12\x39\n\x14\x65nter_setup_mode_obj\x18\x10 \x01(\x0b\x32\x19.acp.cmd.enter_setup_modeH\x00\x12\x43\n\x19get_ack_hardware_info_obj\x18\x16 \x01(\x0b\x32\x1e.acp.cmd.get_ack_hardware_infoH\x00\x12\x35\n\x12get_ack_status_obj\x18\x17 \x01(\x0b\x32\x17.acp.cmd.get_ack_statusH\x00\x12K\n\x1dread_host_fw_update_bytes_obj\x18\r \x01(\x0b\x32\".acp.cmd.read_host_fw_update_bytesH\x00\x12;\n\x15write_host_config_obj\x18\x15 \x01(\x0b\x32\x1a.acp.cmd.write_host_configH\x00\x12+\n\rwrite_log_obj\x18\x33 \x01(\x0b\x32\x12.acp.cmd.write_logH\x00\x12/\n\x0fsubmit_logs_obj\x18\x35 \x01(\x0b\x32\x14.acp.cmd.submit_logsH\x00\x12;\n\x15record_dem_metric_obj\x18@ \x01(\x0b\x32\x1a.acp.cmd.record_dem_metricH\x00\x12\x39\n\x14send_alexa_event_obj\x18Q \x01(\x0b\x32\x19.acp.cmd.send_alexa_eventH\x00\x12\x31\n\x10provisioning_obj\x18\\ \x01(\x0b\x32\x15.acp.cmd.provisioningH\x00\x1a\x32\n\x10send_alexa_event\x12\x1e\n\x05\x65vent\x18\x01 \x01(\x0b\x32\x0f.V3AVS.AvsEvent\x1a\x10\n\x0eget_next_event\x1a;\n\x19read_host_fw_update_bytes\x12\x0e\n\x06offset\x18\x01 \x01(\r\x12\x0e\n\x06length\x18\x02 \x01(\r\x1a\x16\n\x14get_firmware_version\x1a\x17\n\x15trigger_factory_reset\x1a\xde\x01\n\x10\x65nter_setup_mode\x12\x39\n\x04mode\x18\x01 \x01(\x0e\x32+.acp.cmd.enter_setup_mode.registration_type\x12\x39\n\x08security\x18\x02 \x01(\x0e\x32\'.acp.cmd.enter_setup_mode.security_type\")\n\x11registration_type\x12\x0b\n\x07unknown\x10\x00\x12\x07\n\x03\x66\x66s\x10\x01\")\n\rsecurity_type\x12\n\n\x06secure\x10\x00\x12\x0c\n\x08insecure\x10\x01\x1aR\n\twrite_log\x12\x11\n\tcomponent\x18\x01 \x01(\t\x12!\n\tlog_level\x18\x02 \x01(\x0e\x32\x0e.acp.log_level\x12\x0f\n\x07message\x18\x05 \x01(\t\x1a\r\n\x0bsubmit_logs\x1a\xb2\x01\n\x11record_dem_metric\x12\x34\n\x0bmetric_type\x18\x01 \x01(\x0e\x32\x1f.acp.cmd.record_dem_metric.Type\x12)\n\ndatapoints\x18\x02 \x03(\x0b\x32\x15.acp.metric_datapoint\"<\n\x04Type\x12\x10\n\x0cUSER_PRESENT\x10\x00\x12\x10\n\x0cUSAGE_REPORT\x10\x01\x12\x10\n\x0c\x44\x45VICE_ERROR\x10\x02\x1a[\n\x11write_host_config\x12\x18\n\x10\x66irmware_version\x18\x01 \x01(\x04\x12 \n\thost_info\x18\x04 \x03(\x0b\x32\r.acp.propertyJ\x04\x08\x02\x10\x03J\x04\x08\x03\x10\x04\x1a\x17\n\x15get_ack_hardware_info\x1a\x10\n\x0eget_ack_status\x1a\xe0\x01\n\x0cprovisioning\x12R\n\x1aget_provisioning_state_obj\x18\n \x01(\x0b\x32,.acp.cmd.provisioning.get_provisioning_stateH\x00\x12\x44\n\x13get_device_type_obj\x18\x0b \x01(\x0b\x32%.acp.cmd.provisioning.get_device_typeH\x00\x1a\x18\n\x16get_provisioning_state\x1a\x11\n\x0fget_device_typeB\t\n\x07\x63ommandB\x06\n\x04type\"\xea\x11\n\x08response\x12,\n\x0bgeneric_obj\x18\x01 \x01(\x0b\x32\x15.acp.response.genericH\x00\x12\x46\n\x18get_firmware_version_obj\x18\x03 \x01(\x0b\x32\".acp.response.get_firmware_versionH\x00\x12P\n\x1dread_host_fw_update_bytes_obj\x18\x02 \x01(\x0b\x32\'.acp.response.read_host_fw_update_bytesH\x00\x12H\n\x19get_ack_hardware_info_obj\x18\x05 \x01(\x0b\x32#.acp.response.get_ack_hardware_infoH\x00\x12:\n\x12get_ack_status_obj\x18\x06 \x01(\x0b\x32\x1c.acp.response.get_ack_statusH\x00\x12;\n\x14reboot_requested_obj\x18) \x01(\x0b\x32\x1b.acp.event.reboot_requestedH\x00\x12I\n\x1bhost_fw_update_received_obj\x18* \x01(\x0b\x32\".acp.event.host_fw_update_receivedH\x00\x12=\n\x15log_level_changed_obj\x18+ \x01(\x0b\x32\x1c.acp.event.log_level_changedH\x00\x12/\n\x0e\x61\x63k_booted_obj\x18- \x01(\x0b\x32\x15.acp.event.ack_bootedH\x00\x12I\n\x1b\x66\x61\x63tory_reset_requested_obj\x18/ \x01(\x0b\x32\".acp.event.factory_reset_requestedH\x00\x12K\n\x1c\x61lexa_directive_received_obj\x18= \x01(\x0b\x32#.acp.event.alexa_directive_receivedH\x00\x12\x36\n\x10provisioning_obj\x18\\ \x01(\x0b\x32\x1a.acp.response.provisioningH\x00\x1a\xeb\x04\n\x07generic\x12)\n\x04\x63ode\x18\x01 \x01(\x0e\x32\x1b.acp.response.generic.error\x12\x13\n\x0b\x64\x65scription\x18\x02 \x01(\t\"\x9f\x04\n\x05\x65rror\x12\x0c\n\x08no_error\x10\x00\x12\t\n\x05other\x10\x01\x12\x13\n\x0funknown_command\x10\x02\x12\x14\n\x10no_pending_event\x10\x03\x12\x14\n\x10setup_mode_error\x10\x04\x12\x15\n\x11iot_not_connected\x10\x14\x12\x1f\n\x1biot_not_subscribed_to_topic\x10\x15\x12#\n\x1fiot_already_subscribed_to_topic\x10\x16\x12\"\n\x1eiot_max_subscriptions_exceeded\x10\x17\x12\x16\n\x12iot_internal_error\x10\x18\x12\x1d\n\x19\x66w_update_session_invalid\x10(\x12\x19\n\x15\x66w_update_flash_error\x10)\x12\x1b\n\x17\x66w_update_out_of_memory\x10*\x12\x1a\n\x16\x66w_update_invalid_size\x10+\x12\x1d\n\x19\x66w_update_invalid_session\x10,\x12\x1b\n\x17\x66w_update_invalid_chunk\x10-\x12\x1e\n\x1a\x66w_update_invalid_checksum\x10.\x12\x1a\n\x16host_fw_update_invalid\x10\x32\x12\x17\n\x13host_fw_flash_error\x10\x33\x12\x1f\n\x1bhost_fw_update_invalid_size\x10\x35\x1a*\n\x19read_host_fw_update_bytes\x12\r\n\x05\x62ytes\x18\x01 \x01(\x0c\x1a\x62\n\x14get_firmware_version\x12\x17\n\x0fprotocol_number\x18\x03 \x01(\r\x12\x14\n\x0c\x62uild_number\x18\x04 \x01(\r\x12\x1b\n\x13incremental_version\x18\x05 \x01(\t\x1a$\n\x15get_ack_hardware_info\x12\x0b\n\x03\x64sn\x18\x01 \x01(\t\x1a\xeb\x01\n\x0eget_ack_status\x12\x1f\n\x0c\x63urrent_time\x18\x01 \x01(\x0b\x32\t.acp.time\x12!\n\twifi_mode\x18\x02 \x01(\x0e\x32\x0e.acp.wifi_mode\x12\x12\n\nsetup_mode\x18\x03 \x01(\x08\x12-\n\nerror_code\x18\x04 \x01(\x0e\x32\x19.acp.response.error_codes\x12\x13\n\x0bsetup_types\x18\x05 \x01(\r\x12&\n\x0bsetup_stage\x18\x06 \x01(\x0e\x32\x11.acp.setup_stages\x12\x15\n\repoch_seconds\x18\x07 \x01(\r\x1a\xe2\x02\n\x0cprovisioning\x12M\n\x15provisioning_info_obj\x18\x64 \x01(\x0b\x32,.acp.response.provisioning.provisioning_infoH\x00\x12\x41\n\x0f\x64\x65vice_type_obj\x18\x65 \x01(\x0b\x32&.acp.response.provisioning.device_typeH\x00\x1aQ\n\x11provisioning_info\x12<\n\x05state\x18\n \x01(\x0e\x32-.acp.response.provisioning.provisioning_state\x1a\"\n\x0b\x64\x65vice_type\x12\x13\n\x0b\x64\x65vice_type\x18\x0b \x01(\t\"=\n\x12provisioning_state\x12\x0b\n\x07unknown\x10\x00\x12\x0e\n\nnot_locked\x10\x01\x12\n\n\x06locked\x10\x05\x42\n\n\x08response\"I\n\x0b\x65rror_codes\x12\x0c\n\x08no_error\x10\x00\x12\x17\n\x13\x64\x65vice_registration\x10\x01\x12\x13\n\x0flog_upload_fail\x10\x02\x42\x06\n\x04type\"\xab\x02\n\x05\x65vent\x1a!\n\x10reboot_requested\x12\r\n\x05\x66orce\x18\x01 \x01(\x08\x1aZ\n\x17host_fw_update_received\x12\x0f\n\x07version\x18\x01 \x01(\t\x12\x0c\n\x04size\x18\x02 \x01(\r\x12\x11\n\tsignature\x18\x03 \x01(\t\x12\r\n\x05\x66orce\x18\x04 \x01(\x08\x1a\x42\n\x18\x61lexa_directive_received\x12&\n\tdirective\x18\x01 \x01(\x0b\x32\x13.V3AVS.AvsDirective\x1a\x36\n\x11log_level_changed\x12!\n\tlog_level\x18\x01 \x01(\x0e\x32\x0e.acp.log_level\x1a\x0c\n\nack_booted\x1a\x19\n\x17\x66\x61\x63tory_reset_requested*&\n\x10protobuf_version\x12\t\n\x05\x64ummy\x10\x00\x12\x07\n\x03num\x10\x02*+\n\tlog_level\x12\t\n\x05\x64\x65\x62ug\x10\x00\x12\x08\n\x04info\x10\x01\x12\t\n\x05\x65rror\x10\x03*,\n\twifi_mode\x12\r\n\tconnected\x10\x00\x12\x10\n\x0c\x64isconnected\x10\x01*^\n\x0csetup_stages\x12\x08\n\x04none\x10\x00\x12\x10\n\x0c\x64iscoverable\x10\x01\x12\x15\n\x11setup_in_progress\x10\x02\x12\x0e\n\nregistered\x10\x03\x12\x0b\n\x07timeout\x10\x04*8\n\x0bsetup_types\x12\x0e\n\nnotrunning\x10\x00\x12\x07\n\x03ugs\x10\x01\x12\x07\n\x03\x62\x63s\x10\x02\x12\x07\n\x03zts\x10\x04\x62\x06proto3')
  ,
  dependencies=[v3avs__capabilities_dot_V3AVS__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_PROTOBUF_VERSION = _descriptor.EnumDescriptor(
  name='protobuf_version',
  full_name='acp.protobuf_version',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='dummy', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='num', index=1, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4738,
  serialized_end=4776,
)
_sym_db.RegisterEnumDescriptor(_PROTOBUF_VERSION)

protobuf_version = enum_type_wrapper.EnumTypeWrapper(_PROTOBUF_VERSION)
_LOG_LEVEL = _descriptor.EnumDescriptor(
  name='log_level',
  full_name='acp.log_level',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='debug', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='info', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='error', index=2, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4778,
  serialized_end=4821,
)
_sym_db.RegisterEnumDescriptor(_LOG_LEVEL)

log_level = enum_type_wrapper.EnumTypeWrapper(_LOG_LEVEL)
_WIFI_MODE = _descriptor.EnumDescriptor(
  name='wifi_mode',
  full_name='acp.wifi_mode',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='connected', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='disconnected', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4823,
  serialized_end=4867,
)
_sym_db.RegisterEnumDescriptor(_WIFI_MODE)

wifi_mode = enum_type_wrapper.EnumTypeWrapper(_WIFI_MODE)
_SETUP_STAGES = _descriptor.EnumDescriptor(
  name='setup_stages',
  full_name='acp.setup_stages',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='none', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='discoverable', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='setup_in_progress', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='registered', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='timeout', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4869,
  serialized_end=4963,
)
_sym_db.RegisterEnumDescriptor(_SETUP_STAGES)

setup_stages = enum_type_wrapper.EnumTypeWrapper(_SETUP_STAGES)
_SETUP_TYPES = _descriptor.EnumDescriptor(
  name='setup_types',
  full_name='acp.setup_types',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='notrunning', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ugs', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='bcs', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='zts', index=3, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4965,
  serialized_end=5021,
)
_sym_db.RegisterEnumDescriptor(_SETUP_TYPES)

setup_types = enum_type_wrapper.EnumTypeWrapper(_SETUP_TYPES)
dummy = 0
num = 2
debug = 0
info = 1
error = 3
connected = 0
disconnected = 1
none = 0
discoverable = 1
setup_in_progress = 2
registered = 3
timeout = 4
notrunning = 0
ugs = 1
bcs = 2
zts = 4


_METRIC_DATAPOINT_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='acp.metric_datapoint.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='COUNTER', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DISCRETE', index=1, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='GAUGE', index=2, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=179,
  serialized_end=223,
)
_sym_db.RegisterEnumDescriptor(_METRIC_DATAPOINT_TYPE)

_CMD_ENTER_SETUP_MODE_REGISTRATION_TYPE = _descriptor.EnumDescriptor(
  name='registration_type',
  full_name='acp.cmd.enter_setup_mode.registration_type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='unknown', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ffs', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1414,
  serialized_end=1455,
)
_sym_db.RegisterEnumDescriptor(_CMD_ENTER_SETUP_MODE_REGISTRATION_TYPE)

_CMD_ENTER_SETUP_MODE_SECURITY_TYPE = _descriptor.EnumDescriptor(
  name='security_type',
  full_name='acp.cmd.enter_setup_mode.security_type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='secure', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='insecure', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1457,
  serialized_end=1498,
)
_sym_db.RegisterEnumDescriptor(_CMD_ENTER_SETUP_MODE_SECURITY_TYPE)

_CMD_RECORD_DEM_METRIC_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='acp.cmd.record_dem_metric.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='USER_PRESENT', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='USAGE_REPORT', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='DEVICE_ERROR', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1718,
  serialized_end=1778,
)
_sym_db.RegisterEnumDescriptor(_CMD_RECORD_DEM_METRIC_TYPE)

_RESPONSE_GENERIC_ERROR = _descriptor.EnumDescriptor(
  name='error',
  full_name='acp.response.generic.error',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='no_error', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='other', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='unknown_command', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='no_pending_event', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='setup_mode_error', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='iot_not_connected', index=5, number=20,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='iot_not_subscribed_to_topic', index=6, number=21,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='iot_already_subscribed_to_topic', index=7, number=22,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='iot_max_subscriptions_exceeded', index=8, number=23,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='iot_internal_error', index=9, number=24,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='fw_update_session_invalid', index=10, number=40,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='fw_update_flash_error', index=11, number=41,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='fw_update_out_of_memory', index=12, number=42,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='fw_update_invalid_size', index=13, number=43,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='fw_update_invalid_session', index=14, number=44,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='fw_update_invalid_chunk', index=15, number=45,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='fw_update_invalid_checksum', index=16, number=46,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='host_fw_update_invalid', index=17, number=50,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='host_fw_flash_error', index=18, number=51,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='host_fw_update_invalid_size', index=19, number=53,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=3031,
  serialized_end=3574,
)
_sym_db.RegisterEnumDescriptor(_RESPONSE_GENERIC_ERROR)

_RESPONSE_PROVISIONING_PROVISIONING_STATE = _descriptor.EnumDescriptor(
  name='provisioning_state',
  full_name='acp.response.provisioning.provisioning_state',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='unknown', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='not_locked', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='locked', index=2, number=5,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4278,
  serialized_end=4339,
)
_sym_db.RegisterEnumDescriptor(_RESPONSE_PROVISIONING_PROVISIONING_STATE)

_RESPONSE_ERROR_CODES = _descriptor.EnumDescriptor(
  name='error_codes',
  full_name='acp.response.error_codes',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='no_error', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='device_registration', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='log_upload_fail', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=4353,
  serialized_end=4426,
)
_sym_db.RegisterEnumDescriptor(_RESPONSE_ERROR_CODES)


_METRIC_DATAPOINT = _descriptor.Descriptor(
  name='metric_datapoint',
  full_name='acp.metric_datapoint',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data_type', full_name='acp.metric_datapoint.data_type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='acp.metric_datapoint.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='counter', full_name='acp.metric_datapoint.counter', index=2,
      number=6, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='text', full_name='acp.metric_datapoint.text', index=3,
      number=8, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='number', full_name='acp.metric_datapoint.number', index=4,
      number=9, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _METRIC_DATAPOINT_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=51,
  serialized_end=223,
)


_TIME = _descriptor.Descriptor(
  name='time',
  full_name='acp.time',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hh', full_name='acp.time.hh', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='mm', full_name='acp.time.mm', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ss', full_name='acp.time.ss', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=225,
  serialized_end=267,
)


_PROPERTY = _descriptor.Descriptor(
  name='property',
  full_name='acp.property',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='acp.property.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='acp.property.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=269,
  serialized_end=308,
)


_CMD_SEND_ALEXA_EVENT = _descriptor.Descriptor(
  name='send_alexa_event',
  full_name='acp.cmd.send_alexa_event',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='event', full_name='acp.cmd.send_alexa_event.event', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1095,
  serialized_end=1145,
)

_CMD_GET_NEXT_EVENT = _descriptor.Descriptor(
  name='get_next_event',
  full_name='acp.cmd.get_next_event',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1147,
  serialized_end=1163,
)

_CMD_READ_HOST_FW_UPDATE_BYTES = _descriptor.Descriptor(
  name='read_host_fw_update_bytes',
  full_name='acp.cmd.read_host_fw_update_bytes',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='offset', full_name='acp.cmd.read_host_fw_update_bytes.offset', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='length', full_name='acp.cmd.read_host_fw_update_bytes.length', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1165,
  serialized_end=1224,
)

_CMD_GET_FIRMWARE_VERSION = _descriptor.Descriptor(
  name='get_firmware_version',
  full_name='acp.cmd.get_firmware_version',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1226,
  serialized_end=1248,
)

_CMD_TRIGGER_FACTORY_RESET = _descriptor.Descriptor(
  name='trigger_factory_reset',
  full_name='acp.cmd.trigger_factory_reset',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1250,
  serialized_end=1273,
)

_CMD_ENTER_SETUP_MODE = _descriptor.Descriptor(
  name='enter_setup_mode',
  full_name='acp.cmd.enter_setup_mode',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='mode', full_name='acp.cmd.enter_setup_mode.mode', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='security', full_name='acp.cmd.enter_setup_mode.security', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _CMD_ENTER_SETUP_MODE_REGISTRATION_TYPE,
    _CMD_ENTER_SETUP_MODE_SECURITY_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1276,
  serialized_end=1498,
)

_CMD_WRITE_LOG = _descriptor.Descriptor(
  name='write_log',
  full_name='acp.cmd.write_log',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='component', full_name='acp.cmd.write_log.component', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='log_level', full_name='acp.cmd.write_log.log_level', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='acp.cmd.write_log.message', index=2,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1500,
  serialized_end=1582,
)

_CMD_SUBMIT_LOGS = _descriptor.Descriptor(
  name='submit_logs',
  full_name='acp.cmd.submit_logs',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1584,
  serialized_end=1597,
)

_CMD_RECORD_DEM_METRIC = _descriptor.Descriptor(
  name='record_dem_metric',
  full_name='acp.cmd.record_dem_metric',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='metric_type', full_name='acp.cmd.record_dem_metric.metric_type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='datapoints', full_name='acp.cmd.record_dem_metric.datapoints', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _CMD_RECORD_DEM_METRIC_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1600,
  serialized_end=1778,
)

_CMD_WRITE_HOST_CONFIG = _descriptor.Descriptor(
  name='write_host_config',
  full_name='acp.cmd.write_host_config',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='firmware_version', full_name='acp.cmd.write_host_config.firmware_version', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='host_info', full_name='acp.cmd.write_host_config.host_info', index=1,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1780,
  serialized_end=1871,
)

_CMD_GET_ACK_HARDWARE_INFO = _descriptor.Descriptor(
  name='get_ack_hardware_info',
  full_name='acp.cmd.get_ack_hardware_info',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1873,
  serialized_end=1896,
)

_CMD_GET_ACK_STATUS = _descriptor.Descriptor(
  name='get_ack_status',
  full_name='acp.cmd.get_ack_status',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1898,
  serialized_end=1914,
)

_CMD_PROVISIONING_GET_PROVISIONING_STATE = _descriptor.Descriptor(
  name='get_provisioning_state',
  full_name='acp.cmd.provisioning.get_provisioning_state',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2087,
  serialized_end=2111,
)

_CMD_PROVISIONING_GET_DEVICE_TYPE = _descriptor.Descriptor(
  name='get_device_type',
  full_name='acp.cmd.provisioning.get_device_type',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2113,
  serialized_end=2130,
)

_CMD_PROVISIONING = _descriptor.Descriptor(
  name='provisioning',
  full_name='acp.cmd.provisioning',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='get_provisioning_state_obj', full_name='acp.cmd.provisioning.get_provisioning_state_obj', index=0,
      number=10, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_device_type_obj', full_name='acp.cmd.provisioning.get_device_type_obj', index=1,
      number=11, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CMD_PROVISIONING_GET_PROVISIONING_STATE, _CMD_PROVISIONING_GET_DEVICE_TYPE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='command', full_name='acp.cmd.provisioning.command',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=1917,
  serialized_end=2141,
)

_CMD = _descriptor.Descriptor(
  name='cmd',
  full_name='acp.cmd',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='get_next_event_obj', full_name='acp.cmd.get_next_event_obj', index=0,
      number=12, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_firmware_version_obj', full_name='acp.cmd.get_firmware_version_obj', index=1,
      number=14, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='trigger_factory_reset_obj', full_name='acp.cmd.trigger_factory_reset_obj', index=2,
      number=15, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='enter_setup_mode_obj', full_name='acp.cmd.enter_setup_mode_obj', index=3,
      number=16, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_ack_hardware_info_obj', full_name='acp.cmd.get_ack_hardware_info_obj', index=4,
      number=22, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_ack_status_obj', full_name='acp.cmd.get_ack_status_obj', index=5,
      number=23, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='read_host_fw_update_bytes_obj', full_name='acp.cmd.read_host_fw_update_bytes_obj', index=6,
      number=13, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='write_host_config_obj', full_name='acp.cmd.write_host_config_obj', index=7,
      number=21, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='write_log_obj', full_name='acp.cmd.write_log_obj', index=8,
      number=51, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='submit_logs_obj', full_name='acp.cmd.submit_logs_obj', index=9,
      number=53, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='record_dem_metric_obj', full_name='acp.cmd.record_dem_metric_obj', index=10,
      number=64, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='send_alexa_event_obj', full_name='acp.cmd.send_alexa_event_obj', index=11,
      number=81, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='provisioning_obj', full_name='acp.cmd.provisioning_obj', index=12,
      number=92, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_CMD_SEND_ALEXA_EVENT, _CMD_GET_NEXT_EVENT, _CMD_READ_HOST_FW_UPDATE_BYTES, _CMD_GET_FIRMWARE_VERSION, _CMD_TRIGGER_FACTORY_RESET, _CMD_ENTER_SETUP_MODE, _CMD_WRITE_LOG, _CMD_SUBMIT_LOGS, _CMD_RECORD_DEM_METRIC, _CMD_WRITE_HOST_CONFIG, _CMD_GET_ACK_HARDWARE_INFO, _CMD_GET_ACK_STATUS, _CMD_PROVISIONING, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='acp.cmd.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=311,
  serialized_end=2149,
)


_RESPONSE_GENERIC = _descriptor.Descriptor(
  name='generic',
  full_name='acp.response.generic',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='acp.response.generic.code', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='description', full_name='acp.response.generic.description', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _RESPONSE_GENERIC_ERROR,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2955,
  serialized_end=3574,
)

_RESPONSE_READ_HOST_FW_UPDATE_BYTES = _descriptor.Descriptor(
  name='read_host_fw_update_bytes',
  full_name='acp.response.read_host_fw_update_bytes',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bytes', full_name='acp.response.read_host_fw_update_bytes.bytes', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3576,
  serialized_end=3618,
)

_RESPONSE_GET_FIRMWARE_VERSION = _descriptor.Descriptor(
  name='get_firmware_version',
  full_name='acp.response.get_firmware_version',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='protocol_number', full_name='acp.response.get_firmware_version.protocol_number', index=0,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='build_number', full_name='acp.response.get_firmware_version.build_number', index=1,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='incremental_version', full_name='acp.response.get_firmware_version.incremental_version', index=2,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3620,
  serialized_end=3718,
)

_RESPONSE_GET_ACK_HARDWARE_INFO = _descriptor.Descriptor(
  name='get_ack_hardware_info',
  full_name='acp.response.get_ack_hardware_info',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dsn', full_name='acp.response.get_ack_hardware_info.dsn', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3720,
  serialized_end=3756,
)

_RESPONSE_GET_ACK_STATUS = _descriptor.Descriptor(
  name='get_ack_status',
  full_name='acp.response.get_ack_status',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='current_time', full_name='acp.response.get_ack_status.current_time', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='wifi_mode', full_name='acp.response.get_ack_status.wifi_mode', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='setup_mode', full_name='acp.response.get_ack_status.setup_mode', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error_code', full_name='acp.response.get_ack_status.error_code', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='setup_types', full_name='acp.response.get_ack_status.setup_types', index=4,
      number=5, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='setup_stage', full_name='acp.response.get_ack_status.setup_stage', index=5,
      number=6, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='epoch_seconds', full_name='acp.response.get_ack_status.epoch_seconds', index=6,
      number=7, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=3759,
  serialized_end=3994,
)

_RESPONSE_PROVISIONING_PROVISIONING_INFO = _descriptor.Descriptor(
  name='provisioning_info',
  full_name='acp.response.provisioning.provisioning_info',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='state', full_name='acp.response.provisioning.provisioning_info.state', index=0,
      number=10, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4159,
  serialized_end=4240,
)

_RESPONSE_PROVISIONING_DEVICE_TYPE = _descriptor.Descriptor(
  name='device_type',
  full_name='acp.response.provisioning.device_type',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='device_type', full_name='acp.response.provisioning.device_type.device_type', index=0,
      number=11, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4242,
  serialized_end=4276,
)

_RESPONSE_PROVISIONING = _descriptor.Descriptor(
  name='provisioning',
  full_name='acp.response.provisioning',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='provisioning_info_obj', full_name='acp.response.provisioning.provisioning_info_obj', index=0,
      number=100, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='device_type_obj', full_name='acp.response.provisioning.device_type_obj', index=1,
      number=101, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_RESPONSE_PROVISIONING_PROVISIONING_INFO, _RESPONSE_PROVISIONING_DEVICE_TYPE, ],
  enum_types=[
    _RESPONSE_PROVISIONING_PROVISIONING_STATE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='response', full_name='acp.response.provisioning.response',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=3997,
  serialized_end=4351,
)

_RESPONSE = _descriptor.Descriptor(
  name='response',
  full_name='acp.response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='generic_obj', full_name='acp.response.generic_obj', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_firmware_version_obj', full_name='acp.response.get_firmware_version_obj', index=1,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='read_host_fw_update_bytes_obj', full_name='acp.response.read_host_fw_update_bytes_obj', index=2,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_ack_hardware_info_obj', full_name='acp.response.get_ack_hardware_info_obj', index=3,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='get_ack_status_obj', full_name='acp.response.get_ack_status_obj', index=4,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='reboot_requested_obj', full_name='acp.response.reboot_requested_obj', index=5,
      number=41, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='host_fw_update_received_obj', full_name='acp.response.host_fw_update_received_obj', index=6,
      number=42, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='log_level_changed_obj', full_name='acp.response.log_level_changed_obj', index=7,
      number=43, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ack_booted_obj', full_name='acp.response.ack_booted_obj', index=8,
      number=45, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='factory_reset_requested_obj', full_name='acp.response.factory_reset_requested_obj', index=9,
      number=47, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='alexa_directive_received_obj', full_name='acp.response.alexa_directive_received_obj', index=10,
      number=61, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='provisioning_obj', full_name='acp.response.provisioning_obj', index=11,
      number=92, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_RESPONSE_GENERIC, _RESPONSE_READ_HOST_FW_UPDATE_BYTES, _RESPONSE_GET_FIRMWARE_VERSION, _RESPONSE_GET_ACK_HARDWARE_INFO, _RESPONSE_GET_ACK_STATUS, _RESPONSE_PROVISIONING, ],
  enum_types=[
    _RESPONSE_ERROR_CODES,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='acp.response.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=2152,
  serialized_end=4434,
)


_EVENT_REBOOT_REQUESTED = _descriptor.Descriptor(
  name='reboot_requested',
  full_name='acp.event.reboot_requested',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='force', full_name='acp.event.reboot_requested.force', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4446,
  serialized_end=4479,
)

_EVENT_HOST_FW_UPDATE_RECEIVED = _descriptor.Descriptor(
  name='host_fw_update_received',
  full_name='acp.event.host_fw_update_received',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='version', full_name='acp.event.host_fw_update_received.version', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='size', full_name='acp.event.host_fw_update_received.size', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='signature', full_name='acp.event.host_fw_update_received.signature', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='force', full_name='acp.event.host_fw_update_received.force', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4481,
  serialized_end=4571,
)

_EVENT_ALEXA_DIRECTIVE_RECEIVED = _descriptor.Descriptor(
  name='alexa_directive_received',
  full_name='acp.event.alexa_directive_received',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='directive', full_name='acp.event.alexa_directive_received.directive', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4573,
  serialized_end=4639,
)

_EVENT_LOG_LEVEL_CHANGED = _descriptor.Descriptor(
  name='log_level_changed',
  full_name='acp.event.log_level_changed',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='log_level', full_name='acp.event.log_level_changed.log_level', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4641,
  serialized_end=4695,
)

_EVENT_ACK_BOOTED = _descriptor.Descriptor(
  name='ack_booted',
  full_name='acp.event.ack_booted',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4697,
  serialized_end=4709,
)

_EVENT_FACTORY_RESET_REQUESTED = _descriptor.Descriptor(
  name='factory_reset_requested',
  full_name='acp.event.factory_reset_requested',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4711,
  serialized_end=4736,
)

_EVENT = _descriptor.Descriptor(
  name='event',
  full_name='acp.event',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[_EVENT_REBOOT_REQUESTED, _EVENT_HOST_FW_UPDATE_RECEIVED, _EVENT_ALEXA_DIRECTIVE_RECEIVED, _EVENT_LOG_LEVEL_CHANGED, _EVENT_ACK_BOOTED, _EVENT_FACTORY_RESET_REQUESTED, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=4437,
  serialized_end=4736,
)

_METRIC_DATAPOINT.fields_by_name['data_type'].enum_type = _METRIC_DATAPOINT_TYPE
_METRIC_DATAPOINT_TYPE.containing_type = _METRIC_DATAPOINT
_CMD_SEND_ALEXA_EVENT.fields_by_name['event'].message_type = v3avs__capabilities_dot_V3AVS__pb2._V3AVS_AVSEVENT
_CMD_SEND_ALEXA_EVENT.containing_type = _CMD
_CMD_GET_NEXT_EVENT.containing_type = _CMD
_CMD_READ_HOST_FW_UPDATE_BYTES.containing_type = _CMD
_CMD_GET_FIRMWARE_VERSION.containing_type = _CMD
_CMD_TRIGGER_FACTORY_RESET.containing_type = _CMD
_CMD_ENTER_SETUP_MODE.fields_by_name['mode'].enum_type = _CMD_ENTER_SETUP_MODE_REGISTRATION_TYPE
_CMD_ENTER_SETUP_MODE.fields_by_name['security'].enum_type = _CMD_ENTER_SETUP_MODE_SECURITY_TYPE
_CMD_ENTER_SETUP_MODE.containing_type = _CMD
_CMD_ENTER_SETUP_MODE_REGISTRATION_TYPE.containing_type = _CMD_ENTER_SETUP_MODE
_CMD_ENTER_SETUP_MODE_SECURITY_TYPE.containing_type = _CMD_ENTER_SETUP_MODE
_CMD_WRITE_LOG.fields_by_name['log_level'].enum_type = _LOG_LEVEL
_CMD_WRITE_LOG.containing_type = _CMD
_CMD_SUBMIT_LOGS.containing_type = _CMD
_CMD_RECORD_DEM_METRIC.fields_by_name['metric_type'].enum_type = _CMD_RECORD_DEM_METRIC_TYPE
_CMD_RECORD_DEM_METRIC.fields_by_name['datapoints'].message_type = _METRIC_DATAPOINT
_CMD_RECORD_DEM_METRIC.containing_type = _CMD
_CMD_RECORD_DEM_METRIC_TYPE.containing_type = _CMD_RECORD_DEM_METRIC
_CMD_WRITE_HOST_CONFIG.fields_by_name['host_info'].message_type = _PROPERTY
_CMD_WRITE_HOST_CONFIG.containing_type = _CMD
_CMD_GET_ACK_HARDWARE_INFO.containing_type = _CMD
_CMD_GET_ACK_STATUS.containing_type = _CMD
_CMD_PROVISIONING_GET_PROVISIONING_STATE.containing_type = _CMD_PROVISIONING
_CMD_PROVISIONING_GET_DEVICE_TYPE.containing_type = _CMD_PROVISIONING
_CMD_PROVISIONING.fields_by_name['get_provisioning_state_obj'].message_type = _CMD_PROVISIONING_GET_PROVISIONING_STATE
_CMD_PROVISIONING.fields_by_name['get_device_type_obj'].message_type = _CMD_PROVISIONING_GET_DEVICE_TYPE
_CMD_PROVISIONING.containing_type = _CMD
_CMD_PROVISIONING.oneofs_by_name['command'].fields.append(
  _CMD_PROVISIONING.fields_by_name['get_provisioning_state_obj'])
_CMD_PROVISIONING.fields_by_name['get_provisioning_state_obj'].containing_oneof = _CMD_PROVISIONING.oneofs_by_name['command']
_CMD_PROVISIONING.oneofs_by_name['command'].fields.append(
  _CMD_PROVISIONING.fields_by_name['get_device_type_obj'])
_CMD_PROVISIONING.fields_by_name['get_device_type_obj'].containing_oneof = _CMD_PROVISIONING.oneofs_by_name['command']
_CMD.fields_by_name['get_next_event_obj'].message_type = _CMD_GET_NEXT_EVENT
_CMD.fields_by_name['get_firmware_version_obj'].message_type = _CMD_GET_FIRMWARE_VERSION
_CMD.fields_by_name['trigger_factory_reset_obj'].message_type = _CMD_TRIGGER_FACTORY_RESET
_CMD.fields_by_name['enter_setup_mode_obj'].message_type = _CMD_ENTER_SETUP_MODE
_CMD.fields_by_name['get_ack_hardware_info_obj'].message_type = _CMD_GET_ACK_HARDWARE_INFO
_CMD.fields_by_name['get_ack_status_obj'].message_type = _CMD_GET_ACK_STATUS
_CMD.fields_by_name['read_host_fw_update_bytes_obj'].message_type = _CMD_READ_HOST_FW_UPDATE_BYTES
_CMD.fields_by_name['write_host_config_obj'].message_type = _CMD_WRITE_HOST_CONFIG
_CMD.fields_by_name['write_log_obj'].message_type = _CMD_WRITE_LOG
_CMD.fields_by_name['submit_logs_obj'].message_type = _CMD_SUBMIT_LOGS
_CMD.fields_by_name['record_dem_metric_obj'].message_type = _CMD_RECORD_DEM_METRIC
_CMD.fields_by_name['send_alexa_event_obj'].message_type = _CMD_SEND_ALEXA_EVENT
_CMD.fields_by_name['provisioning_obj'].message_type = _CMD_PROVISIONING
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['get_next_event_obj'])
_CMD.fields_by_name['get_next_event_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['get_firmware_version_obj'])
_CMD.fields_by_name['get_firmware_version_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['trigger_factory_reset_obj'])
_CMD.fields_by_name['trigger_factory_reset_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['enter_setup_mode_obj'])
_CMD.fields_by_name['enter_setup_mode_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['get_ack_hardware_info_obj'])
_CMD.fields_by_name['get_ack_hardware_info_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['get_ack_status_obj'])
_CMD.fields_by_name['get_ack_status_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['read_host_fw_update_bytes_obj'])
_CMD.fields_by_name['read_host_fw_update_bytes_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['write_host_config_obj'])
_CMD.fields_by_name['write_host_config_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['write_log_obj'])
_CMD.fields_by_name['write_log_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['submit_logs_obj'])
_CMD.fields_by_name['submit_logs_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['record_dem_metric_obj'])
_CMD.fields_by_name['record_dem_metric_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['send_alexa_event_obj'])
_CMD.fields_by_name['send_alexa_event_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_CMD.oneofs_by_name['type'].fields.append(
  _CMD.fields_by_name['provisioning_obj'])
_CMD.fields_by_name['provisioning_obj'].containing_oneof = _CMD.oneofs_by_name['type']
_RESPONSE_GENERIC.fields_by_name['code'].enum_type = _RESPONSE_GENERIC_ERROR
_RESPONSE_GENERIC.containing_type = _RESPONSE
_RESPONSE_GENERIC_ERROR.containing_type = _RESPONSE_GENERIC
_RESPONSE_READ_HOST_FW_UPDATE_BYTES.containing_type = _RESPONSE
_RESPONSE_GET_FIRMWARE_VERSION.containing_type = _RESPONSE
_RESPONSE_GET_ACK_HARDWARE_INFO.containing_type = _RESPONSE
_RESPONSE_GET_ACK_STATUS.fields_by_name['current_time'].message_type = _TIME
_RESPONSE_GET_ACK_STATUS.fields_by_name['wifi_mode'].enum_type = _WIFI_MODE
_RESPONSE_GET_ACK_STATUS.fields_by_name['error_code'].enum_type = _RESPONSE_ERROR_CODES
_RESPONSE_GET_ACK_STATUS.fields_by_name['setup_stage'].enum_type = _SETUP_STAGES
_RESPONSE_GET_ACK_STATUS.containing_type = _RESPONSE
_RESPONSE_PROVISIONING_PROVISIONING_INFO.fields_by_name['state'].enum_type = _RESPONSE_PROVISIONING_PROVISIONING_STATE
_RESPONSE_PROVISIONING_PROVISIONING_INFO.containing_type = _RESPONSE_PROVISIONING
_RESPONSE_PROVISIONING_DEVICE_TYPE.containing_type = _RESPONSE_PROVISIONING
_RESPONSE_PROVISIONING.fields_by_name['provisioning_info_obj'].message_type = _RESPONSE_PROVISIONING_PROVISIONING_INFO
_RESPONSE_PROVISIONING.fields_by_name['device_type_obj'].message_type = _RESPONSE_PROVISIONING_DEVICE_TYPE
_RESPONSE_PROVISIONING.containing_type = _RESPONSE
_RESPONSE_PROVISIONING_PROVISIONING_STATE.containing_type = _RESPONSE_PROVISIONING
_RESPONSE_PROVISIONING.oneofs_by_name['response'].fields.append(
  _RESPONSE_PROVISIONING.fields_by_name['provisioning_info_obj'])
_RESPONSE_PROVISIONING.fields_by_name['provisioning_info_obj'].containing_oneof = _RESPONSE_PROVISIONING.oneofs_by_name['response']
_RESPONSE_PROVISIONING.oneofs_by_name['response'].fields.append(
  _RESPONSE_PROVISIONING.fields_by_name['device_type_obj'])
_RESPONSE_PROVISIONING.fields_by_name['device_type_obj'].containing_oneof = _RESPONSE_PROVISIONING.oneofs_by_name['response']
_RESPONSE.fields_by_name['generic_obj'].message_type = _RESPONSE_GENERIC
_RESPONSE.fields_by_name['get_firmware_version_obj'].message_type = _RESPONSE_GET_FIRMWARE_VERSION
_RESPONSE.fields_by_name['read_host_fw_update_bytes_obj'].message_type = _RESPONSE_READ_HOST_FW_UPDATE_BYTES
_RESPONSE.fields_by_name['get_ack_hardware_info_obj'].message_type = _RESPONSE_GET_ACK_HARDWARE_INFO
_RESPONSE.fields_by_name['get_ack_status_obj'].message_type = _RESPONSE_GET_ACK_STATUS
_RESPONSE.fields_by_name['reboot_requested_obj'].message_type = _EVENT_REBOOT_REQUESTED
_RESPONSE.fields_by_name['host_fw_update_received_obj'].message_type = _EVENT_HOST_FW_UPDATE_RECEIVED
_RESPONSE.fields_by_name['log_level_changed_obj'].message_type = _EVENT_LOG_LEVEL_CHANGED
_RESPONSE.fields_by_name['ack_booted_obj'].message_type = _EVENT_ACK_BOOTED
_RESPONSE.fields_by_name['factory_reset_requested_obj'].message_type = _EVENT_FACTORY_RESET_REQUESTED
_RESPONSE.fields_by_name['alexa_directive_received_obj'].message_type = _EVENT_ALEXA_DIRECTIVE_RECEIVED
_RESPONSE.fields_by_name['provisioning_obj'].message_type = _RESPONSE_PROVISIONING
_RESPONSE_ERROR_CODES.containing_type = _RESPONSE
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['generic_obj'])
_RESPONSE.fields_by_name['generic_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['get_firmware_version_obj'])
_RESPONSE.fields_by_name['get_firmware_version_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['read_host_fw_update_bytes_obj'])
_RESPONSE.fields_by_name['read_host_fw_update_bytes_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['get_ack_hardware_info_obj'])
_RESPONSE.fields_by_name['get_ack_hardware_info_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['get_ack_status_obj'])
_RESPONSE.fields_by_name['get_ack_status_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['reboot_requested_obj'])
_RESPONSE.fields_by_name['reboot_requested_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['host_fw_update_received_obj'])
_RESPONSE.fields_by_name['host_fw_update_received_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['log_level_changed_obj'])
_RESPONSE.fields_by_name['log_level_changed_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['ack_booted_obj'])
_RESPONSE.fields_by_name['ack_booted_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['factory_reset_requested_obj'])
_RESPONSE.fields_by_name['factory_reset_requested_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['alexa_directive_received_obj'])
_RESPONSE.fields_by_name['alexa_directive_received_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_RESPONSE.oneofs_by_name['type'].fields.append(
  _RESPONSE.fields_by_name['provisioning_obj'])
_RESPONSE.fields_by_name['provisioning_obj'].containing_oneof = _RESPONSE.oneofs_by_name['type']
_EVENT_REBOOT_REQUESTED.containing_type = _EVENT
_EVENT_HOST_FW_UPDATE_RECEIVED.containing_type = _EVENT
_EVENT_ALEXA_DIRECTIVE_RECEIVED.fields_by_name['directive'].message_type = v3avs__capabilities_dot_V3AVS__pb2._V3AVS_AVSDIRECTIVE
_EVENT_ALEXA_DIRECTIVE_RECEIVED.containing_type = _EVENT
_EVENT_LOG_LEVEL_CHANGED.fields_by_name['log_level'].enum_type = _LOG_LEVEL
_EVENT_LOG_LEVEL_CHANGED.containing_type = _EVENT
_EVENT_ACK_BOOTED.containing_type = _EVENT
_EVENT_FACTORY_RESET_REQUESTED.containing_type = _EVENT
DESCRIPTOR.message_types_by_name['metric_datapoint'] = _METRIC_DATAPOINT
DESCRIPTOR.message_types_by_name['time'] = _TIME
DESCRIPTOR.message_types_by_name['property'] = _PROPERTY
DESCRIPTOR.message_types_by_name['cmd'] = _CMD
DESCRIPTOR.message_types_by_name['response'] = _RESPONSE
DESCRIPTOR.message_types_by_name['event'] = _EVENT
DESCRIPTOR.enum_types_by_name['protobuf_version'] = _PROTOBUF_VERSION
DESCRIPTOR.enum_types_by_name['log_level'] = _LOG_LEVEL
DESCRIPTOR.enum_types_by_name['wifi_mode'] = _WIFI_MODE
DESCRIPTOR.enum_types_by_name['setup_stages'] = _SETUP_STAGES
DESCRIPTOR.enum_types_by_name['setup_types'] = _SETUP_TYPES

metric_datapoint = _reflection.GeneratedProtocolMessageType('metric_datapoint', (_message.Message,), dict(
  DESCRIPTOR = _METRIC_DATAPOINT,
  __module__ = 'acp_pb2'
  # @@protoc_insertion_point(class_scope:acp.metric_datapoint)
  ))
_sym_db.RegisterMessage(metric_datapoint)

time = _reflection.GeneratedProtocolMessageType('time', (_message.Message,), dict(
  DESCRIPTOR = _TIME,
  __module__ = 'acp_pb2'
  # @@protoc_insertion_point(class_scope:acp.time)
  ))
_sym_db.RegisterMessage(time)

property = _reflection.GeneratedProtocolMessageType('property', (_message.Message,), dict(
  DESCRIPTOR = _PROPERTY,
  __module__ = 'acp_pb2'
  # @@protoc_insertion_point(class_scope:acp.property)
  ))
_sym_db.RegisterMessage(property)

cmd = _reflection.GeneratedProtocolMessageType('cmd', (_message.Message,), dict(

  send_alexa_event = _reflection.GeneratedProtocolMessageType('send_alexa_event', (_message.Message,), dict(
    DESCRIPTOR = _CMD_SEND_ALEXA_EVENT,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.send_alexa_event)
    ))
  ,

  get_next_event = _reflection.GeneratedProtocolMessageType('get_next_event', (_message.Message,), dict(
    DESCRIPTOR = _CMD_GET_NEXT_EVENT,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.get_next_event)
    ))
  ,

  read_host_fw_update_bytes = _reflection.GeneratedProtocolMessageType('read_host_fw_update_bytes', (_message.Message,), dict(
    DESCRIPTOR = _CMD_READ_HOST_FW_UPDATE_BYTES,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.read_host_fw_update_bytes)
    ))
  ,

  get_firmware_version = _reflection.GeneratedProtocolMessageType('get_firmware_version', (_message.Message,), dict(
    DESCRIPTOR = _CMD_GET_FIRMWARE_VERSION,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.get_firmware_version)
    ))
  ,

  trigger_factory_reset = _reflection.GeneratedProtocolMessageType('trigger_factory_reset', (_message.Message,), dict(
    DESCRIPTOR = _CMD_TRIGGER_FACTORY_RESET,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.trigger_factory_reset)
    ))
  ,

  enter_setup_mode = _reflection.GeneratedProtocolMessageType('enter_setup_mode', (_message.Message,), dict(
    DESCRIPTOR = _CMD_ENTER_SETUP_MODE,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.enter_setup_mode)
    ))
  ,

  write_log = _reflection.GeneratedProtocolMessageType('write_log', (_message.Message,), dict(
    DESCRIPTOR = _CMD_WRITE_LOG,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.write_log)
    ))
  ,

  submit_logs = _reflection.GeneratedProtocolMessageType('submit_logs', (_message.Message,), dict(
    DESCRIPTOR = _CMD_SUBMIT_LOGS,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.submit_logs)
    ))
  ,

  record_dem_metric = _reflection.GeneratedProtocolMessageType('record_dem_metric', (_message.Message,), dict(
    DESCRIPTOR = _CMD_RECORD_DEM_METRIC,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.record_dem_metric)
    ))
  ,

  write_host_config = _reflection.GeneratedProtocolMessageType('write_host_config', (_message.Message,), dict(
    DESCRIPTOR = _CMD_WRITE_HOST_CONFIG,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.write_host_config)
    ))
  ,

  get_ack_hardware_info = _reflection.GeneratedProtocolMessageType('get_ack_hardware_info', (_message.Message,), dict(
    DESCRIPTOR = _CMD_GET_ACK_HARDWARE_INFO,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.get_ack_hardware_info)
    ))
  ,

  get_ack_status = _reflection.GeneratedProtocolMessageType('get_ack_status', (_message.Message,), dict(
    DESCRIPTOR = _CMD_GET_ACK_STATUS,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.get_ack_status)
    ))
  ,

  provisioning = _reflection.GeneratedProtocolMessageType('provisioning', (_message.Message,), dict(

    get_provisioning_state = _reflection.GeneratedProtocolMessageType('get_provisioning_state', (_message.Message,), dict(
      DESCRIPTOR = _CMD_PROVISIONING_GET_PROVISIONING_STATE,
      __module__ = 'acp_pb2'
      # @@protoc_insertion_point(class_scope:acp.cmd.provisioning.get_provisioning_state)
      ))
    ,

    get_device_type = _reflection.GeneratedProtocolMessageType('get_device_type', (_message.Message,), dict(
      DESCRIPTOR = _CMD_PROVISIONING_GET_DEVICE_TYPE,
      __module__ = 'acp_pb2'
      # @@protoc_insertion_point(class_scope:acp.cmd.provisioning.get_device_type)
      ))
    ,
    DESCRIPTOR = _CMD_PROVISIONING,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.cmd.provisioning)
    ))
  ,
  DESCRIPTOR = _CMD,
  __module__ = 'acp_pb2'
  # @@protoc_insertion_point(class_scope:acp.cmd)
  ))
_sym_db.RegisterMessage(cmd)
_sym_db.RegisterMessage(cmd.send_alexa_event)
_sym_db.RegisterMessage(cmd.get_next_event)
_sym_db.RegisterMessage(cmd.read_host_fw_update_bytes)
_sym_db.RegisterMessage(cmd.get_firmware_version)
_sym_db.RegisterMessage(cmd.trigger_factory_reset)
_sym_db.RegisterMessage(cmd.enter_setup_mode)
_sym_db.RegisterMessage(cmd.write_log)
_sym_db.RegisterMessage(cmd.submit_logs)
_sym_db.RegisterMessage(cmd.record_dem_metric)
_sym_db.RegisterMessage(cmd.write_host_config)
_sym_db.RegisterMessage(cmd.get_ack_hardware_info)
_sym_db.RegisterMessage(cmd.get_ack_status)
_sym_db.RegisterMessage(cmd.provisioning)
_sym_db.RegisterMessage(cmd.provisioning.get_provisioning_state)
_sym_db.RegisterMessage(cmd.provisioning.get_device_type)

response = _reflection.GeneratedProtocolMessageType('response', (_message.Message,), dict(

  generic = _reflection.GeneratedProtocolMessageType('generic', (_message.Message,), dict(
    DESCRIPTOR = _RESPONSE_GENERIC,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.response.generic)
    ))
  ,

  read_host_fw_update_bytes = _reflection.GeneratedProtocolMessageType('read_host_fw_update_bytes', (_message.Message,), dict(
    DESCRIPTOR = _RESPONSE_READ_HOST_FW_UPDATE_BYTES,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.response.read_host_fw_update_bytes)
    ))
  ,

  get_firmware_version = _reflection.GeneratedProtocolMessageType('get_firmware_version', (_message.Message,), dict(
    DESCRIPTOR = _RESPONSE_GET_FIRMWARE_VERSION,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.response.get_firmware_version)
    ))
  ,

  get_ack_hardware_info = _reflection.GeneratedProtocolMessageType('get_ack_hardware_info', (_message.Message,), dict(
    DESCRIPTOR = _RESPONSE_GET_ACK_HARDWARE_INFO,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.response.get_ack_hardware_info)
    ))
  ,

  get_ack_status = _reflection.GeneratedProtocolMessageType('get_ack_status', (_message.Message,), dict(
    DESCRIPTOR = _RESPONSE_GET_ACK_STATUS,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.response.get_ack_status)
    ))
  ,

  provisioning = _reflection.GeneratedProtocolMessageType('provisioning', (_message.Message,), dict(

    provisioning_info = _reflection.GeneratedProtocolMessageType('provisioning_info', (_message.Message,), dict(
      DESCRIPTOR = _RESPONSE_PROVISIONING_PROVISIONING_INFO,
      __module__ = 'acp_pb2'
      # @@protoc_insertion_point(class_scope:acp.response.provisioning.provisioning_info)
      ))
    ,

    device_type = _reflection.GeneratedProtocolMessageType('device_type', (_message.Message,), dict(
      DESCRIPTOR = _RESPONSE_PROVISIONING_DEVICE_TYPE,
      __module__ = 'acp_pb2'
      # @@protoc_insertion_point(class_scope:acp.response.provisioning.device_type)
      ))
    ,
    DESCRIPTOR = _RESPONSE_PROVISIONING,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.response.provisioning)
    ))
  ,
  DESCRIPTOR = _RESPONSE,
  __module__ = 'acp_pb2'
  # @@protoc_insertion_point(class_scope:acp.response)
  ))
_sym_db.RegisterMessage(response)
_sym_db.RegisterMessage(response.generic)
_sym_db.RegisterMessage(response.read_host_fw_update_bytes)
_sym_db.RegisterMessage(response.get_firmware_version)
_sym_db.RegisterMessage(response.get_ack_hardware_info)
_sym_db.RegisterMessage(response.get_ack_status)
_sym_db.RegisterMessage(response.provisioning)
_sym_db.RegisterMessage(response.provisioning.provisioning_info)
_sym_db.RegisterMessage(response.provisioning.device_type)

event = _reflection.GeneratedProtocolMessageType('event', (_message.Message,), dict(

  reboot_requested = _reflection.GeneratedProtocolMessageType('reboot_requested', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_REBOOT_REQUESTED,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.event.reboot_requested)
    ))
  ,

  host_fw_update_received = _reflection.GeneratedProtocolMessageType('host_fw_update_received', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_HOST_FW_UPDATE_RECEIVED,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.event.host_fw_update_received)
    ))
  ,

  alexa_directive_received = _reflection.GeneratedProtocolMessageType('alexa_directive_received', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_ALEXA_DIRECTIVE_RECEIVED,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.event.alexa_directive_received)
    ))
  ,

  log_level_changed = _reflection.GeneratedProtocolMessageType('log_level_changed', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_LOG_LEVEL_CHANGED,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.event.log_level_changed)
    ))
  ,

  ack_booted = _reflection.GeneratedProtocolMessageType('ack_booted', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_ACK_BOOTED,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.event.ack_booted)
    ))
  ,

  factory_reset_requested = _reflection.GeneratedProtocolMessageType('factory_reset_requested', (_message.Message,), dict(
    DESCRIPTOR = _EVENT_FACTORY_RESET_REQUESTED,
    __module__ = 'acp_pb2'
    # @@protoc_insertion_point(class_scope:acp.event.factory_reset_requested)
    ))
  ,
  DESCRIPTOR = _EVENT,
  __module__ = 'acp_pb2'
  # @@protoc_insertion_point(class_scope:acp.event)
  ))
_sym_db.RegisterMessage(event)
_sym_db.RegisterMessage(event.reboot_requested)
_sym_db.RegisterMessage(event.host_fw_update_received)
_sym_db.RegisterMessage(event.alexa_directive_received)
_sym_db.RegisterMessage(event.log_level_changed)
_sym_db.RegisterMessage(event.ack_booted)
_sym_db.RegisterMessage(event.factory_reset_requested)


# @@protoc_insertion_point(module_scope)
