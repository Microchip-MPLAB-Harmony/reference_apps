/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Thu Aug 15 14:04:23 2019. */

#ifndef PB_ACP_ACP_PB_H_INCLUDED
#define PB_ACP_ACP_PB_H_INCLUDED
#include <pb.h>

#include "v3avs_capabilities/V3AVS.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _acp_protobuf_version {
    acp_protobuf_version_dummy = 0,
    acp_protobuf_version_num = 2
} acp_protobuf_version;
#define _acp_protobuf_version_MIN acp_protobuf_version_dummy
#define _acp_protobuf_version_MAX acp_protobuf_version_num
#define _acp_protobuf_version_ARRAYSIZE ((acp_protobuf_version)(acp_protobuf_version_num+1))

typedef enum _acp_log_level {
    acp_log_level_debug = 0,
    acp_log_level_info = 1,
    acp_log_level_error = 3
} acp_log_level;
#define _acp_log_level_MIN acp_log_level_debug
#define _acp_log_level_MAX acp_log_level_error
#define _acp_log_level_ARRAYSIZE ((acp_log_level)(acp_log_level_error+1))

typedef enum _acp_wifi_mode {
    acp_wifi_mode_connected = 0,
    acp_wifi_mode_disconnected = 1
} acp_wifi_mode;
#define _acp_wifi_mode_MIN acp_wifi_mode_connected
#define _acp_wifi_mode_MAX acp_wifi_mode_disconnected
#define _acp_wifi_mode_ARRAYSIZE ((acp_wifi_mode)(acp_wifi_mode_disconnected+1))

typedef enum _acp_setup_stages {
    acp_setup_stages_none = 0,
    acp_setup_stages_discoverable = 1,
    acp_setup_stages_setup_in_progress = 2,
    acp_setup_stages_registered = 3,
    acp_setup_stages_timeout = 4
} acp_setup_stages;
#define _acp_setup_stages_MIN acp_setup_stages_none
#define _acp_setup_stages_MAX acp_setup_stages_timeout
#define _acp_setup_stages_ARRAYSIZE ((acp_setup_stages)(acp_setup_stages_timeout+1))

typedef enum _acp_setup_types {
    acp_setup_types_notrunning = 0,
    acp_setup_types_ugs = 1,
    acp_setup_types_bcs = 2,
    acp_setup_types_zts = 4
} acp_setup_types;
#define _acp_setup_types_MIN acp_setup_types_notrunning
#define _acp_setup_types_MAX acp_setup_types_zts
#define _acp_setup_types_ARRAYSIZE ((acp_setup_types)(acp_setup_types_zts+1))

typedef enum _acp_metric_datapoint_Type {
    acp_metric_datapoint_Type_COUNTER = 0,
    acp_metric_datapoint_Type_DISCRETE = 2,
    acp_metric_datapoint_Type_GAUGE = 4
} acp_metric_datapoint_Type;
#define _acp_metric_datapoint_Type_MIN acp_metric_datapoint_Type_COUNTER
#define _acp_metric_datapoint_Type_MAX acp_metric_datapoint_Type_GAUGE
#define _acp_metric_datapoint_Type_ARRAYSIZE ((acp_metric_datapoint_Type)(acp_metric_datapoint_Type_GAUGE+1))

typedef enum _acp_cmd_enter_setup_mode_registration_type {
    acp_cmd_enter_setup_mode_registration_type_unknown = 0,
    acp_cmd_enter_setup_mode_registration_type_ffs = 1
} acp_cmd_enter_setup_mode_registration_type;
#define _acp_cmd_enter_setup_mode_registration_type_MIN acp_cmd_enter_setup_mode_registration_type_unknown
#define _acp_cmd_enter_setup_mode_registration_type_MAX acp_cmd_enter_setup_mode_registration_type_ffs
#define _acp_cmd_enter_setup_mode_registration_type_ARRAYSIZE ((acp_cmd_enter_setup_mode_registration_type)(acp_cmd_enter_setup_mode_registration_type_ffs+1))

typedef enum _acp_cmd_enter_setup_mode_security_type {
    acp_cmd_enter_setup_mode_security_type_secure = 0,
    acp_cmd_enter_setup_mode_security_type_insecure = 1
} acp_cmd_enter_setup_mode_security_type;
#define _acp_cmd_enter_setup_mode_security_type_MIN acp_cmd_enter_setup_mode_security_type_secure
#define _acp_cmd_enter_setup_mode_security_type_MAX acp_cmd_enter_setup_mode_security_type_insecure
#define _acp_cmd_enter_setup_mode_security_type_ARRAYSIZE ((acp_cmd_enter_setup_mode_security_type)(acp_cmd_enter_setup_mode_security_type_insecure+1))

typedef enum _acp_cmd_record_dem_metric_Type {
    acp_cmd_record_dem_metric_Type_USER_PRESENT = 0,
    acp_cmd_record_dem_metric_Type_USAGE_REPORT = 1,
    acp_cmd_record_dem_metric_Type_DEVICE_ERROR = 2
} acp_cmd_record_dem_metric_Type;
#define _acp_cmd_record_dem_metric_Type_MIN acp_cmd_record_dem_metric_Type_USER_PRESENT
#define _acp_cmd_record_dem_metric_Type_MAX acp_cmd_record_dem_metric_Type_DEVICE_ERROR
#define _acp_cmd_record_dem_metric_Type_ARRAYSIZE ((acp_cmd_record_dem_metric_Type)(acp_cmd_record_dem_metric_Type_DEVICE_ERROR+1))

typedef enum _acp_response_error_codes {
    acp_response_error_codes_no_error = 0,
    acp_response_error_codes_device_registration = 1,
    acp_response_error_codes_log_upload_fail = 2
} acp_response_error_codes;
#define _acp_response_error_codes_MIN acp_response_error_codes_no_error
#define _acp_response_error_codes_MAX acp_response_error_codes_log_upload_fail
#define _acp_response_error_codes_ARRAYSIZE ((acp_response_error_codes)(acp_response_error_codes_log_upload_fail+1))

typedef enum _acp_response_generic_error {
    acp_response_generic_error_no_error = 0,
    acp_response_generic_error_other = 1,
    acp_response_generic_error_unknown_command = 2,
    acp_response_generic_error_no_pending_event = 3,
    acp_response_generic_error_setup_mode_error = 4,
    acp_response_generic_error_iot_not_connected = 20,
    acp_response_generic_error_iot_not_subscribed_to_topic = 21,
    acp_response_generic_error_iot_already_subscribed_to_topic = 22,
    acp_response_generic_error_iot_max_subscriptions_exceeded = 23,
    acp_response_generic_error_iot_internal_error = 24,
    acp_response_generic_error_fw_update_session_invalid = 40,
    acp_response_generic_error_fw_update_flash_error = 41,
    acp_response_generic_error_fw_update_out_of_memory = 42,
    acp_response_generic_error_fw_update_invalid_size = 43,
    acp_response_generic_error_fw_update_invalid_session = 44,
    acp_response_generic_error_fw_update_invalid_chunk = 45,
    acp_response_generic_error_fw_update_invalid_checksum = 46,
    acp_response_generic_error_host_fw_update_invalid = 50,
    acp_response_generic_error_host_fw_flash_error = 51,
    acp_response_generic_error_host_fw_update_invalid_size = 53
} acp_response_generic_error;
#define _acp_response_generic_error_MIN acp_response_generic_error_no_error
#define _acp_response_generic_error_MAX acp_response_generic_error_host_fw_update_invalid_size
#define _acp_response_generic_error_ARRAYSIZE ((acp_response_generic_error)(acp_response_generic_error_host_fw_update_invalid_size+1))

typedef enum _acp_response_provisioning_provisioning_state {
    acp_response_provisioning_provisioning_state_unknown = 0,
    acp_response_provisioning_provisioning_state_not_locked = 1,
    acp_response_provisioning_provisioning_state_locked = 5
} acp_response_provisioning_provisioning_state;
#define _acp_response_provisioning_provisioning_state_MIN acp_response_provisioning_provisioning_state_unknown
#define _acp_response_provisioning_provisioning_state_MAX acp_response_provisioning_provisioning_state_locked
#define _acp_response_provisioning_provisioning_state_ARRAYSIZE ((acp_response_provisioning_provisioning_state)(acp_response_provisioning_provisioning_state_locked+1))

/* Struct definitions */
typedef struct _acp_cmd_get_ack_hardware_info {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_cmd_get_ack_hardware_info) */
} acp_cmd_get_ack_hardware_info;

typedef struct _acp_cmd_get_ack_status {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_cmd_get_ack_status) */
} acp_cmd_get_ack_status;

typedef struct _acp_cmd_get_firmware_version {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_cmd_get_firmware_version) */
} acp_cmd_get_firmware_version;

typedef struct _acp_cmd_get_next_event {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_cmd_get_next_event) */
} acp_cmd_get_next_event;

typedef struct _acp_cmd_provisioning_get_device_type {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_cmd_provisioning_get_device_type) */
} acp_cmd_provisioning_get_device_type;

typedef struct _acp_cmd_provisioning_get_provisioning_state {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_cmd_provisioning_get_provisioning_state) */
} acp_cmd_provisioning_get_provisioning_state;

typedef struct _acp_cmd_submit_logs {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_cmd_submit_logs) */
} acp_cmd_submit_logs;

typedef struct _acp_cmd_trigger_factory_reset {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_cmd_trigger_factory_reset) */
} acp_cmd_trigger_factory_reset;

typedef struct _acp_event {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_event) */
} acp_event;

typedef struct _acp_event_ack_booted {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_event_ack_booted) */
} acp_event_ack_booted;

typedef struct _acp_event_factory_reset_requested {
    char dummy_field;
/* @@protoc_insertion_point(struct:acp_event_factory_reset_requested) */
} acp_event_factory_reset_requested;

typedef struct _acp_response_get_ack_hardware_info {
    pb_callback_t dsn;
/* @@protoc_insertion_point(struct:acp_response_get_ack_hardware_info) */
} acp_response_get_ack_hardware_info;

typedef struct _acp_response_provisioning_device_type {
    pb_callback_t device_type;
/* @@protoc_insertion_point(struct:acp_response_provisioning_device_type) */
} acp_response_provisioning_device_type;

typedef struct _acp_response_read_host_fw_update_bytes {
    pb_callback_t bytes;
/* @@protoc_insertion_point(struct:acp_response_read_host_fw_update_bytes) */
} acp_response_read_host_fw_update_bytes;

typedef struct _acp_cmd_enter_setup_mode {
    acp_cmd_enter_setup_mode_registration_type mode;
    acp_cmd_enter_setup_mode_security_type security;
/* @@protoc_insertion_point(struct:acp_cmd_enter_setup_mode) */
} acp_cmd_enter_setup_mode;

typedef struct _acp_cmd_provisioning {
    pb_size_t which_command;
    union {
        acp_cmd_provisioning_get_provisioning_state get_provisioning_state_obj;
        acp_cmd_provisioning_get_device_type get_device_type_obj;
    } command;
/* @@protoc_insertion_point(struct:acp_cmd_provisioning) */
} acp_cmd_provisioning;

typedef struct _acp_cmd_read_host_fw_update_bytes {
    uint32_t offset;
    uint32_t length;
/* @@protoc_insertion_point(struct:acp_cmd_read_host_fw_update_bytes) */
} acp_cmd_read_host_fw_update_bytes;

typedef struct _acp_cmd_record_dem_metric {
    acp_cmd_record_dem_metric_Type metric_type;
    pb_callback_t datapoints;
/* @@protoc_insertion_point(struct:acp_cmd_record_dem_metric) */
} acp_cmd_record_dem_metric;

typedef struct _acp_cmd_send_alexa_event {
    V3AVS_AvsEvent event;
/* @@protoc_insertion_point(struct:acp_cmd_send_alexa_event) */
} acp_cmd_send_alexa_event;

typedef struct _acp_cmd_write_log {
    pb_callback_t component;
    acp_log_level log_level;
    pb_callback_t message;
/* @@protoc_insertion_point(struct:acp_cmd_write_log) */
} acp_cmd_write_log;

typedef struct _acp_event_alexa_directive_received {
    V3AVS_AvsDirective directive;
/* @@protoc_insertion_point(struct:acp_event_alexa_directive_received) */
} acp_event_alexa_directive_received;

typedef struct _acp_event_host_fw_update_received {
    char version[64];
    uint32_t size;
    char signature[64];
    bool force;
/* @@protoc_insertion_point(struct:acp_event_host_fw_update_received) */
} acp_event_host_fw_update_received;

typedef struct _acp_event_log_level_changed {
    acp_log_level log_level;
/* @@protoc_insertion_point(struct:acp_event_log_level_changed) */
} acp_event_log_level_changed;

typedef struct _acp_event_reboot_requested {
    bool force;
/* @@protoc_insertion_point(struct:acp_event_reboot_requested) */
} acp_event_reboot_requested;

typedef struct _acp_metric_datapoint {
    acp_metric_datapoint_Type data_type;
    char name[24];
    uint32_t counter;
    pb_callback_t text;
    float number;
/* @@protoc_insertion_point(struct:acp_metric_datapoint) */
} acp_metric_datapoint;

typedef struct _acp_property {
    char name[10];
    char value[20];
/* @@protoc_insertion_point(struct:acp_property) */
} acp_property;

typedef struct _acp_response_generic {
    acp_response_generic_error code;
    pb_callback_t description;
/* @@protoc_insertion_point(struct:acp_response_generic) */
} acp_response_generic;

typedef struct _acp_response_get_firmware_version {
    uint32_t protocol_number;
    uint32_t build_number;
    pb_callback_t incremental_version;
/* @@protoc_insertion_point(struct:acp_response_get_firmware_version) */
} acp_response_get_firmware_version;

typedef struct _acp_response_provisioning_provisioning_info {
    acp_response_provisioning_provisioning_state state;
/* @@protoc_insertion_point(struct:acp_response_provisioning_provisioning_info) */
} acp_response_provisioning_provisioning_info;

typedef struct _acp_time {
    int32_t hh;
    int32_t mm;
    int32_t ss;
/* @@protoc_insertion_point(struct:acp_time) */
} acp_time;

typedef struct _acp_cmd_write_host_config {
    uint64_t firmware_version;
    pb_size_t host_info_count;
    acp_property host_info[1];
/* @@protoc_insertion_point(struct:acp_cmd_write_host_config) */
} acp_cmd_write_host_config;

typedef struct _acp_response_get_ack_status {
    acp_time current_time;
    acp_wifi_mode wifi_mode;
    bool setup_mode;
    acp_response_error_codes error_code;
    uint32_t setup_types;
    acp_setup_stages setup_stage;
    uint32_t epoch_seconds;
/* @@protoc_insertion_point(struct:acp_response_get_ack_status) */
} acp_response_get_ack_status;

typedef struct _acp_response_provisioning {
    pb_size_t which_response;
    union {
        acp_response_provisioning_provisioning_info provisioning_info_obj;
        acp_response_provisioning_device_type device_type_obj;
    } response;
/* @@protoc_insertion_point(struct:acp_response_provisioning) */
} acp_response_provisioning;

typedef struct _acp_cmd {
    pb_size_t which_type;
    union {
        acp_cmd_get_next_event get_next_event_obj;
        acp_cmd_read_host_fw_update_bytes read_host_fw_update_bytes_obj;
        acp_cmd_get_firmware_version get_firmware_version_obj;
        acp_cmd_trigger_factory_reset trigger_factory_reset_obj;
        acp_cmd_enter_setup_mode enter_setup_mode_obj;
        acp_cmd_write_host_config write_host_config_obj;
        acp_cmd_get_ack_hardware_info get_ack_hardware_info_obj;
        acp_cmd_get_ack_status get_ack_status_obj;
        acp_cmd_write_log write_log_obj;
        acp_cmd_submit_logs submit_logs_obj;
        acp_cmd_record_dem_metric record_dem_metric_obj;
        acp_cmd_send_alexa_event send_alexa_event_obj;
        acp_cmd_provisioning provisioning_obj;
    } type;
/* @@protoc_insertion_point(struct:acp_cmd) */
} acp_cmd;

typedef struct _acp_response {
    pb_size_t which_type;
    union {
        acp_response_generic generic_obj;
        acp_response_read_host_fw_update_bytes read_host_fw_update_bytes_obj;
        acp_response_get_firmware_version get_firmware_version_obj;
        acp_response_get_ack_hardware_info get_ack_hardware_info_obj;
        acp_response_get_ack_status get_ack_status_obj;
        acp_event_reboot_requested reboot_requested_obj;
        acp_event_host_fw_update_received host_fw_update_received_obj;
        acp_event_log_level_changed log_level_changed_obj;
        acp_event_ack_booted ack_booted_obj;
        acp_event_factory_reset_requested factory_reset_requested_obj;
        acp_event_alexa_directive_received alexa_directive_received_obj;
        acp_response_provisioning provisioning_obj;
    } type;
/* @@protoc_insertion_point(struct:acp_response) */
} acp_response;

/* Default values for struct fields */

/* Initializer values for message structs */
#define acp_metric_datapoint_init_default        {(acp_metric_datapoint_Type)0, "", 0, {{NULL}, NULL}, 0}
#define acp_time_init_default                    {0, 0, 0}
#define acp_property_init_default                {"", ""}
#define acp_cmd_init_default                     {0, {acp_cmd_get_next_event_init_default}}
#define acp_cmd_send_alexa_event_init_default    {V3AVS_AvsEvent_init_default}
#define acp_cmd_get_next_event_init_default      {0}
#define acp_cmd_read_host_fw_update_bytes_init_default {0, 0}
#define acp_cmd_get_firmware_version_init_default {0}
#define acp_cmd_trigger_factory_reset_init_default {0}
#define acp_cmd_enter_setup_mode_init_default    {(acp_cmd_enter_setup_mode_registration_type)0, (acp_cmd_enter_setup_mode_security_type)0}
#define acp_cmd_write_log_init_default           {{{NULL}, NULL}, (acp_log_level)0, {{NULL}, NULL}}
#define acp_cmd_submit_logs_init_default         {0}
#define acp_cmd_record_dem_metric_init_default   {(acp_cmd_record_dem_metric_Type)0, {{NULL}, NULL}}
#define acp_cmd_write_host_config_init_default   {0, 0, {acp_property_init_default}}
#define acp_cmd_get_ack_hardware_info_init_default {0}
#define acp_cmd_get_ack_status_init_default      {0}
#define acp_cmd_provisioning_init_default        {0, {acp_cmd_provisioning_get_provisioning_state_init_default}}
#define acp_cmd_provisioning_get_provisioning_state_init_default {0}
#define acp_cmd_provisioning_get_device_type_init_default {0}
#define acp_response_init_default                {0, {acp_response_generic_init_default}}
#define acp_response_generic_init_default        {(acp_response_generic_error)0, {{NULL}, NULL}}
#define acp_response_read_host_fw_update_bytes_init_default {{{NULL}, NULL}}
#define acp_response_get_firmware_version_init_default {0, 0, {{NULL}, NULL}}
#define acp_response_get_ack_hardware_info_init_default {{{NULL}, NULL}}
#define acp_response_get_ack_status_init_default {acp_time_init_default, (acp_wifi_mode)0, 0, (acp_response_error_codes)0, 0, (acp_setup_stages)0, 0}
#define acp_response_provisioning_init_default   {0, {acp_response_provisioning_provisioning_info_init_default}}
#define acp_response_provisioning_provisioning_info_init_default {(acp_response_provisioning_provisioning_state)0}
#define acp_response_provisioning_device_type_init_default {{{NULL}, NULL}}
#define acp_event_init_default                   {0}
#define acp_event_reboot_requested_init_default  {0}
#define acp_event_host_fw_update_received_init_default {"", 0, "", 0}
#define acp_event_alexa_directive_received_init_default {V3AVS_AvsDirective_init_default}
#define acp_event_log_level_changed_init_default {(acp_log_level)0}
#define acp_event_ack_booted_init_default        {0}
#define acp_event_factory_reset_requested_init_default {0}
#define acp_metric_datapoint_init_zero           {(acp_metric_datapoint_Type)0, "", 0, {{NULL}, NULL}, 0}
#define acp_time_init_zero                       {0, 0, 0}
#define acp_property_init_zero                   {"", ""}
#define acp_cmd_init_zero                        {0, {acp_cmd_get_next_event_init_zero}}
#define acp_cmd_send_alexa_event_init_zero       {V3AVS_AvsEvent_init_zero}
#define acp_cmd_get_next_event_init_zero         {0}
#define acp_cmd_read_host_fw_update_bytes_init_zero {0, 0}
#define acp_cmd_get_firmware_version_init_zero   {0}
#define acp_cmd_trigger_factory_reset_init_zero  {0}
#define acp_cmd_enter_setup_mode_init_zero       {(acp_cmd_enter_setup_mode_registration_type)0, (acp_cmd_enter_setup_mode_security_type)0}
#define acp_cmd_write_log_init_zero              {{{NULL}, NULL}, (acp_log_level)0, {{NULL}, NULL}}
#define acp_cmd_submit_logs_init_zero            {0}
#define acp_cmd_record_dem_metric_init_zero      {(acp_cmd_record_dem_metric_Type)0, {{NULL}, NULL}}
#define acp_cmd_write_host_config_init_zero      {0, 0, {acp_property_init_zero}}
#define acp_cmd_get_ack_hardware_info_init_zero  {0}
#define acp_cmd_get_ack_status_init_zero         {0}
#define acp_cmd_provisioning_init_zero           {0, {acp_cmd_provisioning_get_provisioning_state_init_zero}}
#define acp_cmd_provisioning_get_provisioning_state_init_zero {0}
#define acp_cmd_provisioning_get_device_type_init_zero {0}
#define acp_response_init_zero                   {0, {acp_response_generic_init_zero}}
#define acp_response_generic_init_zero           {(acp_response_generic_error)0, {{NULL}, NULL}}
#define acp_response_read_host_fw_update_bytes_init_zero {{{NULL}, NULL}}
#define acp_response_get_firmware_version_init_zero {0, 0, {{NULL}, NULL}}
#define acp_response_get_ack_hardware_info_init_zero {{{NULL}, NULL}}
#define acp_response_get_ack_status_init_zero    {acp_time_init_zero, (acp_wifi_mode)0, 0, (acp_response_error_codes)0, 0, (acp_setup_stages)0, 0}
#define acp_response_provisioning_init_zero      {0, {acp_response_provisioning_provisioning_info_init_zero}}
#define acp_response_provisioning_provisioning_info_init_zero {(acp_response_provisioning_provisioning_state)0}
#define acp_response_provisioning_device_type_init_zero {{{NULL}, NULL}}
#define acp_event_init_zero                      {0}
#define acp_event_reboot_requested_init_zero     {0}
#define acp_event_host_fw_update_received_init_zero {"", 0, "", 0}
#define acp_event_alexa_directive_received_init_zero {V3AVS_AvsDirective_init_zero}
#define acp_event_log_level_changed_init_zero    {(acp_log_level)0}
#define acp_event_ack_booted_init_zero           {0}
#define acp_event_factory_reset_requested_init_zero {0}

/* Field tags (for use in manual encoding/decoding) */
#define acp_response_get_ack_hardware_info_dsn_tag 1
#define acp_response_provisioning_device_type_device_type_tag 11
#define acp_response_read_host_fw_update_bytes_bytes_tag 1
#define acp_cmd_enter_setup_mode_mode_tag        1
#define acp_cmd_enter_setup_mode_security_tag    2
#define acp_cmd_provisioning_get_provisioning_state_obj_tag 10
#define acp_cmd_provisioning_get_device_type_obj_tag 11
#define acp_cmd_read_host_fw_update_bytes_offset_tag 1
#define acp_cmd_read_host_fw_update_bytes_length_tag 2
#define acp_cmd_record_dem_metric_metric_type_tag 1
#define acp_cmd_record_dem_metric_datapoints_tag 2
#define acp_cmd_send_alexa_event_event_tag       1
#define acp_cmd_write_log_component_tag          1
#define acp_cmd_write_log_log_level_tag          2
#define acp_cmd_write_log_message_tag            5
#define acp_event_alexa_directive_received_directive_tag 1
#define acp_event_host_fw_update_received_version_tag 1
#define acp_event_host_fw_update_received_size_tag 2
#define acp_event_host_fw_update_received_signature_tag 3
#define acp_event_host_fw_update_received_force_tag 4
#define acp_event_log_level_changed_log_level_tag 1
#define acp_event_reboot_requested_force_tag     1
#define acp_metric_datapoint_data_type_tag       1
#define acp_metric_datapoint_name_tag            2
#define acp_metric_datapoint_counter_tag         6
#define acp_metric_datapoint_text_tag            8
#define acp_metric_datapoint_number_tag          9
#define acp_property_name_tag                    1
#define acp_property_value_tag                   2
#define acp_response_generic_code_tag            1
#define acp_response_generic_description_tag     2
#define acp_response_get_firmware_version_protocol_number_tag 3
#define acp_response_get_firmware_version_build_number_tag 4
#define acp_response_get_firmware_version_incremental_version_tag 5
#define acp_response_provisioning_provisioning_info_state_tag 10
#define acp_time_hh_tag                          1
#define acp_time_mm_tag                          2
#define acp_time_ss_tag                          3
#define acp_cmd_write_host_config_firmware_version_tag 1
#define acp_cmd_write_host_config_host_info_tag  4
#define acp_response_get_ack_status_current_time_tag 1
#define acp_response_get_ack_status_wifi_mode_tag 2
#define acp_response_get_ack_status_setup_mode_tag 3
#define acp_response_get_ack_status_error_code_tag 4
#define acp_response_get_ack_status_setup_types_tag 5
#define acp_response_get_ack_status_setup_stage_tag 6
#define acp_response_get_ack_status_epoch_seconds_tag 7
#define acp_response_provisioning_provisioning_info_obj_tag 100
#define acp_response_provisioning_device_type_obj_tag 101
#define acp_cmd_get_next_event_obj_tag           12
#define acp_cmd_read_host_fw_update_bytes_obj_tag 13
#define acp_cmd_get_firmware_version_obj_tag     14
#define acp_cmd_trigger_factory_reset_obj_tag    15
#define acp_cmd_enter_setup_mode_obj_tag         16
#define acp_cmd_write_host_config_obj_tag        21
#define acp_cmd_get_ack_hardware_info_obj_tag    22
#define acp_cmd_get_ack_status_obj_tag           23
#define acp_cmd_write_log_obj_tag                51
#define acp_cmd_submit_logs_obj_tag              53
#define acp_cmd_record_dem_metric_obj_tag        64
#define acp_cmd_send_alexa_event_obj_tag         81
#define acp_cmd_provisioning_obj_tag             92
#define acp_response_generic_obj_tag             1
#define acp_response_read_host_fw_update_bytes_obj_tag 2
#define acp_response_get_firmware_version_obj_tag 3
#define acp_response_get_ack_hardware_info_obj_tag 5
#define acp_response_get_ack_status_obj_tag      6
#define acp_response_reboot_requested_obj_tag    41
#define acp_response_host_fw_update_received_obj_tag 42
#define acp_response_log_level_changed_obj_tag   43
#define acp_response_ack_booted_obj_tag          45
#define acp_response_factory_reset_requested_obj_tag 47
#define acp_response_alexa_directive_received_obj_tag 61
#define acp_response_provisioning_obj_tag        92

/* Struct field encoding specification for nanopb */
extern const pb_field_t acp_metric_datapoint_fields[6];
extern const pb_field_t acp_time_fields[4];
extern const pb_field_t acp_property_fields[3];
extern const pb_field_t acp_cmd_fields[14];
extern const pb_field_t acp_cmd_send_alexa_event_fields[2];
extern const pb_field_t acp_cmd_get_next_event_fields[1];
extern const pb_field_t acp_cmd_read_host_fw_update_bytes_fields[3];
extern const pb_field_t acp_cmd_get_firmware_version_fields[1];
extern const pb_field_t acp_cmd_trigger_factory_reset_fields[1];
extern const pb_field_t acp_cmd_enter_setup_mode_fields[3];
extern const pb_field_t acp_cmd_write_log_fields[4];
extern const pb_field_t acp_cmd_submit_logs_fields[1];
extern const pb_field_t acp_cmd_record_dem_metric_fields[3];
extern const pb_field_t acp_cmd_write_host_config_fields[3];
extern const pb_field_t acp_cmd_get_ack_hardware_info_fields[1];
extern const pb_field_t acp_cmd_get_ack_status_fields[1];
extern const pb_field_t acp_cmd_provisioning_fields[3];
extern const pb_field_t acp_cmd_provisioning_get_provisioning_state_fields[1];
extern const pb_field_t acp_cmd_provisioning_get_device_type_fields[1];
extern const pb_field_t acp_response_fields[13];
extern const pb_field_t acp_response_generic_fields[3];
extern const pb_field_t acp_response_read_host_fw_update_bytes_fields[2];
extern const pb_field_t acp_response_get_firmware_version_fields[4];
extern const pb_field_t acp_response_get_ack_hardware_info_fields[2];
extern const pb_field_t acp_response_get_ack_status_fields[8];
extern const pb_field_t acp_response_provisioning_fields[3];
extern const pb_field_t acp_response_provisioning_provisioning_info_fields[2];
extern const pb_field_t acp_response_provisioning_device_type_fields[2];
extern const pb_field_t acp_event_fields[1];
extern const pb_field_t acp_event_reboot_requested_fields[2];
extern const pb_field_t acp_event_host_fw_update_received_fields[5];
extern const pb_field_t acp_event_alexa_directive_received_fields[2];
extern const pb_field_t acp_event_log_level_changed_fields[2];
extern const pb_field_t acp_event_ack_booted_fields[1];
extern const pb_field_t acp_event_factory_reset_requested_fields[1];

/* Maximum encoded size of messages (where known) */
/* acp_metric_datapoint_size depends on runtime parameters */
#define acp_time_size                            33
#define acp_property_size                        34
/* acp_cmd_size depends on runtime parameters */
#define acp_cmd_send_alexa_event_size            (6 + V3AVS_AvsEvent_size)
#define acp_cmd_get_next_event_size              0
#define acp_cmd_read_host_fw_update_bytes_size   12
#define acp_cmd_get_firmware_version_size        0
#define acp_cmd_trigger_factory_reset_size       0
#define acp_cmd_enter_setup_mode_size            4
/* acp_cmd_write_log_size depends on runtime parameters */
#define acp_cmd_submit_logs_size                 0
/* acp_cmd_record_dem_metric_size depends on runtime parameters */
#define acp_cmd_write_host_config_size           48
#define acp_cmd_get_ack_hardware_info_size       0
#define acp_cmd_get_ack_status_size              0
#define acp_cmd_provisioning_size                2
#define acp_cmd_provisioning_get_provisioning_state_size 0
#define acp_cmd_provisioning_get_device_type_size 0
/* acp_response_size depends on runtime parameters */
/* acp_response_generic_size depends on runtime parameters */
/* acp_response_read_host_fw_update_bytes_size depends on runtime parameters */
/* acp_response_get_firmware_version_size depends on runtime parameters */
/* acp_response_get_ack_hardware_info_size depends on runtime parameters */
#define acp_response_get_ack_status_size         55
/* acp_response_provisioning_size depends on runtime parameters */
#define acp_response_provisioning_provisioning_info_size 2
/* acp_response_provisioning_device_type_size depends on runtime parameters */
#define acp_event_size                           0
#define acp_event_reboot_requested_size          2
#define acp_event_host_fw_update_received_size   140
#define acp_event_alexa_directive_received_size  (6 + V3AVS_AvsDirective_size)
#define acp_event_log_level_changed_size         2
#define acp_event_ack_booted_size                0
#define acp_event_factory_reset_requested_size   0

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ACP_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
