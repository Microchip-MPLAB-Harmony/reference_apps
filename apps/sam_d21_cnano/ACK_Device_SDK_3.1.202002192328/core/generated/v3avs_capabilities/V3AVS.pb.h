/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Fri Jul 26 13:57:08 2019. */

#ifndef PB_V3AVS_PB_H_INCLUDED
#define PB_V3AVS_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _V3AVS_Namespace {
    V3AVS_Namespace_V3_ALEXA = 0,
    V3AVS_Namespace_V3_ALEXA_POWER_CONTROLLER = 1,
    V3AVS_Namespace_V3_ALEXA_COOKING_CONTROLLER = 2,
    V3AVS_Namespace_V3_ALEXA_COOKING_TIME_CONTROLLER = 3,
    V3AVS_Namespace_V3_ALEXA_FOOD_TEMPERATURE_COOKING_CONTROLLER = 4,
    V3AVS_Namespace_V3_ALEXA_TIME_HOLD_CONTROLLER = 5,
    V3AVS_Namespace_V3_ALEXA_PERCENTAGE_CONTROLLER = 6,
    V3AVS_Namespace_V3_ALEXA_TOGGLE_CONTROLLER = 7,
    V3AVS_Namespace_V3_ALEXA_MODE_CONTROLLER = 8,
    V3AVS_Namespace_V3_ALEXA_RANGE_CONTROLLER = 9,
    V3AVS_Namespace_V3_ALEXA_COLOR_CONTROLLER = 10,
    V3AVS_Namespace_V3_ALEXA_BRIGHTNESS_CONTROLLER = 11,
    V3AVS_Namespace_V3_ALEXA_COOKING_PRESET_CONTROLLER = 12,
    V3AVS_Namespace_V3_ALEXA_COLOR_TEMPERATURE_CONTROLLER = 13,
    V3AVS_Namespace_V3_ALEXA_ENDPOINT_HEALTH = 14,
    V3AVS_Namespace_V3_ALEXA_COOKING_MULTI_STEP_CONTROLLER = 15,
    V3AVS_Namespace_V3_ALEXA_COOKING_FOOD_TEMPERATURE_SENSOR = 16,
    V3AVS_Namespace_V3_ALEXA_COOKING_TEMPERATURE_SENSOR = 17,
    V3AVS_Namespace_V3_ALEXA_INVENTORY_LEVEL_SENSOR = 18,
    V3AVS_Namespace_V3_ALEXA_INFRARED_EMITTER_EMIT = 19,
    V3AVS_Namespace_V3_ALEXA_COOKING_TEMPERATURE_CONTROLLER = 20,
    V3AVS_Namespace_V3_ALEXA_INVENTORY_USAGE_SENSOR = 21,
    V3AVS_Namespace_V3_ALEXA_INVENTORY_LEVEL_USAGE_SENSOR = 22,
    V3AVS_Namespace_AVS_SYSTEM_CONTROLLER = 251,
    V3AVS_Namespace_V3_SMART_CLOUD_BASIC_DEVICE_CONTROLLER = 401,
    V3AVS_Namespace_V3_SMART_CLOUD_TIME_ZONE_CONTROLLER = 402,
    V3AVS_Namespace_V3_SMART_CLOUD_DEVICE_INVENTORY_CONTROLLER = 403,
    V3AVS_Namespace_V3_SMART_CLOUD_DEVICE_PAIRING_CONTROLLER = 404,
    V3AVS_Namespace_Custom1 = 501,
    V3AVS_Namespace_Custom2 = 502,
    V3AVS_Namespace_Custom3 = 503,
    V3AVS_Namespace_Custom4 = 504,
    V3AVS_Namespace_Custom5 = 505,
    V3AVS_Namespace_Custom6 = 506,
    V3AVS_Namespace_Custom7 = 507,
    V3AVS_Namespace_Custom8 = 508,
    V3AVS_Namespace_Custom9 = 509,
    V3AVS_Namespace_Custom10 = 510,
    V3AVS_Namespace_Custom11 = 511,
    V3AVS_Namespace_Custom12 = 512,
    V3AVS_Namespace_Custom13 = 513,
    V3AVS_Namespace_Custom14 = 514,
    V3AVS_Namespace_Custom15 = 515,
    V3AVS_Namespace_Custom16 = 516,
    V3AVS_Namespace_Custom17 = 517,
    V3AVS_Namespace_Custom18 = 518,
    V3AVS_Namespace_Custom19 = 519,
    V3AVS_Namespace_Custom20 = 520,
    V3AVS_Namespace_Custom21 = 521,
    V3AVS_Namespace_Custom22 = 522,
    V3AVS_Namespace_Custom23 = 523,
    V3AVS_Namespace_Custom24 = 524,
    V3AVS_Namespace_Custom25 = 525,
    V3AVS_Namespace_Custom26 = 526,
    V3AVS_Namespace_Custom27 = 527,
    V3AVS_Namespace_Custom28 = 528,
    V3AVS_Namespace_Custom29 = 529,
    V3AVS_Namespace_Custom30 = 530,
    V3AVS_Namespace_Custom31 = 531,
    V3AVS_Namespace_Custom32 = 532,
    V3AVS_Namespace_Custom33 = 533,
    V3AVS_Namespace_Custom34 = 534,
    V3AVS_Namespace_Custom35 = 535,
    V3AVS_Namespace_Custom36 = 536,
    V3AVS_Namespace_Custom37 = 537,
    V3AVS_Namespace_Custom38 = 538,
    V3AVS_Namespace_Custom39 = 539,
    V3AVS_Namespace_Custom40 = 540,
    V3AVS_Namespace_Custom41 = 541,
    V3AVS_Namespace_Custom42 = 542,
    V3AVS_Namespace_Custom43 = 543,
    V3AVS_Namespace_Custom44 = 544,
    V3AVS_Namespace_Custom45 = 545,
    V3AVS_Namespace_Custom46 = 546,
    V3AVS_Namespace_Custom47 = 547,
    V3AVS_Namespace_Custom48 = 548,
    V3AVS_Namespace_Custom49 = 549,
    V3AVS_Namespace_Custom50 = 550,
    V3AVS_Namespace_Custom51 = 551,
    V3AVS_Namespace_Custom52 = 552,
    V3AVS_Namespace_Custom53 = 553,
    V3AVS_Namespace_Custom54 = 554,
    V3AVS_Namespace_Custom55 = 555,
    V3AVS_Namespace_Custom56 = 556,
    V3AVS_Namespace_Custom57 = 557,
    V3AVS_Namespace_Custom58 = 558,
    V3AVS_Namespace_Custom59 = 559,
    V3AVS_Namespace_Custom60 = 560,
    V3AVS_Namespace_Custom61 = 561,
    V3AVS_Namespace_Custom62 = 562,
    V3AVS_Namespace_Custom63 = 563,
    V3AVS_Namespace_Custom64 = 564,
    V3AVS_Namespace_Custom65 = 565,
    V3AVS_Namespace_Custom66 = 566,
    V3AVS_Namespace_Custom67 = 567,
    V3AVS_Namespace_Custom68 = 568,
    V3AVS_Namespace_Custom69 = 569,
    V3AVS_Namespace_Custom70 = 570,
    V3AVS_Namespace_Custom71 = 571,
    V3AVS_Namespace_Custom72 = 572,
    V3AVS_Namespace_Custom73 = 573,
    V3AVS_Namespace_Custom74 = 574,
    V3AVS_Namespace_Custom75 = 575,
    V3AVS_Namespace_Custom76 = 576,
    V3AVS_Namespace_Custom77 = 577,
    V3AVS_Namespace_Custom78 = 578,
    V3AVS_Namespace_Custom79 = 579,
    V3AVS_Namespace_Custom80 = 580,
    V3AVS_Namespace_Custom81 = 581,
    V3AVS_Namespace_Custom82 = 582,
    V3AVS_Namespace_Custom83 = 583,
    V3AVS_Namespace_Custom84 = 584,
    V3AVS_Namespace_Custom85 = 585,
    V3AVS_Namespace_Custom86 = 586,
    V3AVS_Namespace_Custom87 = 587,
    V3AVS_Namespace_Custom88 = 588,
    V3AVS_Namespace_Custom89 = 589,
    V3AVS_Namespace_Custom90 = 590,
    V3AVS_Namespace_Custom91 = 591,
    V3AVS_Namespace_Custom92 = 592,
    V3AVS_Namespace_Custom93 = 593,
    V3AVS_Namespace_Custom94 = 594,
    V3AVS_Namespace_Custom95 = 595,
    V3AVS_Namespace_Custom96 = 596,
    V3AVS_Namespace_Custom97 = 597,
    V3AVS_Namespace_Custom98 = 598,
    V3AVS_Namespace_Custom99 = 599,
    V3AVS_Namespace_Custom100 = 600
} V3AVS_Namespace;
#define _V3AVS_Namespace_MIN V3AVS_Namespace_V3_ALEXA
#define _V3AVS_Namespace_MAX V3AVS_Namespace_Custom100
#define _V3AVS_Namespace_ARRAYSIZE ((V3AVS_Namespace)(V3AVS_Namespace_Custom100+1))

/* Struct definitions */
typedef struct _V3AVS {
    char dummy_field;
/* @@protoc_insertion_point(struct:V3AVS) */
} V3AVS;

typedef struct _V3AVS_AvsDirective {
    V3AVS_Namespace v3_namespace;
    int32_t correlation_id;
    pb_callback_t payload;
    uint64_t timestamp;
    uint64_t expires_at;
    uint32_t instance;
/* @@protoc_insertion_point(struct:V3AVS_AvsDirective) */
} V3AVS_AvsDirective;

typedef struct _V3AVS_AvsEvent {
    V3AVS_Namespace v3_namespace;
    int32_t correlation_id;
    pb_callback_t payload;
    uint64_t timestamp;
    uint32_t instance;
/* @@protoc_insertion_point(struct:V3AVS_AvsEvent) */
} V3AVS_AvsEvent;

/* Default values for struct fields */

/* Initializer values for message structs */
#define V3AVS_init_default                       {0}
#define V3AVS_AvsDirective_init_default          {(V3AVS_Namespace)0, 0, {{NULL}, NULL}, 0, 0, 0}
#define V3AVS_AvsEvent_init_default              {(V3AVS_Namespace)0, 0, {{NULL}, NULL}, 0, 0}
#define V3AVS_init_zero                          {0}
#define V3AVS_AvsDirective_init_zero             {(V3AVS_Namespace)0, 0, {{NULL}, NULL}, 0, 0, 0}
#define V3AVS_AvsEvent_init_zero                 {(V3AVS_Namespace)0, 0, {{NULL}, NULL}, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define V3AVS_AvsDirective_v3_namespace_tag      1
#define V3AVS_AvsDirective_correlation_id_tag    2
#define V3AVS_AvsDirective_payload_tag           3
#define V3AVS_AvsDirective_timestamp_tag         4
#define V3AVS_AvsDirective_expires_at_tag        5
#define V3AVS_AvsDirective_instance_tag          6
#define V3AVS_AvsEvent_v3_namespace_tag          1
#define V3AVS_AvsEvent_correlation_id_tag        2
#define V3AVS_AvsEvent_payload_tag               3
#define V3AVS_AvsEvent_timestamp_tag             5
#define V3AVS_AvsEvent_instance_tag              6

/* Struct field encoding specification for nanopb */
extern const pb_field_t V3AVS_fields[1];
extern const pb_field_t V3AVS_AvsDirective_fields[7];
extern const pb_field_t V3AVS_AvsEvent_fields[6];

/* Maximum encoded size of messages (where known) */
#define V3AVS_size                               0
/* V3AVS_AvsDirective_size depends on runtime parameters */
/* V3AVS_AvsEvent_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define V3AVS_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
