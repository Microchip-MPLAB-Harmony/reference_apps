# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: v3avs_types/V3Mode.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='v3avs_types/V3Mode.proto',
  package='v3avs_types',
  syntax='proto3',
  serialized_pb=_b('\n\x18v3avs_types/V3Mode.proto\x12\x0bv3avs_types\"\x16\n\x06V3Mode\x12\x0c\n\x04mode\x18\x01 \x01(\rB+\n#com.amazon.proto.avs.v3.v3avs_typesB\x04Modeb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_V3MODE = _descriptor.Descriptor(
  name='V3Mode',
  full_name='v3avs_types.V3Mode',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='mode', full_name='v3avs_types.V3Mode.mode', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=41,
  serialized_end=63,
)

DESCRIPTOR.message_types_by_name['V3Mode'] = _V3MODE

V3Mode = _reflection.GeneratedProtocolMessageType('V3Mode', (_message.Message,), dict(
  DESCRIPTOR = _V3MODE,
  __module__ = 'v3avs_types.V3Mode_pb2'
  # @@protoc_insertion_point(class_scope:v3avs_types.V3Mode)
  ))
_sym_db.RegisterMessage(V3Mode)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n#com.amazon.proto.avs.v3.v3avs_typesB\004Mode'))
# @@protoc_insertion_point(module_scope)
