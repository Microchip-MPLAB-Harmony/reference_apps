/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Thu May 02 07:30:41 2019. */

#ifndef PB_V3AVS_TYPES_V3LENGTH_PB_H_INCLUDED
#define PB_V3AVS_TYPES_V3LENGTH_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _v3avs_types_V3Length_Unit {
    v3avs_types_V3Length_Unit_METER = 0,
    v3avs_types_V3Length_Unit_KILOMETER = 1,
    v3avs_types_V3Length_Unit_CENTIMETER = 2,
    v3avs_types_V3Length_Unit_MILLIMETER = 3,
    v3avs_types_V3Length_Unit_INCH = 4,
    v3avs_types_V3Length_Unit_SPAN = 5,
    v3avs_types_V3Length_Unit_FOOT = 6,
    v3avs_types_V3Length_Unit_YARD = 7,
    v3avs_types_V3Length_Unit_MILE = 8
} v3avs_types_V3Length_Unit;
#define _v3avs_types_V3Length_Unit_MIN v3avs_types_V3Length_Unit_METER
#define _v3avs_types_V3Length_Unit_MAX v3avs_types_V3Length_Unit_MILE
#define _v3avs_types_V3Length_Unit_ARRAYSIZE ((v3avs_types_V3Length_Unit)(v3avs_types_V3Length_Unit_MILE+1))

/* Struct definitions */
typedef struct _v3avs_types_V3Length {
    float value;
    v3avs_types_V3Length_Unit unit;
/* @@protoc_insertion_point(struct:v3avs_types_V3Length) */
} v3avs_types_V3Length;

/* Default values for struct fields */

/* Initializer values for message structs */
#define v3avs_types_V3Length_init_default        {0, (v3avs_types_V3Length_Unit)0}
#define v3avs_types_V3Length_init_zero           {0, (v3avs_types_V3Length_Unit)0}

/* Field tags (for use in manual encoding/decoding) */
#define v3avs_types_V3Length_value_tag           1
#define v3avs_types_V3Length_unit_tag            2

/* Struct field encoding specification for nanopb */
extern const pb_field_t v3avs_types_V3Length_fields[3];

/* Maximum encoded size of messages (where known) */
#define v3avs_types_V3Length_size                7

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define V3LENGTH_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
