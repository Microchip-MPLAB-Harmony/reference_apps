#include "ack_user_config.h"
#ifdef ACK_POWER_CONTROLLER

/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Mon Jun 24 21:19:31 2019. */

#ifndef PB_V3AVS_TYPES_V3POWERSTATE_PB_H_INCLUDED
#define PB_V3AVS_TYPES_V3POWERSTATE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _v3avs_types_V3PowerState_Value {
    v3avs_types_V3PowerState_Value_ON = 0,
    v3avs_types_V3PowerState_Value_OFF = 1
} v3avs_types_V3PowerState_Value;
#define _v3avs_types_V3PowerState_Value_MIN v3avs_types_V3PowerState_Value_ON
#define _v3avs_types_V3PowerState_Value_MAX v3avs_types_V3PowerState_Value_OFF
#define _v3avs_types_V3PowerState_Value_ARRAYSIZE ((v3avs_types_V3PowerState_Value)(v3avs_types_V3PowerState_Value_OFF+1))

/* Struct definitions */
typedef struct _v3avs_types_V3PowerState {
    v3avs_types_V3PowerState_Value value;
/* @@protoc_insertion_point(struct:v3avs_types_V3PowerState) */
} v3avs_types_V3PowerState;

/* Default values for struct fields */

/* Initializer values for message structs */
#define v3avs_types_V3PowerState_init_default    {(v3avs_types_V3PowerState_Value)0}
#define v3avs_types_V3PowerState_init_zero       {(v3avs_types_V3PowerState_Value)0}

/* Field tags (for use in manual encoding/decoding) */
#define v3avs_types_V3PowerState_value_tag       1

/* Struct field encoding specification for nanopb */
extern const pb_field_t v3avs_types_V3PowerState_fields[2];

/* Maximum encoded size of messages (where known) */
#define v3avs_types_V3PowerState_size            2

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define V3POWERSTATE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

#endif
